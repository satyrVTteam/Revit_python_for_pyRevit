{
  "Uuid": "d759eac4-db70-4c61-b3b0-449ada1686b1",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Sheets_END_to_rename_script",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Parameter.ParameterByName@Revit.Elements.Element,string",
      "Id": "a8f75e58d91a4d4a9af1d6eb94ebd53c",
      "Inputs": [
        {
          "Id": "965b585ccb684a15bf55db48aa6115ac",
          "Name": "element",
          "Description": "Element\n\nElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "47e7f0b142be48a497d000dd22f96ec3",
          "Name": "name",
          "Description": "Parameter Name\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b627912531b14cff830a58b690bbf50c",
          "Name": "Parameter",
          "Description": "Parameter",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get Element's Parameter by Name\n\nParameter.ParameterByName (element: Element, name: string): Parameter"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Sheet Number\";",
      "Id": "ee0d65753f38412191d8b9460e9d5bfa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8d684a63e9da473f809b996aa031a430",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "213a5e6a822f46f98abc0437aa7f0617",
      "Inputs": [
        {
          "Id": "090e29fba95248d194d9c49302787e0c",
          "Name": "obj",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2e2f49b251fd48e88a702f5dda31cad0",
          "Name": "str",
          "Description": "Result of math computation",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Converts an object to a string representation"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "92e6fb4303114e60a4b4e399b0bf927f",
      "Inputs": [
        {
          "Id": "94fea5345bea4e2d9cdbbe07b2e51242",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fe26e8c1182b4b51840db827a0f659c6",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "156cd3298af8424fbe57554215774f95",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\" : \";",
      "Id": "45565bef9d85461d885db41ac387b126",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a558009ede7447c69432aa0c3c5b71c2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Contains@var[]..[],var[]..[]",
      "Id": "d7154c72536e47bc8f27897c22ad9c26",
      "Inputs": [
        {
          "Id": "f2616170e3eb45799fd9b7e85383dfec",
          "Name": "list",
          "Description": "List to search in\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "125b91f130564101bba1d5585ba5bf01",
          "Name": "item",
          "Description": "Item to look for\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0efe5a4aac5f417683e17d93308b5a15",
          "Name": "bool",
          "Description": "True if list contains item, false if it doesnâ€™t",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Determines if the given list contains the given item. This function searches through the sublists contained in it.\n\nList.Contains (list: var[]..[], item: var[]..[]): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropEveryNthItem@var[]..[],int,int",
      "Id": "c23355bfce2a41948bbd84133a828315",
      "Inputs": [
        {
          "Id": "7a5ab7db0ced46a187026fbe4d5dbf3f",
          "Name": "list",
          "Description": "List to remove items from/\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "85dbc15f664d4abaa5adc0c3f482d77f",
          "Name": "n",
          "Description": "Indices that are multiples of this argument will be removed.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3fbee0a87b2b4fa2904dd381936551b2",
          "Name": "offset",
          "Description": "Amount of items to be ignored from the start of the list.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fec15e8215a84c5e9bcd30f237d7ffa7",
          "Name": "list",
          "Description": "List with items removed.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Longest",
      "Description": "Removes items from the given list at indices that are multiples of the given value, after the given offset.\n\nList.DropEveryNthItem (list: var[]..[], n: int, offset: int = 0): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "0f1358c884404a77bda45ddb3e65f8f2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f4fdc24762874cb4ab5ff115455f6f07",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-1;",
      "Id": "775f9493189949858815833478c709c4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a402e27cd28d473fa1efff0ea1177ec5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "0101bc3c67b84625a152e9ad40bc87fe",
      "Inputs": [
        {
          "Id": "56f86128a7d9479d84d9b611f0954aa3",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0d531271dceb4155aecada10b3ec6450",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d23876a9bf914017b2efceb0a7db105e",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "a91275344f7a4edaabddcc0ebd3d6679",
      "Inputs": [
        {
          "Id": "a4b3128482a84085bff4507ba1f01bc9",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "35249b3dd6624307bbac4fc5e82151d5",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "d7f2d971279a4f75a5cee892cebf43de",
      "Inputs": [
        {
          "Id": "1787cbbd31824149955f99df83a5622b",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "93c9b7f20c334bdcbca02030b4174730",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "08d704ac7ad7432a97ab79fd52e485a6",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "34cb4a19eceb485099d1086e324b9719",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "48c5d6103f36443cb38796b668f07c07",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fea3f0d377764b1b9b6b0886a3b12a0d",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Contains@var[]..[],var[]..[]",
      "Id": "88a63d4a77914f099d77106cdd68c262",
      "Inputs": [
        {
          "Id": "f4733fddc0e64e73bfd781a273ac9b2b",
          "Name": "list",
          "Description": "List to search in\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e57a9c4c9d37461e8a2befeb76cba64c",
          "Name": "item",
          "Description": "Item to look for\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4cc2c97edc6349c6afc5e6554eb3346e",
          "Name": "bool",
          "Description": "True if list contains item, false if it doesnâ€™t",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Longest",
      "Description": "Determines if the given list contains the given item. This function searches through the sublists contained in it.\n\nList.Contains (list: var[]..[], item: var[]..[]): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "ca30de3cc06246bfa0b85471203aead1",
      "Inputs": [
        {
          "Id": "1690d1063f85427cbf3c2afc924a17b1",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2737ba2ceba34556b8d28e02e8a913e1",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0f1e11f2e4904a5cac5be2a5743d2994",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d62f13154c354e7691ac04d42f6af90d",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "3549a48d067145a58522feed12901f02",
      "Inputs": [
        {
          "Id": "a3f234102cb444479b04e54568f0aa37",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6058332c9f9147a2b93ecf73edfdcafc",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Sheet Number\";",
      "Id": "7d20038480664ca9a7b82da92a3f307c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aaddd9ce52754195ae05b144ea1e2f94",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Parameter.ParameterByName@Revit.Elements.Element,string",
      "Id": "08d14afadd914c7f9aa571137a833485",
      "Inputs": [
        {
          "Id": "1ff78da631854e11a02b2d4bcd5ed978",
          "Name": "element",
          "Description": "Element\n\nElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "135e11335ea44020af8c8e932818567d",
          "Name": "name",
          "Description": "Parameter Name\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9b103f31b8ef41c69277d4f6d12a9ad7",
          "Name": "Parameter",
          "Description": "Parameter",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get Element's Parameter by Name\n\nParameter.ParameterByName (element: Element, name: string): Parameter"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropEveryNthItem@var[]..[],int,int",
      "Id": "51a813187854475d9bc9625fe2118a49",
      "Inputs": [
        {
          "Id": "3c9c7632112d4986ac6c962247693de3",
          "Name": "list",
          "Description": "List to remove items from/\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d32ac72e5d264da38e8c4d4fb3170f6d",
          "Name": "n",
          "Description": "Indices that are multiples of this argument will be removed.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a16561f87684eba89d9e505551c70ac",
          "Name": "offset",
          "Description": "Amount of items to be ignored from the start of the list.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d12b0e9243e24a899d8add98becb3ce6",
          "Name": "list",
          "Description": "List with items removed.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Longest",
      "Description": "Removes items from the given list at indices that are multiples of the given value, after the given offset.\n\nList.DropEveryNthItem (list: var[]..[], n: int, offset: int = 0): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "30d4e047effe49069fff725834fc4c2b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "76dffd03b8184e85b211ac1c6c763f49",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-1;",
      "Id": "e9241d71849a47798e24a5504b12abb1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2c770c37bbcd450294f0838e571b0cef",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "dbc85df11fdf49eb8607cb1ab2fa1eee",
      "Inputs": [
        {
          "Id": "581d920ad8dc417e855b190638afccb5",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4f8e07bccc7f416d88d78cbceb86fc14",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5358e3eabb75485b8bf1e1db14bd0b8b",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\" : \";",
      "Id": "84fbbfa659d94afcbe5e493e67384900",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dd75040a874a4b14b2ead6789d4afef7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "a042f6a996ac42a6a8cfcda2f10c2c5a",
      "Inputs": [
        {
          "Id": "7e542ae9f3034f74bc561e3714858dc6",
          "Name": "obj",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e63af5f1fed0451fa5e27c8fe0f0d1ac",
          "Name": "str",
          "Description": "Result of math computation",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Converts an object to a string representation"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "77361572be4e4dd29d38b03b45c9d8ce",
      "Inputs": [
        {
          "Id": "948f0ae4ae6f40a19b2e01c390e0dd36",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8f5e967ac644431a99cc2ae4476acb67",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "620704115e3345279ca7138711b85688",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "10;",
      "Id": "54cd4c89cab34ee6b4e60ea91216e5aa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8e50cb0718dd4c3cabf429c6dfd40a7f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "9;",
      "Id": "4fb6bed1a7684175a6e15de5a24ce97b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a689f6af42c245a49b836cbc6b5230a2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "<@var[]..[],var[]..[]",
      "Id": "143dc36a3a214b43a56ab8113c74157c",
      "Inputs": [
        {
          "Id": "ea7d895423a6440aa310f18689b64ff9",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3448d1b0c38b4c349aee38f1f85c91bd",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9a21ec35d1ed4f73a7f3ba89d69144e5",
          "Name": "bool",
          "Description": "Result of check",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Compares if x is lower to y\n\n< (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": ">@var[]..[],var[]..[]",
      "Id": "cf6da6a0ff474127b035281b9cf35685",
      "Inputs": [
        {
          "Id": "93b7c432fc8f4ce8b723a41ac961262a",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "47c8bebfb7b845b08afd002285ed9caa",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f8ae605e58764e6c90221e8de759c4cb",
          "Name": "bool",
          "Description": "True if x is greater than y, false if not",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Compares if x is greater than y\n\n> (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "4f9b501c0d984a789b29670727ee9ec8",
      "Inputs": [
        {
          "Id": "1c84cc38fc5446408ee8e04c09f49744",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c3d8f6da5caf4a13a326ddc469913e8d",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0d04a748f50145a99130aeb20b232b17",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d4f585175db84265bb69e0e034e60eee",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "0b3187a1ac8541b4bfe4a3ddee905a9d",
      "Inputs": [
        {
          "Id": "721ee52af0674658b3d6d6d56f0ceaff",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5fb0047242fa44d891133ba130473971",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "a07022598c1542678478a23e68357402",
      "Inputs": [
        {
          "Id": "a0637a05d14147a89c9734343a9e4e86",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c9603cefa20f46ef83c86436cf1fcc2a",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "82e69c4721ac463e9d204c54009c1855",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "782b304f1fac473eaaff06a464f40de9",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"0\";",
      "Id": "0fa128410b4e4f17bdac1f53f44a56f4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3c8d3c8dc9eb49e0a9c76f98605f0704",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "one+two+three;",
      "Id": "ca5cb2ad54174401bc86dfa5b5f83f25",
      "Inputs": [
        {
          "Id": "0da9a181609f471689cc48f53e8f6aeb",
          "Name": "one",
          "Description": "one",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "198e60f8412244f9af2882c3209f6be2",
          "Name": "two",
          "Description": "two",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f31acf18adf34eec88fdbada2a16c1ea",
          "Name": "three",
          "Description": "three",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "67128b3c46e4488fb713bcaed401a5f6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "one+two+three+four;",
      "Id": "199904c4c93649408ce2f4e73ff91f63",
      "Inputs": [
        {
          "Id": "4362dae7cc004061bf1fd4f6780f0a04",
          "Name": "one",
          "Description": "one",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2e56310e7cef48cfad4cdd34a0f29c74",
          "Name": "two",
          "Description": "two",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e2ac11a3959847fe9f916a33750eb2d9",
          "Name": "three",
          "Description": "three",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0e8f583278a04dd6a9455eaac2bbed4d",
          "Name": "four",
          "Description": "four",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "81d0ab618adf494e86be37416774fbab",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "3b30abf7d062411d9df89c569507144b",
      "Inputs": [
        {
          "Id": "19b427dec1f94b8d81c657c2992595f6",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a0de33c31a8a4f0e82a577d77d3d306c",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e7c695ed8e5d4456ab1ac4b88311cc68",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list from the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "f68fe1b76cdb42e186d3d24fefea421d",
      "Inputs": [
        {
          "Id": "0bb0cab6923246aea5335464574f9e1a",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a4fdbc1873864fa99cfc9dd5cfef7d8a",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "93b60ca9e1824496a831960455b8c1e5",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Id": "da921f5ebeb94834a06eb972e22b313f",
      "Inputs": [
        {
          "Id": "d445d4b8adf4488ab8fa353c58e336d6",
          "Name": "x",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aa14801628784a76bc5017a73c0c0d15",
          "Name": "y",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f6d83d59a6d74d8a802fbfd401aadbe0",
          "Name": "var",
          "Description": "The sum of two input numbers, or the concatenation of two strings",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns addition of x and y\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "52747af44249478b842034a60ceb4074",
      "Inputs": [
        {
          "Id": "6b5483aa6d9049cb90077fd2da2381c1",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "154bf9c64e1947ae91bb8e1097d1f276",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2f72f5ca1ccd49e79ac32fc1a1c44df3",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b7f7c398e6324019a2ece20e8230258d",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "one+two+three;",
      "Id": "6f36420c52ee450bb0963c61fb7df3bb",
      "Inputs": [
        {
          "Id": "933c01c2a9e940c998d6079749824807",
          "Name": "one",
          "Description": "one",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1c877df5bc7849c1b23f453231be4553",
          "Name": "two",
          "Description": "two",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c933724f5be4478c91e2fdc5ba0294c1",
          "Name": "three",
          "Description": "three",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "78fb356219e6457a8a35b40cb3f6e6c7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "209e9400244b4130911c085d5dd43374",
      "Inputs": [
        {
          "Id": "c60b0c943da0469ba7662cfc41337213",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ef8c12b459bb452eb4a266ee90c2751c",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Ceiling@double",
      "Id": "38c422c206104e88ba7465c9953c914a",
      "Inputs": [
        {
          "Id": "9b580e05d6fc4813b39c7a6adf6c9906",
          "Name": "number",
          "Description": "Number to round up.\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2c10a524ce9d4775bc050518c39d2ade",
          "Name": "int",
          "Description": "First integer greater than the number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first integer greater than the number\n\nMath.Ceiling (number: double): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "9a48bfef1198479690af6b02af846ebf",
      "Inputs": [
        {
          "Id": "40e9acbce6324575b5e7c471dacb7ade",
          "Name": "string",
          "Description": "String to be converted\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5fd8ddef0bed4bc38e053dcd67a1101c",
          "Name": "number",
          "Description": "Integer or double-type number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (string: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Id": "b4a888937ff1439b93012636d23e931d",
      "Inputs": [
        {
          "Id": "8c515e8469ef485bb1e13bd441171a1f",
          "Name": "x",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4e0b3ff5837646ae8327c569684f068f",
          "Name": "y",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "91aa97fe7f2742a9ac0bb8fc70b1d81a",
          "Name": "var",
          "Description": "The sum of two input numbers, or the concatenation of two strings",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns addition of x and y\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "a1c0c737896d4698bed4c7edcd9a6e85",
      "Inputs": [
        {
          "Id": "5a9c851b320b467b9056659e0367a351",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "24a44bc644f649f6b99565b886e1ba1d",
          "Name": "Elements",
          "Description": "An element type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Category.ByName@string",
      "Id": "a86e73135a9f4dc38bcf8d599ddb42e5",
      "Inputs": [
        {
          "Id": "2daf324a0ecc4b71a5de2e29d6a2a29a",
          "Name": "name",
          "Description": "The built in category name.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c3ad1ab056fe4abfb7fea7f5a199b094",
          "Name": "Category",
          "Description": "Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets a Revit category by the built-in category name.\n\nCategory.ByName (name: string): Category"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Sheets\";",
      "Id": "81ddf3270306488085ca1063d397b8f4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1015531945a04bb5927e1f0bf2a4409e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "x = IN[0]\r\nz = \"\"\r\nif \".\" in x: z = \".\"\r\nelse: \r\n\tz = \"\"\r\n\r\n\r\nOUT = z",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1291e6fca27f48a38bb4b4c95c41be8d",
      "Inputs": [
        {
          "Id": "4e356b624a01417ea052049ec1d66f1d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eaa000672bcf4de2972c80c2d9488447",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "if isinstance(IN[0], list): x = IN[0]\r\nelse: x = [IN[0]]\r\nz = []\r\n\r\nif \".\" in x[0]: \r\n\tfor i in x:\r\n\t\tz.append(i.split(\".\")[0])\r\nelse: \r\n\tfor i in x:\r\n\t\tz.append(filter(str.isalpha, i[:-1])) #x[:-1] to avoid situations where a letter at the end\r\n\r\n\r\nOUT = z",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "6624986042464699a14d1aaec5e0a2f2",
      "Inputs": [
        {
          "Id": "1ad28cae3f2f49b1a43cf5afd6bd1d6f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8303f430da4a4caa9984590da8b77d73",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "x = IN[0]\r\nz = []\r\n\r\nfor i in x:\r\n    z.append(int(i[1]))\r\n\r\n\r\n\r\nOUT = z\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "4e90d1351fca4100b1fff2a9a2679d4f",
      "Inputs": [
        {
          "Id": "74e4cff15bef41069f3134127a57ec1c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "abf9d0afe68d4852a42c4a06d5718109",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "x = IN[0][0]\r\nz = \"\"\r\nif \".\" in x: z = \".\"\r\nelse: \r\n\tz = \"\"\r\n\r\n\r\nOUT = z",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "fe4b726de18143f0b37a1179854fde97",
      "Inputs": [
        {
          "Id": "8ee2a0d377b74cbfa28546bbb2f8e8ae",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "584617d2cf12423986f133498c459244",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "if isinstance(IN[0], list): x = IN[0]\r\nelse: x = [IN[0]]\r\nz = []\r\n\r\nif \".\" in x[0]: \r\n\tfor i in x:\r\n\t\tz.append(i.split(\".\")[0])\r\nelse: \r\n\tfor i in x:\r\n\t\tz.append(filter(str.isalpha, i[:-1])) #x[:-1] to avoid situations where a letter at the end\r\n\r\n\r\nOUT = z",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "b3bb13793f014b1a9f49d72ddbdfaf53",
      "Inputs": [
        {
          "Id": "380ea88d897b460a88c77fe74c3c7e4a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "84d7ef63f2164d2198748c81d4a4cbfa",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "x = IN[0]\r\nz = []\r\n\r\nfor i in x:\r\n    z.append(int(i[1]))\r\n\r\n\r\n\r\nOUT = z\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "41b118721b034772bc514b160ef6a73a",
      "Inputs": [
        {
          "Id": "9dc66cda7ae147e59923264b5c6be24b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "78c90969450f45e88834a530a7eb140e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "18cf71fcf3d347e489e01de0516beafc",
      "Inputs": [
        {
          "Id": "f061024dc6a84a9cbcbf7e5fbcfe74a9",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "19f43e520c654b49a8d936beb9a35ac7",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "de60b6714b974a8d906faa09e01508f5",
          "Name": "number",
          "Description": "The product of the two input numbers",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns multiplication of x times y\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Rand",
      "Id": "8c4900be09f045b9a3d6e736c59d2c2b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c556576b0a994d7c8e9f06825e62e931",
          "Name": "number",
          "Description": "Random number in the range [0, 1).",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produce a random number in the range [0, 1).\n\nMath.Rand ( ): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1000;",
      "Id": "d673ee9af5a24b299372885827149fd5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2348091264394b7386125bd308056bd2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "inp = IN[0]\nsorting = IN[1]\n\n\nzipped = zip(sorting,inp)\n\nsorted_zipped_lists = sorted(zipped)\n\n#crazy way to get the second element fom any sublist\nsorted_list1 = [element for _, element in sorted_zipped_lists]\n\nOUT = sorted_list1 \n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "09307fff7f544b03a087f5928608ea95",
      "Inputs": [
        {
          "Id": "8bdc5e2a70c047bfa65e4b620ec5c127",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b599dfb56cc847e7bb9f61ee1b39d714",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "25759c19316d46d2a22cf9c75b3c51a3",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\n\nOUT = sorted(IN[0])\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "6cd854a196c0499892a2fc48be5638ad",
      "Inputs": [
        {
          "Id": "9bdf167794624fd8b1003b2524008a4d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "15c9129f5a3a45138ce880f3aed8f4ff",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "if isinstance(IN[0], list):\r\n\tx = IN[0]\r\nelse: x = [IN[0]]\r\nz = []\r\n\r\nif \".\" in x[0]: \r\n\tfor i in x:\r\n\t\tz.append(int(i.split(\".\")[1]))\r\nelse: \r\n\tfor i in x:\r\n\t   z = z + \"\".join([c for i in x for c in i if c.isdigit()])\r\n\r\n\r\nOUT = z\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "de88edc491aa47218daebe0ca371001e",
      "Inputs": [
        {
          "Id": "57bdcc05c3cf4bf1a998b64de80345bf",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "735d9774c25c47ceafdfa1633fc35a9c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "if isinstance(IN[0], list): x = IN[0]\r\nelse: x = [IN[0]]\r\nz = []\r\n\r\nif \".\" in x[0]: \r\n\tfor i in x:\r\n\t\tz.append(i.split(\".\")[0])\r\nelse: \r\n\tfor i in x:\r\n\t\tz.append(filter(str.isalpha, i[:-1])) #x[:-1] to avoid situations where a letter at the end\r\n\r\n\r\nOUT = z",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "015c45b31eaf4010928203de80fc726a",
      "Inputs": [
        {
          "Id": "03abaeb239dd43639f4bcd90832e9c32",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "65327e6856064e25a2ce1074f908fe70",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "one+two+three;",
      "Id": "1669f9b3a72b45f0a265abb8ab8c2458",
      "Inputs": [
        {
          "Id": "ed9f336e56564f5780a4848742ec9e23",
          "Name": "one",
          "Description": "one",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dd60c672928b4ef1b393e4dc13b2bd03",
          "Name": "two",
          "Description": "two",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1475c862e4124da6b200c4e289985903",
          "Name": "three",
          "Description": "three",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "363b33968d1342728a6f2de625a523cd",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": ">@var[]..[],var[]..[]",
      "Id": "e4e55e2d57c14c5d9ea395ba9f58eb8d",
      "Inputs": [
        {
          "Id": "514316897fe64f4b9e1532ff6ebbba1c",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "188caea8ee24498c9d7fcfe275950270",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f5a7dc77f0f44362b60985ecbd717811",
          "Name": "bool",
          "Description": "True if x is greater than y, false if not",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Compares if x is greater than y\n\n> (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "9;",
      "Id": "95e3bc8549bb4a4dbebb1e23d80cd1b1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1bb81df25a1649528e2fc74051a19ecc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "e9cdb55d972146879c7384da34296897",
      "Inputs": [
        {
          "Id": "d5e66af66d244bd197a35d71ffe53c57",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e90ddbac489a47d0874475af4582ed0f",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4624a9f486664149b24f86578796f06d",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "21e4e171b7c84b5fa7a89e6cb7eff2f5",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "338729ba16bd4aa89f9c48fd6b9584ea",
      "Inputs": [
        {
          "Id": "0bd233a6852f436d898688801594f8fa",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b897b33458654eaf87fb6c0161f5d690",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "d0bd21f36b81427aa92234c580753099",
      "Inputs": [
        {
          "Id": "c935bc9676ac468b87aff697454d4452",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cfbd82681ec44fb0b9e6232978a9dd8a",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6e135f4bdf21464a885675cd9dc1ff5b",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d264348bdc804d83bc4670f89e449aa6",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "10;",
      "Id": "9d987a1991b34079b951c7112f37a5dc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9f96e54b1187441cb95f4f91a0755b32",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "<@var[]..[],var[]..[]",
      "Id": "68fd60c16279423cb25bb96a16ab5e21",
      "Inputs": [
        {
          "Id": "6d406d40753245b190958132727082ac",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1b943eb4f33f4d6ab4741b79d41380e7",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f12d7fe1d80448c094f2e00cb355627f",
          "Name": "bool",
          "Description": "Result of check",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Compares if x is lower to y\n\n< (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "163ca73c140648c583bec406df457aa7",
      "Inputs": [
        {
          "Id": "527745a93e3a40a2a5c19ca16a8c2e82",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4bcfe8030ab04cf296832926f5879b49",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "298ada2a28014907b2b939f6cd0819be",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list from the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "fbc586647c3643a6a4ea80267e6835e8",
      "Inputs": [
        {
          "Id": "a9efb67206f141989ed381c570db0ef5",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "69046fd42e6c420db77bf514329aae9c",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "223dcf37429c4a5da796243a057845e9",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"0\";",
      "Id": "013475db2f9e4d72ac0934c59ce1a899",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fe5fa4d1f2404fa5a890dc05cde93ab2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "one+two+three+four;",
      "Id": "dbb0137e9a4649ab9f7f75518e7ee0ad",
      "Inputs": [
        {
          "Id": "b1f6d9ea6cea4f78a510f9bab1424f26",
          "Name": "one",
          "Description": "one",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "667882f761ac4cf58d4164f5c442d89b",
          "Name": "two",
          "Description": "two",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "724179ceb65e4f39b2f2e904ba8ae950",
          "Name": "three",
          "Description": "three",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8a40ce2c274c4624834fc69afe9c2fe8",
          "Name": "four",
          "Description": "four",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fa570d170aa34a5dbcb29214df8c5a05",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "e03d6565155c432fb75cc3ec6a0389e3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c0194625bc014baba092210f4754b917",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "first..second..~spc;",
      "Id": "a7ae63e4c2d24afb97ba8e43e5067a20",
      "Inputs": [
        {
          "Id": "6c3dbf19e7a44b69a763fab72fbe6620",
          "Name": "first",
          "Description": "first",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6930b4f174be469bb96435baa0b7986a",
          "Name": "second",
          "Description": "second",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c77fd210eca54ed0ae9f8f8689e8af61",
          "Name": "spc",
          "Description": "spc",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "444fdeaf2f004f64a5a5e1eed1e37c22",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "try:\r\n    if isinstance(IN[0], list):t = IN[0][0]\r\n    else: t = IN[0]\r\n    if isinstance(t, list):t = t[0]\r\n    else: t = t  \r\n    if isinstance(t, list):t = t[0]\r\n    else: t = t    \r\nexcept: t =[]\r\nOUT = t\r\n\r\n\r\n\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "dce8a7e32b3146a5b32b3a350960a5e7",
      "Inputs": [
        {
          "Id": "9da76f79fc4d4f0fb5937453eba5dead",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "638ed65993394e58840933882ee8717e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "try:\r\n    if isinstance(IN[0], list):t = IN[0][0]\r\n    else: t = IN[0]\r\n    if isinstance(t, list):t = t[0]\r\n    else: t = t  \r\n    if isinstance(t, list):t = t[0]\r\n    else: t = t    \r\nexcept: t =[]\r\nOUT = t\r\n\r\n\r\n\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "3b58293bdcc44efaa3751bf8971b8fbb",
      "Inputs": [
        {
          "Id": "b87008ff5c5a4eaf8fb4def9a1c40e47",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0233232574734ce29339f9ae3050ebf8",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "748418b26f544832b552a580d1a041f7",
      "Inputs": [
        {
          "Id": "f199748c8016465ab1ac7c010bc68487",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "630cb0f7af2842f0ab924c6c99e73263",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "95e5d445b5dc4ac9bf2a882088f6630a",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "MaxHeight_optional: int = 0;",
      "Id": "6ee95d2ba4724875816d62e2fbbc0ee8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f9c6e8094457491b9d67bfb7a4ca9906",
          "Name": "",
          "Description": "MaxHeight_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Width_optional: int = 400;",
      "Id": "98d8255f16f44d8b8f49cc5e06092556",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "84ca8f36154440e39e34bacbe5831699",
          "Name": "",
          "Description": "Width_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "LabelWidth_optional: int = 140;",
      "Id": "efad6f71678d4b5bb52b16686afd08c5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b633246d62ae429e8b7ee85bb67b7a70",
          "Name": "",
          "Description": "LabelWidth_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) Data Shapes,\t 2020\r\n#Data-Shapes www.data-shapes.io , elayoubi.mostafa@data-shapes.io @data_shapes\r\n\t\r\nimport clr\r\nimport sys\r\npyt_path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib'\r\nsys.path.append(pyt_path)\r\nimport os\r\nimport webbrowser\r\nimport unicodedata\r\nimport io\r\nimport tempfile\r\nimport System\r\n\t\r\ntry:\r\n\tclr.AddReference('System.Windows.Forms')\r\n\tclr.AddReference('System.Drawing')\r\n\tclr.AddReference('System.Windows.Forms.DataVisualization')\r\n\tclr.AddReference(\"PresentationCore\")\r\n\tclr.AddReference(\"WindowsBase\")\r\n\tfrom System.Windows.Input import  Key, Keyboard\r\n\t\r\n\tfrom System.Drawing import Point , Size , Graphics, Bitmap, Image, Font, FontStyle, Icon, Color, Region , Rectangle , ContentAlignment , SystemFonts, FontFamily\r\n\tfrom System.Windows.Forms import Application, DockStyle,MouseButtons , Button, Form, Label, TrackBar , ToolTip, ColumnHeader, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition, ListView, ListViewItem , SortOrder, Panel, ImageLayout, GroupBox, RadioButton, BorderStyle, PictureBox, PictureBoxSizeMode, LinkLabel, CheckState, ColumnHeaderStyle , ImageList, VScrollBar, DataGridView, DataGridViewSelectionMode, DataGridViewAutoSizeColumnsMode , DataGridViewClipboardCopyMode , TreeView , TreeNode , TreeNodeCollection , AutoScaleMode , Screen, Padding, NativeWindow\r\n\tfrom System.Windows.Forms.DataVisualization.Charting import *#Chart , SeriesChartType\r\n\tfrom System.Collections.Generic import *\r\n\tfrom System.Collections.Generic import List as iList\r\n\tfrom System.Windows.Forms import View as vi\r\n\tclr.AddReference('System')\r\n\tfrom System import IntPtr , Char\r\n\tfrom System import Type as SType, IO\r\n\tfrom System import Array\r\n\tfrom System.ComponentModel import Container\r\n\tclr.AddReference('System.Data')\r\n\tfrom System.Data import DataTable , DataView\r\n\r\n\ttry: #try to import All Revit dependencies\r\n\t\tclr.AddReference('RevitAPIUI')\r\n\t\tfrom  Autodesk.Revit.UI import Selection , TaskDialog \r\n\t\tfrom  Autodesk.Revit.UI.Selection import ISelectionFilter\r\n\t\tclr.AddReference('RevitNodes')\r\n\t\timport Revit\r\n\t\tclr.ImportExtensions(Revit.Elements)\r\n\t\tclr.ImportExtensions(Revit.GeometryConversion)\r\n\t\t\r\n\t\tclr.AddReference('RevitServices')\r\n\t\tfrom RevitServices.Persistence import DocumentManager\r\n\t\tdoc = DocumentManager.Instance.CurrentDBDocument\r\n\t\tuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\t\r\n\t\tclr.AddReference('RevitAPI')\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageImportOptions\t\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageTypeOptions , ImageType, ImagePlacementOptions , ImageInstance\r\n\t\tfrom Autodesk.Revit.DB import FilteredElementCollector , Transaction, View , ViewType , ViewFamily, ViewDrafting, ViewFamilyType, Element, ElementId , FamilyInstance , Document , XYZ, BoxPlacement, UnitUtils\r\n\t\t\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import  UnitType\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import SpecTypeId\r\n\r\n\t\tdbviews = [v for v in FilteredElementCollector(doc).OfClass(View).ToElements() if (v.ViewType == ViewType.FloorPlan or v.ViewType == ViewType.CeilingPlan or v.ViewType == ViewType.Section or v.ViewType == ViewType.Elevation or v.ViewType == ViewType.ThreeD)]\r\n\t\tviewindex = 0\r\n\t\ttry:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n\t\texcept:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()\r\n\t\t\t\r\n\t\tclass selectionfilter(ISelectionFilter):\r\n\t\t\tdef __init__(self,category):\r\n\t\t\t\tself.category = category\r\n\t\t\tdef AllowElement(self,element):\r\n\t\t\t\tif element.Category.Name in [c.Name for c in self.category]:\r\n\t\t\t\t\treturn True\r\n\t\t\t\telse:\r\n\t\t\t\t\treturn False\r\n\t\t\tdef AllowReference(reference,point):\r\n\t\t\t\treturn False\r\n\r\n\r\n\t\t\t\r\n\texcept: #in case we are in the Sandbox, Formit or Civil 3D environment\r\n\t\tpass\r\n\t\r\n\timportcolorselection = 0\r\n\t\r\n\ttry:\r\n\t\tfrom  Autodesk.Revit.UI import ColorSelectionDialog\r\n\texcept:\r\n\t\timportcolorselection = 1\r\n\r\n\ttry:\r\n\t\tfrom  Autodesk.Revit.DB import ImageTypeSource \r\n\texcept:\r\n\t\tpass\r\n\t\r\n\r\n\t\r\n\tclr.AddReference('ProtoGeometry')\r\n\tfrom Autodesk.DesignScript.Geometry import Point as dsPoint\r\n\r\n\tfrom System.Reflection import Assembly\r\n\timport xml.etree.ElementTree as et\r\n\t\r\n\r\n\t\r\n\timport re\t\r\n\tdef regexEndNum(input):\r\n\t\ttry:\r\n\t\t\treturn\tre.search('(\\d+)$', input).group(0)\r\n\t\texcept:\r\n\t\t\treturn \"\"\r\n\r\n\tdef iterateThroughNodes(collection,li):\r\n\t\tif hasattr(collection,'Nodes'):\r\n\t\t\tntest = collection.Nodes\r\n\t\t\tif len(ntest) > 0:\r\n\t\t\t\tfor i in ntest:\r\n\t\t\t\t\titerateThroughNodes(i,li)\r\n\t\t\telse:\r\n\t\t\t\tif collection.Checked:\r\n\t\t\t\t\tli.append(collection.Tag)\r\n\t\treturn li\r\n\r\n\tclass CustomMessageLoop(NativeWindow):\r\n\t    def __init__(self, form):\r\n\t        self.form = form\r\n\t        self.AssignHandle(form.Handle)\r\n\t        self.run_loop()\r\n\t\r\n\t    def run_loop(self):\r\n\t        while self.form.Visible:\r\n\t            Application.DoEvents()\r\n\r\n\t\r\n\tclass MultiTextBoxForm(Form):\r\n\t\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Text = 'Data-Shapes | Multi Input UI ++'\r\n\t\t\tself.output = []\r\n\t\t\tself.values = []\r\n\t\t\tself.cancelled = True\r\n\t\t\tself.lastMouseLocation = 0\r\n\t\t\tself.startNode = None\r\n\t\r\n\t\tdef setclose(self, sender, event):\r\n\t\t\tcbindexread = 0\r\n\t\t\tif sender.Name != \"Cancel\":\r\n\t\t\t\tself.cancelled = False\r\n\t\t\t\tfor f in self.output:\t\t\t\t\t\r\n\t\t\t\t\tif f.GetType() == myTextBox:\r\n\t\t\t\t\t\tif f._isNum :\r\n\t\t\t\t\t\t\tval = float(f.Text)\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tval = f.Text\r\n\t\t\t\t\t\tself.values.append(val)\r\n\t\t\t\t\tif f.GetType() == CheckBox:\r\n\t\t\t\t\t\tself.values.append(f.Checked)\r\n\t\t\t\t\tif f.GetType() == Button:\r\n\t\t\t\t\t\tif isinstance(f.Tag ,list):\r\n\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\tself.values.append([e for e in f.Tag if e.__class__.__name__ != \"Category\"])\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\tself.values.append(f.Tag)\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\ttry:\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif f.Tag.__class__.__name__ != \"Category\":\r\n\t\t\t\t\t\t\t\t\tself.values.append(f.Tag)\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tself.values.append([])\r\n\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\tself.values.append(f.Tag)\t\r\n\t\t\t\t\tif f.GetType() == ComboBox:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tkey = f.Text\r\n\t\t\t\t\t\t\tself.values.append(f.Tag[key])\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tself.values.append(None)\r\n\t\t\t\t\tif f.GetType() == mylistview:\r\n\t\t\t\t\t\tself.values.append([f.Values[i.Text] for i in f.CheckedItems])\r\n\t\t\t\t\tif f.GetType() == mytrackbar:\r\n\t\t\t\t\t\tself.values.append(f.startval+f.Value*f.step)\r\n\t\t\t\t\tif f.GetType() == mygroupbox:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tkey = [j.Text for j in f.Controls if j.Checked == True][0]\r\n\t\t\t\t\t\t\tself.values.append(f.Tag[key])\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tself.values.append(None)\r\n\t\t\t\t\tif f.GetType() == myDataGridView:\r\n\t\t\t\t\t\tf.EndEdit()\r\n\t\t\t\t\t\tdsrc = f.DataSource\r\n\t\t\t\t\t\tout = []\r\n\t\t\t\t\t\tcolcount = f.ColumnCount\r\n\t\t\t\t\t\trowcount = f.RowCount - 1\r\n\t\t\t\t\t\tif f.Tag:\r\n\t\t\t\t\t\t\tl = []\r\n\t\t\t\t\t\t\tfor i in range(colcount):\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tl.append(dsrc.Columns[i].ColumnName)\r\n\t\t\t\t\t\t\tout.append(l)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor r in range(rowcount):\r\n\t\t\t\t\t\t\t\tl = []\r\n\t\t\t\t\t\t\t\tfor i in range(colcount):\r\n\t\t\t\t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t\t\t\t\t\t\tout.append(l)\r\n\t\t\t\t\t\telse: \r\n\t\t\t\t\t\t\tfor r in range(rowcount):\r\n\t\t\t\t\t\t\t\tl = []\r\n\t\t\t\t\t\t\t\tfor i in range(colcount):\r\n\t\t\t\t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t\t\t\t\t\t\tout.append(l)\r\n\t\t\t\t\t\tself.values.append(out)\r\n\t\t\t\t\tif f.GetType() == TreeView:\r\n\t\t\t\t\t\tls = []\r\n\t\t\t\t\t\tnds = f.Nodes[0]\r\n\t\t\t\t\t\titerateThroughNodes(nds,ls)\r\n\t\t\t\t\t\tself.values.append(ls)\r\n\t\t\t\t\tif f.GetType() == GroupBox:\r\n\t\t\t\t\t\trb = [c for c in f.Controls if c.GetType() == RadioButton and c.Checked][0]\r\n\t\t\t\t\t\tself.values.append(rb.Text)\r\n\t\t\t\t\t\tf.Controls.Remove(rb)\r\n\t\t\telse:\r\n\t\t\t\tself.values = None\r\n\t\t\t\tself.cancelled = True\r\n\t\t\ttry:\r\n\t\t\t\tself.Close()\r\n\t\t\texcept:\r\n\t\t\t\tConsole.WriteLine(\"error\")\r\n\t\r\n\t\tdef reset(self, sender, event):\r\n\t\t\tpass\r\n\t\r\n\t\tdef openfile(self, sender, event):\r\n\t\t\tofd = OpenFileDialog()\r\n\t\t\tdr = ofd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = ofd.FileName\r\n\t\t\t\tsender.Tag = ofd.FileName\r\n\r\n\t\tdef exportToExcel(self, sender, event):\r\n\t\t\t#importing Excel IronPython libraries\r\n\t\t\tclr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')\r\n\t\t\tfrom Microsoft.Office.Interop import Excel\r\n\t\t\tex = Excel.ApplicationClass()\r\n\t\t\tex.Visible = sender.Tag[1]\r\n\t\t\tex.DisplayAlerts = False\r\n\t\t\tfbd = FolderBrowserDialog()\r\n\t\t\tfbd.SelectedPath = sender.Text\r\n\t\t\tparent = sender.Parent\r\n\t\t\tfptextbox = parent.GetChildAtPoint(Point(parent.Location.X,sender.Location.Y+5*yRatio))\r\n\t\t\tdataGrid = parent.GetChildAtPoint(Point(parent.Location.X,parent.Location.Y+23*xRatio))\r\n\t\t\tdataTable = dataGrid.DataSource\r\n\t\t\tfptext = fptextbox.Text\r\n\t\t\ttitletext = parent.GetChildAtPoint(Point(0,0)).Text\r\n\t\t\tdr = fbd.ShowDialog()\r\n\t\t\tfrstRwTtle = sender.Tag[0]\r\n\t\t\tif frstRwTtle:\r\n\t\t\t\t_header = Excel.XlYesNoGuess.xlYes\r\n\t\t\telse:\r\n\t\t\t\t_header = Excel.XlYesNoGuess.xlNo\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tworkbk = ex.Workbooks.Add()\r\n\t\t\t\tworksheet = workbk.Worksheets.Add()\r\n\t\t\t\t#Writing title and doc info\r\n\t\t\t\tif sender.Tag[2]:\r\n\t\t\t\t\ttitleCell = worksheet.Cells[1,1]\r\n\t\t\t\t\tworksheet.Cells[2,1].Value2 = sender.Tag[3]\r\n\t\t\t\t\ttitleCell.Value2 = titletext\r\n\t\t\t\t\ttitleCell.Font.Size = 18\r\n\t\t\t\t\ttitleCell.Font.Bold = True\r\n\t\t\t\t\tstartR = 3\r\n\t\t\t\t\tendR = 3\r\n\t\t\t\telse:\r\n\t\t\t\t\tstartR = 1\r\n\t\t\t\t\tendR = 0\t\r\n\t\t\t\tif frstRwTtle:\r\n\t\t\t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t\t\t\tworksheet.Cells[startR,j+1] = dataTable.Columns[j].ColumnName\t\t\t\t\r\n\t\t\t\t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t\t\t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t\t\t\t\tworksheet.Cells[i+startR+1,j+1] = dataTable.DefaultView[i].Row[j].ToString()\r\n\t\t\t\t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR+1,dataTable.Columns.Count])\t\t\t\t\t\t\t\r\n\t\t\t\telse :\r\n\t\t\t\t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t\t\t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t\t\t\t\tworksheet.Cells[i+startR,j+1] = dataTable.DefaultView[i].Row[j].ToString()\t\t\t\t\r\n\t\t\t\t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR,dataTable.Columns.Count])\r\n\t\t\t\txlrange.Columns.AutoFit()\r\n\t\t\t\tworksheet.ListObjects.Add(Excel.XlListObjectSourceType.xlSrcRange, xlrange, SType.Missing, _header, SType.Missing).Name = \"DataShapesTable\"\r\n\t\t\t\tworksheet.ListObjects[\"DataShapesTable\"].TableStyle =  \"TableStyleMedium16\"\r\n\t\t\t\tworkbk.SaveAs(fbd.SelectedPath + \"\\\\\" + fptext)\r\n\t\t\t\tif not sender.Tag[1]:\r\n\t\t\t\t\tworkbk.Close()\r\n\t\t\t\t\tex.Quit()\r\n\r\n\t\tdef startCell(self, sender, event ):\r\n\t\t\tsender.startcell[\"X\"] = event.ColumnIndex\r\n\t\t\tsender.startcell[\"Y\"] = event.RowIndex\t\r\n\r\n\t\tdef endCell(self, sender, event ):\r\n\t\t\ttry:\r\n\t\t\t\tsender.endcell[\"X\"] = event.ColumnIndex\r\n\t\t\t\tsender.endcell[\"Y\"] = event.RowIndex \r\n\t\t\t\tstartval = sender.Rows[sender.startcell[\"Y\"]].Cells[sender.startcell[\"X\"]].Value\r\n\t\t\t\tendNum = regexEndNum(startval)\r\n\t\t\t\tif endNum != \"\":\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\telse:\t\t\t\t\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\t\t\t\t\r\n\t\tdef startRowDrag(self, sender, event ):\r\n\t\t\tshmak\r\n\t\t\t\r\n\t\tdef opendirectory(self, sender, event):\r\n\t\t\tfbd = FolderBrowserDialog()\r\n\t\t\tfbd.SelectedPath = sender.Text\r\n\t\t\tdr = fbd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = fbd.SelectedPath\r\n\t\t\t\tsender.Tag = fbd.SelectedPath\r\n\t\r\n\t\tdef pickobjects(self, sender, event):\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t#THIS METHOD IS FOR CIVIL 3D EVIRONMENT\r\n\t\tdef pickautocadobjects(self, sender, event):   \r\n\t\t\tselelem = []\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\t\r\n\t\t\t\tacadDoc.SendCommand(\"(and(princ\\042\"+ sender.Text + \"\\042)(setq ss(ssget))(setvar\\042users5\\042\\042LinkDWGUIOK\\042)(command\\042_.Select\\042ss\\042\\042)) \")\r\n\t\t\t\tselection_ = acadDoc.ActiveSelectionSet\r\n\t\t\t\tacadDoc.SendCommand(\"(setq ss nil) \")\r\n\t\t\t\tif acadDoc.GetVariable(\"users5\") == \"LinkDWGUIOK\" and selection_ != None:\r\n\t\t\t\t\tfor sel in selection_:\t\t\t\t\r\n\t\t\t\t\t\tselelem.append(sel)\t\t\r\n\t\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tsender.Tag = list(selelem)\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t\tdef pickautocadobject(self, sender, event):\t  \r\n\t\t\tselelem = None\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadPickBox = acadDoc.GetVariable(\"pickbox\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", 5)\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadDoc.SendCommand(\"(setq obj(car(entsel\\042\" + sender.Text + \"\\042))) \")\r\n\t\t\t\tacadDoc.SendCommand(\"(and obj(setvar\\042users5\\042(cdr(assoc 5(entget obj))))(setq obj nil)) \")\t\t\r\n\t\t\t\tselection_ = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", acadPickBox)\r\n\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tselelem = acadDoc.HandleToObject(selection_)\r\n\t\t\t\tsender.Tag = selelem\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t\tdef pickobjectsordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Pick elements in order, then hit ESC to exit.')\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element, 'Pick elements in order').ElementId)\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = output\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\r\n\t\tdef pickobjectsofcatordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tif isinstance(sender.Tag,list):\t\t\t\r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Select %s in order, then press ESC to exit.' %(', '.join([c.Name for c in category])))\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt, 'Select %s' %(', '.join([c.Name for c in category]))).ElementId)\t\t\t\t\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = (output)\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t\tdef picklinkedobjects(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked elements and press Finish.')\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.LinkedElement,'Select the linked elements and press Finish.')\r\n\t\t\t\tselelem = [link.GetElement(s.LinkedElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\t\r\n\r\n\t\tdef pickobject(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t\tdef picklinkedobject(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked element.')\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.LinkedElement,'Select the linked element.')\r\n\t\t\t\tselelem = link.GetElement(sel.LinkedElementId)\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\t\t\t\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t\tdef pickobjectsofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t\t\r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t\tdef pickobjectofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t\t\r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t\tdef treeNodeMouseDown(self, sender, event):\r\n\t\t\tif Keyboard.IsKeyDown(Key.LeftShift) and event.Button == MouseButtons.Left:\r\n\t\t\t\ttv = sender\r\n\t\t\t\tendNode = tv.GetNodeAt(0, event.Y)\r\n\t\t\t\t#If both nodes exist and are in the same parent node\r\n\t\t\t\tif self.startNode != None and endNode != None and self.startNode.Parent == endNode.Parent:\r\n\t\t\t\t\tstartIndex = self.startNode.Index\r\n\t\t\t\t\tendIndex = endNode.Index\r\n\t\t\t\t\t#Swap the indexes if the starting index is greater than the ending index\r\n\t\t\t\t\tif startIndex > endIndex:\r\n\t\t\t\t\t\ttemp = startIndex\r\n\t\t\t\t\t\tstartIndex = endIndex\r\n\t\t\t\t\t\tendIndex = temp\r\n\t\t\t\t\tfor i in range(startIndex,endIndex+1):\t\t\t\t\t  \r\n\t\t\t\t\t\tself.startNode.Parent.Nodes[i].Checked = not self.startNode.Parent.Nodes[i].Checked\r\n\t\t\t\t\tself.lastMouseLocation = event.Y\r\n\t\t\telse:\r\n\t\t\t\ttv = sender\r\n\t\t\t\tself.startNode = tv.GetNodeAt(0, event.Y)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\tdef pickfaces(self, sender, event):\r\n\t\t\tfaces = []\t\t\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tselface = uidoc.Selection.PickObjects(Selection.ObjectType.Face,'')\r\n\t\t\t\tfor s in selface:\r\n\t\t\t\t\telemid = s.ElementId\r\n\t\t\t\t\telem = doc.GetElement(elemid)\r\n\t\t\t\t\tif isinstance(elem,FamilyInstance):\r\n\t\t\t\t\t\ttransf = elem.GetTransform().ToCoordinateSystem()\r\n\t\t\t\t\t\tgeom = elem.GetGeometryObjectFromReference(s)\r\n\t\t\t\t\t\tconvertedGeom = geom.Convert(s, transf)\t\t\t\t\t\r\n\t\t\t\t\t\tfaces.append(convertedGeom)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tf = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).ToProtoType(True)\r\n\t\t\t\t\t\t[i.Tags.AddTag(\"RevitFaceReference\", s) for i in f]\r\n\t\t\t\t\t\tfaces.append(f)\r\n\t\t\t\tsender.Tag = [i for j in faces for i in j]\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t\tdef pickpointsonface(self, sender, event):\r\n\t\t\tfaces = []\t\t\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tselpoints = uidoc.Selection.PickObjects(Selection.ObjectType.PointOnElement,'')\r\n\t\t\tpoints = []\r\n\t\t\tfor s in selpoints:\r\n\t\t\t\tpt = s.GlobalPoint\r\n\t\t\t\tpoints.append(dsPoint.ByCoordinates(UnitUtils.ConvertFromInternalUnits(pt.X,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Y,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Z,UIunit)))\r\n\t\t\tsender.Tag = points\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t\tdef pickedges(self, sender, event):\r\n\t\t\tedges = []\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\t\r\n\t\t\ttry:\t\t\t\t\r\n\t\t\t\tseledge = uidoc.Selection.PickObjects(Selection.ObjectType.Edge,'')\r\n\t\t\t\tfor s in seledge:\r\n\t\t\t\t\telemid = s.ElementId\r\n\t\t\t\t\telem = doc.GetElement(elemid)\r\n\t\t\t\t\tif isinstance(elem,FamilyInstance):\r\n\t\t\t\t\t\ttransf = elem.GetTransform().ToCoordinateSystem()\r\n\t\t\t\t\t\tgeom = elem.GetGeometryObjectFromReference(s)\r\n\t\t\t\t\t\tconvertedGeom = geom.Convert(s, transf)\r\n\t\t\t\t\t\tconvertedGeom.Tags.AddTag(\"RevitFaceReference\", s)\r\n\t\t\t\t\t\tedges.append(convertedGeom)\t\t\t\t\t\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\te = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).AsCurve().ToProtoType(True)\r\n\t\t\t\t\t\te.Tags.AddTag(\"RevitFaceReference\", s)\r\n\t\t\t\t\t\tedges.append(e)\r\n\t\t\t\tsender.Tag = edges\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t\tdef colorpicker(self, sender, event):\r\n\t\t\tdialog = ColorSelectionDialog()\r\n\t\t\tselection = ColorSelectionDialog.Show(dialog)\r\n\t\t\tselected = dialog.SelectedColor\r\n\t\t\tsender.Tag = selected\r\n\t\t\tsender.BackColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\t\tsender.ForeColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\r\n\t\tdef topmost(self):\r\n\t\t\tself.TopMost = True\r\n\t\r\n\t\tdef lvadd(self, sender, event):\r\n\t\t\tsender.Tag = [i for i in sender.CheckedItems]\r\n\t\t\t\r\n\t\tdef scroll(self, sender, event):\r\n\t\t\tparent = sender.Parent\r\n\t\t\tchild = parent.GetChildAtPoint(Point(0,5*yRatio))\r\n\t\t\tchild.Text = str(sender.startval+sender.Value*sender.step)\r\n\r\n\t\tdef openurl(self, sender, event):\r\n\t\t\twebbrowser.open(sender.Tag)\r\n\t\r\n\t\tdef selectall(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = True\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t\tdef selectnone(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = False\r\n\t\t\telse:\r\n\t\t\t\tpass\t\t\r\n\r\n\t\tdef updateallnone(self, sender, event):\r\n\t\t\ttry:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\trball = parent.GetChildAtPoint(Point(0,sender.Height + 5*yRatio))\r\n\t\t\t\trbnone = parent.GetChildAtPoint(Point(80 * xRatio,sender.Height + 5*yRatio))\r\n\t\t\t\tif sender.CheckedItems.Count == 0 and event.NewValue == CheckState.Unchecked:\r\n\t\t\t\t\trbnone.Checked = False\r\n\t\t\t\t\trball.Checked = False\r\n\t\t\t\telif sender.CheckedItems.Count == sender.Items.Count and event.NewValue == CheckState.Unchecked:\r\n\t\t\t\t\trball.Checked = False\r\n\t\t\t\t\trbnone.Checked = False\r\n\t\t\t\telif sender.CheckedItems.Count == sender.Items.Count-1 and event.NewValue == CheckState.Checked:\r\n\t\t\t\t\trball.Checked = True\r\n\t\t\t\t\trbnone.Checked = False\r\n\t\t\t\telif sender.CheckedItems.Count == 1 and event.NewValue == CheckState.Unchecked:\r\n\t\t\t\t\trball.Checked = False\r\n\t\t\t\t\trbnone.Checked = True\t\t\t\r\n\t\t\t\telse :\r\n\t\t\t\t\trball.Checked = False\r\n\t\t\t\t\trbnone.Checked = False\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\r\n\t\tdef zoomcenter(self, sender, event ):\r\n\t\t\tif event.X > 15:\t\t\r\n\t\t\t\ttry:\r\n\t\t\t\t\telement = doc.GetElement(uidoc.Selection.GetElementIds()[0])\r\n\t\t\t\t\tuidoc.ShowElements(element)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t\t\t\r\n\t\tdef setviewforelement(self, sender, event ):\t\r\n\t\t\tif event.X > 15*xRatio:\t\t\t\t\r\n\t\t\t\ttry:\r\n\t\t\t\t\titem = sender.GetItemAt(event.X,event.Y).Text\r\n\t\t\t\t\telement = UnwrapElement(sender.Values[item])\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(element.__class__).ToElements()])]\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(FamilyInstance).ToElements()])]\r\n\t\t\t\t\tglobal viewindex\r\n\t\t\t\t\tdbView = viewsforelement[viewindex]\r\n\t\t\t\t\tid = [element.Id]\r\n\t\t\t\t\ticollection = iList[ElementId](id)\r\n\t\t\t\t\tuidoc.Selection.SetElementIds(icollection)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\t\t\r\n\t\t\t\tpass\r\n\r\n\r\n\t\tdef CheckChildren(self, sender, event ):\r\n\t\t\tevNode = event.Node\t\t\r\n\t\t\tcheckState = evNode.Checked \r\n\t\t\tfor n in event.Node.Nodes:\t\t\r\n\t\t\t\tn.Checked = checkState\t\t\t\r\n\t\t\t\t\r\n\t\tdef ActivateOption(self, sender, event ):\r\n\t\t\tparent = sender.Parent\r\n\t\t\tassociatedControls = [p for p in parent.Controls if p.Name == sender.Text and p.GetType() == Panel][0]\r\n\t\t\trestofcontrols = [p for p in parent.Controls if p.Name != sender.Text and p.GetType() == Panel]\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tassociatedControls.Enabled = True\r\n\t\t\t\tfor c in restofcontrols:\r\n\t\t\t\t\tc.Enabled = False\r\n\t\t\t\tparent.Tag = sender.Text\r\n\t\t\t\t\r\n\t\tdef showtooltip(self, sender, event ):\r\n\t\t\tttp = ToolTip()\r\n\t\t\tttp.AutoPopDelay = 10000\r\n\t\t\tttp.SetToolTip(sender , sender.Tag) \r\n\r\n\t\tdef numsOnly(self, sender, event ):\r\n\t\t\tif Char.IsDigit(event.KeyChar)==False and event.KeyChar != \".\" and Char.IsControl(event.KeyChar)==False:\r\n\t\t\t\tevent.Handled = True\r\n\t\t\r\n\t\tdef chart_showLabels(self, sender, event):\r\n\t\t\tcb = sender\r\n\t\t\tpanelcht = sender.Parent\r\n\t\t\tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t\t\tfor s in chart1.Series:\r\n\t\t\t\tif s.ChartType == SeriesChartType.Pie:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Disabled\"\r\n\t\t\t\telse:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = True\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = False\r\n\t\t\t\t\r\n\t\tdef imageexport(self, sender, event):\r\n\t\t\timport datetime\r\n\t\t\tfrom datetime import datetime\r\n\t\t\tfrom RevitServices.Transactions import TransactionManager\r\n\t\t\t#Modify resolution before the render\r\n\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\tpanelcht = sender.Parent\r\n\t\t\tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t\t\toriginalTitleFont = chart1.Titles[0].Font\r\n\t\t\toriginalWidth = chart1.Width\r\n\t\t\toriginalHeight = chart1.Height\r\n\t\t\tchart1.Visible = False\r\n\t\t\tchart1.Dock = DockStyle.None\r\n\t\t\tchart1.Width = 2100 * 0.8\r\n\t\t\tchart1.Height = 1500 * 0.8\r\n\t\t\tchart1.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t\t\tchart1.ChartAreas[0].AxisY.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t\t\tchart1.ChartAreas[0].AxisX.LabelStyle.Font = Font(fontFam, 30)\r\n\t\t\tchart1.ChartAreas[0].AxisY.LabelStyle.Font = Font(fontFam, 30)\r\n\t\t\tchart1.ChartAreas[0].AxisX.TitleFont = Font(fontFam, 30)\r\n\t\t\tchart1.ChartAreas[0].AxisY.TitleFont = Font(fontFam, 30)\r\n\t\t\tchart1.TextAntiAliasingQuality = TextAntiAliasingQuality.High\r\n\t\t\tchart1.BackColor = Color.White\r\n\t\t\tchart1.Titles[0].Font = Font(fontFam, 32, FontStyle.Bold)\r\n\t\t\tchart1.ChartAreas[0].BackColor = Color.White\r\n\t\t\tfor serie in chart1.Series:\r\n\t\t\t\tserie.Font = Font(fontFam, 30)\r\n\t\t\t\tfor p in serie.Points:\r\n\t\t\t\t\tp.Font = Font(fontFam, 30)\r\n\t\t\t\t\tp.MarkerSize = 15\r\n\t\t\tfor legend in chart1.Legends:\r\n\t\t\t\tlegend.Font = Font(fontFam, 30)\r\n\t\t\t\tlegend.BackColor = Color.White\r\n\t\t\tchart1.Invalidate()\r\n\t\t\tchart1.SaveImage(tempfile.gettempdir() + \"\\\\chartImage.bmp\", ChartImageFormat.Bmp)\r\n\t\t\t#Get back to original settings\r\n\t\t\tchart1.Width = originalWidth\r\n\t\t\tchart1.Height = originalHeight\r\n\t\t\tchart1.BackColor = Color.Transparent\r\n\t\t\tchart1.ChartAreas[0].BackColor = Color.Transparent\r\n\t\t\tchart1.ChartAreas[0].AxisX.LabelStyle.Font = originalFont\r\n\t\t\tchart1.ChartAreas[0].AxisY.LabelStyle.Font = originalFont\r\n\t\t\tchart1.ChartAreas[0].AxisX.TitleFont = originalFont\r\n\t\t\tchart1.ChartAreas[0].AxisY.TitleFont = originalFont\r\n\t\t\tchart1.Titles[0].Font = originalTitleFont\r\n\t\t\tfor serie in chart1.Series:\r\n\t\t\t\tserie.Font = originalFont\r\n\t\t\t\tfor p in serie.Points:\r\n\t\t\t\t\tp.Font = originalFont\r\n\t\t\t\t\tp.MarkerSize = 8\r\n\t\t\tfor legend in chart1.Legends:\r\n\t\t\t\tlegend.Font = originalFont\r\n\t\t\t\tlegend.BackColor = Color.Transparent\r\n\t\t\tchart1.Invalidate()\r\n\t\t\tchart1.Visible = True\r\n\t\t\t#Import the picture in a Drafting View\r\n\t\t\t#Import the picture in a Drafting View // The try catch if for handling the fact that ImageImportOptions was deprecated in 2020 and is obsolete in 2021\t\t\t\t\t  \r\n\t\t\tcollector = FilteredElementCollector(doc).OfClass(ViewFamilyType)\r\n\t\t\tviewFamilyTypes = []\r\n\t\t\tfor c in collector:\r\n\t\t\t\tif c.ViewFamily == ViewFamily.Drafting:\r\n\t\t\t\t\tviewFamilyTypes.append(c)\r\n\t\t\tviewFamilyType = viewFamilyTypes[0]\r\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t\t\tdraftView = ViewDrafting.Create(doc,viewFamilyType.Id)\r\n\t\t\tdraftView.Name = chart1.Titles[0].Text + datetime.now().strftime(\" (%m/%d/%Y, %H.%M.%S)\")\r\n\t\t\timagePath = tempfile.gettempdir() + \"\\\\chartImage.bmp\"\r\n\t\t\tnewElement = clr.StrongBox[Element]()\r\n\t\t\ttry:\r\n\t\t\t\timportOptions = ImageImportOptions()\t\r\n\t\t\t\timportOptions.Resolution = 72\r\n\t\t\t\timportOptions.Placement = BoxPlacement.TopLeft\t\t\t\t\r\n\t\t\t\tdoc.Import(imagePath,importOptions,draftView,newElement)\t\t\t\r\n\t\t\texcept:\r\n\t\t\t\ttry:\r\n\t\t\t\t\timageTypeOption = ImageTypeOptions()   \r\n\t\t\t\t\timageTypeOption.SetPath(imagePath)\t\t\t\t\t\t\t\t\r\n\t\t\t\texcept:\r\n\t\t\t\t\timageTypeOption = ImageTypeOptions(imagePath,False,ImageTypeSource.Import)\r\n\t\t\t\timageTypeOption.Resolution = 72\t\t\t\t   \r\n\t\t\t\timageType = ImageType.Create(doc,imageTypeOption)\r\n\t\t\t\tplacementOptions = ImagePlacementOptions(XYZ(0,0,0),BoxPlacement.TopLeft)\r\n\t\t\t\tImageInstance.Create(doc,draftView,imageType.Id,placementOptions)\t\t\t\t\r\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\t\t\t\t\t \r\n\t\tdef chart_showLegend(self, sender, event ):\r\n\t\t\tcb = sender\r\n\t\t\tpanelcht = sender.Parent\r\n\t\t\tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t\t\tif len(chart1.Legends) <= 1:\r\n\t\t\t\tfor legend in chart1.Legends:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\tlegend.Enabled = True\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tlegend.Enabled = False\r\n\t\t\telse:\r\n\t\t\t\tif cb.Checked:\r\n\t\t\t\t\tchart1.Legends[1].Enabled = True\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Legends[1].Enabled = False\r\n\t\t\t\t\t\r\n\r\n\tclass mylistview(ListView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\r\n\tclass mytrackbar(TrackBar):\r\n\t\r\n\t\tdef __init__(self,startval,step):\r\n\t\t\tself.startval = startval\r\n\t\t\tself.step = step\r\n\r\n\tclass myDataGridView(DataGridView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.startcell = {}\r\n\t\t\tself.endcell = {}\r\n\t\t\t\r\n\tclass mygroupbox(GroupBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\t\t\t\r\n\tclass myTextBox(TextBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself._isNum = False\r\n\t\r\n\t\t\t\r\n\t#Form initialization\r\n\t\r\n\tform = MultiTextBoxForm()\r\n\txRatio = Screen.PrimaryScreen.Bounds.Width/1920\r\n\tif xRatio == 0:\r\n\t\txRatio = 1\r\n\tyRatio = Screen.PrimaryScreen.Bounds.Height/1080\r\n\tif yRatio == 0:\r\n\t\tyRatio = 1\r\n\tform.topmost()\t\r\n\tform.ControlBox = True\r\n\txlabel = 25 * xRatio\r\n\txinput = 150 * xRatio\r\n\tformy = 10 * yRatio\r\n\tif IN[8] * xRatio > (350 * xRatio): formwidth = IN[8] * xRatio\r\n\telse: formwidth = 350 * xRatio\r\n\tfields = []\r\n\terror = 0\r\n\t\r\n\t#Description \r\n\t\r\n\tif IN[3] != \"\":\r\n\t\tdes = Label()\r\n\t\tdes.Location = Point(xlabel,formy)\r\n\t\tdes.Font = Font(\"Arial\", 15,FontStyle.Bold)\t\t\r\n\t\tdes.AutoSize = True\r\n\t\tdes.MaximumSize = Size(formwidth - (2 * xlabel)*xRatio,0)\r\n\t\tdes.Text = IN[3]\r\n\t\tform.Controls.Add(des)\r\n\t\tformy = des.Bottom + (15*xRatio)\r\n\tformheaderheight = formy\r\n\t\r\n\t#Input form\r\n\t\r\n\t# Create a container panel for all inputs\r\n\tbody = Panel()\r\n\tbody.Location = Point(0,formy)\r\n\tbody.Width = formwidth - 15*xRatio\r\n\t\r\n\t\r\n\t# Process form inputs\r\n\tif isinstance(IN[0],list):\r\n\t\tinputtypes = IN[0]\r\n\telse:\r\n\t\tinputtypes = [IN[0]]\r\n\t# This definition is to handle the sorting of special characters\r\n\tdef remove_accents(input_str):\r\n\t\tnfkd_form = unicodedata.normalize('NFKD', input_str)\r\n\t\tonly_ascii = nfkd_form.encode('ASCII', 'ignore')\r\n\t\treturn only_ascii\t\r\n\r\n\t#Adding Logo \r\n\t#default logo in case no input\t\r\n\tdef getImageByName(ImName):\r\n\t\tdynamo = Assembly.Load('DynamoCore')\r\n\t\tversion = str(dynamo.GetName().Version)[:3]\t\t\r\n\t\tdynPath = os.getenv('APPDATA')+\"\\\\Dynamo\\Dynamo Revit\\\\\" + version \r\n\t\troot = et.parse(dynPath + \"\\DynamoSettings.xml\").getroot()\r\n\t\tlogopaths = []\r\n\t\tfor child in root:\r\n\t\t\tif child.tag == \"CustomPackageFolders\":\r\n\t\t\t\tfor path in child:\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\packages\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\tdeflogopath = \"\"\r\n\t\tfor path in logopaths:\r\n\t\t\tif deflogopath == \"\":\r\n\t\t\t\tif os.path.isfile(path):\r\n\t\t\t\t\tdeflogopath = path\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tima = Image.FromFile(deflogopath)\r\n\t\t\t\t\t\tbmp = Bitmap.FromFile(deflogopath)\r\n\t\t\t\t\t\treturn ima,bmp\r\n\t\t\t\t\texcept: \r\n\t\t\t\t\t\tpass\r\n\t\t\t\t\t\t\r\n\ttry:\r\n\t\tif IN[4] != '':\r\n\t\t\ttry:\r\n\t\t\t\tima = Image.FromFile(IN[4])\r\n\t\t\t\tbmp = Bitmap.FromFile(IN[4])\r\n\t\t\texcept:\r\n\t\t\t\tima = IN[4]\r\n\t\t\t\tbmp = IN[4]\r\n\r\n\t\telse :\r\n\t\t\t_ims = getImageByName(\"a.png\")\r\n\t\t\tima = _ims[0]\r\n\t\t\tbmp = _ims[1]\r\n\t\t\t\r\n\t\tlogo = Panel()\r\n\t\tif IN[6] == None:\r\n\t\t\txlogo = 20 * xRatio\r\n\t\t\tylogo = formy+ 10*yRatio\r\n\t\telse:\r\n\t\t\txlogo = 30 * xRatio\r\n\t\t\tylogo = formy\r\n\t\tsize = 110 * xRatio\r\n\t\tlogo = PictureBox()\r\n\t\tratio = (ima.Height)/(ima.Width)\r\n\t\th = float(ima.Height)\r\n\t\tw = float(ima.Width)\r\n\t\tratio = h/w\r\n\t\tlogo.Size = Size(size,size*ratio)\r\n\t\tscaledimage = Bitmap(size,size*ratio)\r\n\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\tgr.DrawImage(ima,0,0,size,size*ratio)\r\n\t\tlogo.Image = ima\r\n\t\tlogo.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\tform.Controls.Add(logo)\r\n\t\tlogo.Location = Point(xlogo,ylogo)\r\n\t\t\r\n\t\t\r\n\t\t#Setting icon \r\n\t\tthumb = bmp.GetThumbnailImage(64, 64, bmp.GetThumbnailImageAbort,IntPtr.Zero)\r\n\t\tthumb.MakeTransparent();\r\n\t\ticon = Icon.FromHandle(thumb.GetHicon())\r\n\t\tform.Icon = icon\r\n\r\n\texcept :\r\n\t\tlogo = Panel()\r\n\t\tlogo.Width = 110 * xRatio\r\n\t\tlogo.Height = 110 * yRatio\r\n\t\r\n\tdef addinput(formbody,inputs,starty,xinput,rightmargin,labelsize,importcolorselection):\r\n\t\ty = starty\r\n\t\tfor j in inputs:\r\n\t\t\tlabel = Label()\r\n\t\t\tlabel.Location = Point(xlabel,y+4*yRatio)\r\n\t\t\tlabel.AutoSize = True\r\n\t\t\tlabel.MaximumSize = Size(labelsize,0)\r\n\t\t\tif j.__class__.__name__ == 'listview' and j.element_count > 0:\r\n\t\t\t\tlabel.Text = j.inputname + '\\n(' + str(j.element_count) + ' element' + (\"s\" if j.element_count > 1 else \"\") + ')'\r\n\t\t\telse:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tlabel.Text = j.inputname\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\tformbody.Controls.Add(label)\r\n\t\r\n\t\t\tif j.__class__.__name__ == 'dropdown':\r\n\t\t\t\tcb = ComboBox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcb.Width = formbody.Width - 25*xRatio  - xinput\r\n\t\t\t\t\tcb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcb.Width = formbody.Width - 25*xRatio  - xlabel\r\n\t\t\t\t\tcb.Location = Point(xlabel,y)\r\n\t\t\t\tcb.Sorted = j._sorted\r\n\t\t\t\t[cb.Items.Add(i) for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )]\r\n\t\t\t\tcb.Tag = j\r\n\t\t\t\tif j.defaultvalue != None:\r\n\t\t\t\t\tdefindex = [i for i in cb.Items].index([i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )][j.defaultvalue])\r\n\t\t\t\t\tcb.SelectedIndex = defindex\r\n\t\t\t\tformbody.Controls.Add(cb)\r\n\t\t\t\tform.output.append(cb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t#CHARTS \r\n\t\t\tif j.__class__.__name__ == 'uipiechart':\t\t\t\t\t\r\n\t\t\t\tlabels = j.xseries\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\txseries = [j.xseries]\r\n\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tlabel = SmartLabelStyle()\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Pie\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,len(xseries)):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Legend text of the points\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points: \r\n\t\t\t\t\t\tp.Font = originalFont\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\t\t\t\t\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.IsTextAutoFit = True\r\n\t\t\t\tlegend1.LegendStyle = LegendStyle.Column\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Font = originalFont\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 30)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\thorizont = j.ishorizontal\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values,_horizont):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tif _horizont:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Bar\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Column\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i],horizont))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.Docking = Docking.Right\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiradarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Create a panel for buttons\r\n\t\t\t\tpanelCtrls = Panel()\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\tpanelCtrls.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formbody.Width - 25*xRatio - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Radar\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelCtrls.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Show/Hide labels\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uipointchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Point\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Change marker size\r\n\t\t\t\toriginalMarkerSize = 8\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points:\r\n\t\t\t\t\t\tp.MarkerSize = originalMarkerSize\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\tchartArea1 = chart1.ChartAreas[0]\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend2 = Legend()\r\n\t\t\t\t#Add legends to charts\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\tchart1.Legends.Add(legend2)\r\n\t\t\t\t#Create Custom legend\r\n\t\t\t\tcustomevent = CustomizeLegendEventArgs(legend2.CustomItems)\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tlegend2.CustomItems.Add(LegendItem(s.Name.ToString(),s.Color,\"\"))\t\t\t\t\t\r\n\t\t\t\tdef chart_CustomizeLegend(sender, customevent ):\r\n\t\t\t\t\tchart1 = sender\r\n\t\t\t\t\t#legend1.Enabled = False\r\n\t\t\t\t\tlegend2.Name = \"Legend2\"\r\n\t\t\t\t\tfor s,it in zip(series,legend2.CustomItems):\r\n\t\t\t\t\t\tit.ImageStyle = LegendImageStyle.Marker\r\n\t\t\t\t\t\tit.MarkerStyle = s.MarkerStyle\r\n\t\t\t\t\t\tit.MarkerColor = s.Color\r\n\t\t\t\t\t\tit.BorderColor = Color.Transparent\r\n\t\t\t\t\t\tit.MarkerSize *= 1.3\r\n\t\t\t\tlegend1.Enabled = False\r\n\t\t\t\tlegend2.Font = originalFont\r\n\t\t\t\tlegend2.IsTextAutoFit = True\r\n\t\t\t\tlegend2.BackColor = formbody.BackColor\t\t\t\r\n\t\t\t\tchart1.CustomizeLegend += chart_CustomizeLegend\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uilinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Line\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uisplinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Spline\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibubblechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\t#panelChart.Padding = Padding(1) To create a black border\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formbody.Width - 25*xRatio - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Bubble\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\r\n\t\t\telif j.__class__.__name__ == 'uitreeview':\r\n\t\t\t\ttv = TreeView()\r\n\t\t\t\ttv.MouseDown += form.treeNodeMouseDown\r\n\t\t\t\ttv.CheckBoxes = True\r\n\t\t\t\ttitles = j._hastitles\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttv.Width =formbody.Width - 25*xRatio - xinput\r\n\t\t\t\t\ttv.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\t\ttv.Location = Point(xlabel,y)\r\n\t\t\t\ttv.Height = j._height\r\n\t\t\t\tdef treeIterationTitle(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(remove_accents(input[0].ToString()))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\t\tinput.pop(0)\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIterationTitle(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item) \r\n\t\t\t\tdef treeIteration(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\tcurrentNode.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIteration(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item)\r\n\t\t\t\tcurrentNode = TreeNode(\"List1\")\r\n\t\t\t\tcurrentNode.Expand()\t\t\t\t\r\n\t\t\t\tif titles:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIterationTitle(currentNode,dl)\t\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIteration(currentNode,dl)\r\n\t\t\t\ttv.AfterCheck += form.CheckChildren\t\t\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(tv)\r\n\t\t\t\tform.output.append(tv)\r\n\t\t\t\ty = tv.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'listview':\r\n\t\t\t\tlvp = Panel()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tlvp.Location = Point(xinput,y)\r\n\t\t\t\t\tlvp.Width = formbody.Width - 25*xRatio- xinput\t\t\t\t\r\n\t\t\t\telif j.inputname == \"\" and j.element_count != 0:\r\n\t\t\t\t\tlvp.Location = Point(xlabel,y+35*yRatio)\r\n\t\t\t\t\tlvp.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\telse : \r\n\t\t\t\t\tlvp.Location = Point(xlabel,y)\r\n\t\t\t\t\tlvp.Width = formbody.Width - 25*xRatio - xlabel\t\t\t\t\r\n\t\t\t\tlvp.Height = j.height * yRatio + 25 * yRatio\r\n\t\t\t\t#Creating the listview box\r\n\t\t\t\tlv = mylistview()\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tdummyheader = ColumnHeader()\r\n\t\t\t\tdummyheader.Text = \"\"\r\n\t\t\t\tdummyheader.Name = \"\"\r\n\t\t\t\tdummyheader.Width = -2 * xRatio\r\n\t\t\t\tlv.HeaderStyle = ColumnHeaderStyle.None\r\n\t\t\t\tlv.Columns.Add(dummyheader)\r\n\t\t\t\tlv.Values = j\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlv.CheckBoxes = True\r\n\t\t\t\tlv.View = vi.Details\r\n\t\t\t\tlvItems =  [i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'highlight' or i == 'display_mode' or i == 'element_count' or i == 'default_values' or i == 'sorted' or i == 'showId')]\r\n\t\t\t\tif j.sorted :\r\n\t\t\t\t\tlvItems = sorted(lvItems,key = remove_accents)\r\n\t\t\t\telse:\r\n\t\t\t\t\tpass\r\n\t\t\t\t[lv.Items.Add(i) for i in lvItems]\r\n\t\t\t\tlv.Location = Point(0,0)\r\n\t\t\t\tif j.inputname != \"\" and j.element_count != 0:\r\n\t\t\t\t\tlv.Width = formbody.Width - 25*xRatio- xinput\r\n\t\t\t\telif j.inputname != \"\" and j.element_count == 0:\r\n\t\t\t\t\tlv.Width = formbody.Width - 25*xRatio - xinput\r\n\t\t\t\telse:\r\n\t\t\t\t\tlv.Width =formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\tlv.Height = j.height * yRatio\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tlv.ItemCheck += form.updateallnone\r\n\t\t\t\tfor i in j.default_values:\r\n\t\t\t\t\tdefInd = lvItems.index([x for x in j.keys() if not (x == 'inputname' or x == 'height' or x == 'highlight' or x == 'display_mode' or x == 'element_count' or x == 'default_values' or x == 'sorted' or x == 'showId')][i])\r\n\t\t\t\t\tlv.Items[defInd].Checked = True\r\n\t\t\t\t#Click listview items to hilight and center in appropriate view\r\n\t\t\t\tif j.highlight :\r\n\t\t\t\t\tlv.MouseDown += form.setviewforelement\r\n\t\t\t\t\tlv.MouseUp += form.zoomcenter\r\n\t\t\t\t\titems = list(lv.Items)\r\n\t\t\t\t\tlv.FullRowSelect = True\r\n\t\t\t\t\tdel items[::2]\r\n\t\t\t\t\tfor item in items:\r\n\t\t\t\t\t\titem.BackColor = Color.FromArgb(230,243,255)\r\n\t\t\t\t#Creating select all and select none radiobuttons\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\trball = RadioButton()\r\n\t\t\t\t\trball.Location = Point(0,(j.height+5)*yRatio)\r\n\t\t\t\t\trball.Width = 100 * xRatio\r\n\t\t\t\t\trball.Height = 20 * yRatio\r\n\t\t\t\t\trball.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trball.Text = \"Select all\"\r\n\t\t\t\t\trball.Click += form.selectall\r\n\t\t\t\t\trbnone = RadioButton()\r\n\t\t\t\t\trbnone.Location = Point(105 * xRatio,(j.height+5)*yRatio)\r\n\t\t\t\t\trbnone.Width = 100 * xRatio\r\n\t\t\t\t\trbnone.Height = 20 * yRatio\r\n\t\t\t\t\trbnone.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trbnone.Text = \"Select none\"\t\t\t\r\n\t\t\t\t\trbnone.Click += form.selectnone\t\t\t\r\n\t\t\t\t#Adding controls to panel\r\n\t\t\t\tlvp.Controls.Add(lv)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlvp.Controls.Add(rball)\r\n\t\t\t\t\tlvp.Controls.Add(rbnone)\r\n\t\t\t\tformbody.Controls.Add(lvp)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tform.output.append(lv)\r\n\t\t\t\ty = lvp.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uitext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formbody.Width - 25*xRatio - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uimultilinetext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\ttb.Multiline  = True\r\n\t\t\t\ttb.Height = j._height * yRatio\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formbody.Width - 25*xRatio - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = tb.Bottom + 25 * yRatio\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'tableview':\r\n\t\t\t\t#Creating grouping panel\r\n\t\t\t\ttvp = Panel()\r\n\t\t\t\ttvp.Location = Point(xlabel,y)\r\n\t\t\t\ttvp.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tif (50 + len(j.dataList) * 15) * yRatio > 800 * yRatio:\r\n\t\t\t\t\tautoheight = 800 * yRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tautoheight = (50 + len(j.dataList) * 15 ) * yRatio\t\t\t\r\n\t\t\t\ttvp.Height = autoheight + 73 * yRatio\r\n\t\t\t\t#Creating title\r\n\t\t\t\ttitlep = Label()\r\n\t\t\t\ttitlep.Text = j._tabletitle\r\n\t\t\t\ttitlep.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\ttitlep.BackColor = Color.FromArgb(153,180,209)\r\n\t\t\t\ttitlep.Font = Font(\"Arial\", 11, FontStyle.Bold)\r\n\t\t\t\ttitlep.TextAlign = ContentAlignment.MiddleLeft\r\n\t\t\t\ttitlep.BorderStyle = BorderStyle.FixedSingle\r\n\t\t\t\ttitlep.Location = Point(0,0)\r\n\t\t\t\ttvp.Controls.Add(titlep)\r\n\t\t\t\t#Creating data structure\r\n\t\t\t\tdg = myDataGridView()\r\n\t\t\t\t#dg.SelectionMode = DataGridViewSelectionMode.CellSelect\r\n\t\t\t\tdg.EnableHeadersVisualStyles = False\t\t\t\t\r\n\t\t\t\tdt = DataTable()\r\n\t\t\t\tdl = j.dataList\r\n\t\t\t\tfor i in range(len(dl[0])):\r\n\t\t\t\t\tif j._hasTitle:\r\n\t\t\t\t\t\tdt.Columns.Add(remove_accents(dl[0][i].ToString()))\r\n\t\t\t\t\t\trngstart = 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tdt.Columns.Add(\"Column \" + str(i))\r\n\t\t\t\t\t\trngstart = 0\t\t\t\t\t\t\r\n\t\t\t\tfor rindex in range(rngstart,len(dl)):\r\n\t\t\t\t\trow = dt.NewRow()\r\n\t\t\t\t\tfor i in range(len(dl[rindex])):\r\n\t\t\t\t\t\trow[i] = dl[rindex][i]\r\n\t\t\t\t\tdt.Rows.Add(row)\t\t\t\t\t\t\r\n\t\t\t\tdg.Tag = j._hasTitle\t\t\t\t\r\n\t\t\t\tdg.DataSource = dt\r\n\t\t\t\tdg.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText\r\n\t\t\t\tdg.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells\r\n\t\t\t\tdg.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\tdg.Location = Point(0,23 * yRatio)\r\n\t\t\t\tdg.Height = autoheight\r\n\t\t\t\t#Creatin Excel like drag copy functionalities\r\n\t\t\t\tdg.CellMouseDown += form.startCell\r\n\t\t\t\tdg.CellMouseUp += form.endCell\r\n\t\t\t\t#dg.MouseDown += form.startRowDrag\r\n\t\t\t\t#dg.MouseUp =\t\t\t\r\n\t\t\t\ttvp.Controls.Add(dg)\t\t\t\r\n\t\t\t\ty = tvp.Bottom + 15 * yRatio\r\n\t\t\t\t#Adding export to excel button\r\n\t\t\t\tex = Button()\r\n\t\t\t\tex.Tag = [j._hasTitle , j._openExcel , j._showinfo , j._fileInfo]\r\n\t\t\t\ttry:\r\n\t\t\t\t\texpImage = getImageByName(\"exp.png\")[0]\r\n\t\t\t\t\tex.BackgroundImage = expImage\r\n\t\t\t\texcept:\r\n\t\t\t\t\tex.Text = \"Export\"\t\t\t\t\t\r\n\t\t\t\tex.Width = 60 * xRatio\r\n\t\t\t\tex.Height = 30 * yRatio\r\n\t\t\t\tex.Location = Point(formbody.Width - 25*xRatio - 125 * xRatio ,dg.Bottom + 15 * yRatio)\t\t\t\t\t\r\n\t\t\t\ttvp.Controls.Add(ex)\r\n\t\t\t\tex.Click += form.exportToExcel\r\n\t\t\t\t#Adding filepath export textbox\r\n\t\t\t\tfilepathtb = TextBox()\r\n\t\t\t\tfilepathtb.Text = \"ExportFileName\"\r\n\t\t\t\tfilepathtb.Location = Point(0 ,dg.Bottom + 20 * yRatio)\r\n\t\t\t\tfilepathtb.Width = formbody.Width - 25*xRatio - xlabel - 125 * xRatio\r\n\t\t\t\ttvp.Controls.Add(filepathtb)\r\n\t\t\t\t#Adding copy to clipboard button\r\n\t\t\t\tcb = Button()\r\n\t\t\t\t#Adding panel to form\r\n\t\t\t\tformbody.Controls.Add(tvp)\r\n\t\t\t\tform.output.append(dg)\r\n\t\t\t\ty = tvp.Bottom + 25 * yRatio\r\n\t\t\t\tform.topmost()\r\n\t\t\telif j.__class__.__name__ == 'uitextnote':\r\n\t\t\t\tgb = GroupBox()\r\n\t\t\t\tgb.Text = j.title\r\n\t\t\t\tgb.Parent = form\r\n\t\t\t\tgb.SendToBack()\r\n\t\t\t\tgb.BackColor = Color.Transparent\r\n\t\t\t\tgb.Location = Point(xlabel, y)\r\n\t\t\t\ttn = Label()\r\n\t\t\t\ttn.Location = Point(xlabel,18 * yRatio)\r\n\t\t\t\ttn.AutoSize = True\r\n\t\t\t\ttn.MaximumSize = Size(formbody.Width - 25*xRatio - 50 * xRatio,0)\r\n\t\t\t\ttn.Text = j.textnote\r\n\t\t\t\ttn.BringToFront()\r\n\t\t\t\tgb.Controls.Add(tn)\r\n\t\t\t\tgb.Size = Size(formbody.Width - 25*xRatio - 25 * xRatio, tn.Bottom-tn.Top+25 * yRatio)  \r\n\t\t\t\ty = gb.Bottom + 25 * xRatio\r\n\t\t\t\tformbody.Controls.Add(gb)\r\n\t\t\telif j.__class__.__name__ == 'uibool':\r\n\t\t\t\tyn = CheckBox()\r\n\t\t\t\tyn.Width = formbody.Width - 25*xRatio - xinput  + 10 * xRatio\r\n\t\t\t\tyn.Location = Point(xinput,y)\r\n\t\t\t\tyn.Text = j.booltext\r\n\t\t\t\tg = yn.CreateGraphics()\r\n\t\t\t\tsizetext = g.MeasureString(yn.Text,yn.Font, formbody.Width - 25*xRatio - xinput  -20 * xRatio)\r\n\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\tyn.Height = heighttext + 15 * yRatio\r\n\t\t\t\tyn.Checked = j.defaultvalue\r\n\t\t\t\tformbody.Controls.Add(yn)\r\n\t\t\t\tform.output.append(yn)\r\n\t\t\t\ty = yn.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiradio':\r\n\t\t\t\tyrb = 20 * yRatio\r\n\t\t\t\trbs = []\r\n\t\t\t\trbgroup = mygroupbox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\trbgroup.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\trbgroup.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\trbgroup.Width = formbody.Width - 25*xRatio - xlabel \r\n\t\t\t\t\trbgroup.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\trbgroup.Tag = j\r\n\t\t\t\trbcounter = 0\r\n\t\t\t\tfor key in j.keys():\r\n\t\t\t\t\tif key != 'inputname' and key != 'defaultvalue':\r\n\t\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\t\trb.Text = key \r\n\t\t\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\t\t\trb.Width = formbody.Width - 25*xRatio - xinput  - 35 * xRatio\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\trb.Width = formbody.Width - 25*xRatio - xlabel  - 35 * xRatio\r\n\t\t\t\t\t\trb.Location = Point(20 * xRatio,yrb)\r\n\t\t\t\t\t\tif rbcounter == j.defaultvalue:\r\n\t\t\t\t\t\t\trb.Checked = True\r\n\t\t\t\t\t\trbgroup.Controls.Add(rb)\r\n\t\t\t\t\t\tg = rb.CreateGraphics()\r\n\t\t\t\t\t\tsizetext = g.MeasureString(key,rb.Font, formbody.Width - 25*xRatio - xinput - 90*xRatio)\r\n\t\t\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\t\t\trb.Height = heighttext + 15 * yRatio\r\n\t\t\t\t\t\tybot = rb.Bottom\r\n\t\t\t\t\t\tyrb += heighttext + 12 * yRatio\r\n\t\t\t\t\t\trbcounter += 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tpass\r\n\t\t\t\trbgroup.Height = ybot + 20 * yRatio\r\n\t\t\t\t[rbgroup.Controls.Add(rb) for rb in rbs]\r\n\t\t\t\tformbody.Controls.Add(rbgroup)\r\n\t\t\t\tform.output.append(rbgroup)\r\n\t\t\t\ty = rbgroup.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__  == 'uifilepath':\r\n\t\t\t\tfp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tfp.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tfp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tfp.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tfp.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\tif not j.defaultvalue == \"FilePath\":\r\n\t\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\t\tfp.MouseHover += form.showtooltip\t\r\n\t\t\t\tfp.Text = j.buttontext\r\n\t\t\t\tfp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(fp)\r\n\t\t\t\tfp.Click += form.openfile\r\n\t\t\t\tform.output.append(fp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uidirectorypath':\r\n\t\t\t\tdp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tdp.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tdp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tdp.Location = Point(xlabel,y)\t\t\t\t\r\n\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\tdp.Text = j.buttontext\r\n\t\t\t\tif not j.defaultvalue == \"DirectoryPath\":\r\n\t\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\t\tdp.MouseHover += form.showtooltip\r\n\t\t\t\tdp.Text = j.buttontext\t\r\n\t\t\t\tdp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(dp)\r\n\t\t\t\tdp.Click += form.opendirectory\r\n\t\t\t\tform.output.append(dp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xlabel\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.pickobject\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectautocadelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickautocadobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click += form.pickautocadobject\t\t\t\t\t\t\t\t\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tse.Click  += form.pickobjectsordered\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.picklinkedobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.picklinkedobject\r\n\t\t\t\tform.output.append(se)\r\n\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.pickobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.pickobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tsec.Click += form.pickobjectsofcatordered\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectfaces':\r\n\t\t\t\tsf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsf.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsf.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsf.Location = Point(xlabel,y)\r\n\t\t\t\tsf.Text = j.buttontext\r\n\t\t\t\tsf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sf)\r\n\t\t\t\tsf.Click += form.pickfaces\r\n\t\t\t\tform.output.append(sf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectpointsonface':\r\n\t\t\t\tspf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tspf.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tspf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tspf.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tspf.Location = Point(xlabel,y)\r\n\t\t\t\tspf.Text = j.buttontext\r\n\t\t\t\tspf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(spf)\r\n\t\t\t\tspf.Click += form.pickpointsonface\r\n\t\t\t\tform.output.append(spf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectedges':\r\n\t\t\t\tsed = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsed.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsed.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsed.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsed.Location = Point(xlabel,y)\r\n\t\t\t\tsed.Text = j.buttontext\r\n\t\t\t\tsed.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sed)\r\n\t\t\t\tsed.Click += form.pickedges\r\n\t\t\t\tform.output.append(sed)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uislider':\r\n\t\t\t\tgb = Panel()\r\n\t\t\t\tif j.defaultvalue == '':\r\n\t\t\t\t\tdefval = j.minimum\r\n\t\t\t\telse:\r\n\t\t\t\t\tdefval = j.defaultvalue\r\n\t\t\t\tsl = mytrackbar(j.minimum,j.step)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tgb.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tgb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tgb.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tgb.Location = Point(xlabel,y)\r\n\t\t\t\tgb.Height = 40 * yRatio\r\n\t\t\t\tsl.Minimum = 0\r\n\t\t\t\tsl.Maximum = (j.maximum-j.minimum)/j.step\r\n\t\t\t\tsl.Value = (defval - j.minimum) / j.step\r\n\t\t\t\tsl.TickFrequency = (j.maximum-j.minimum)/j.step/10\r\n\t\t\t\tsl.Location = Point(40 * xRatio,0)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsl.Width = formbody.Width - 25*xRatio - xinput  - 35 * xRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tsl.Width = formbody.Width - 25*xRatio - xlabel  - 35 * xRatio\r\n\t\t\t\tgb.Controls.Add(sl)\r\n\t\t\t\tform.output.append(sl)\r\n\t\t\t\tdisplabel = Label()\r\n\t\t\t\tdisplabel.Width = 50 * xRatio\r\n\t\t\t\tdisplabel.Location = Point(0,5 * yRatio)\r\n\t\t\t\tdisplabel.Text = str(defval)\r\n\t\t\t\tdisplabel.Height = 30 * yRatio\r\n\t\t\t\tdisplabel.BringToFront()\r\n\t\t\t\tgb.Controls.Add(displabel)\t\r\n\t\t\t\tformbody.Controls.Add(gb)\t\t\t\r\n\t\t\t\tsl.Scroll += form.scroll\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiimage':\r\n\t\t\t\tpic = Image.FromFile(j.image)\r\n\t\t\t\tim = PictureBox()\r\n\t\t\t\tif j.showborder:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.Fixed3D\r\n\t\t\t\telse:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.None\r\n\t\t\t\tratio = (pic.Height)/(pic.Width)\r\n\t\t\t\th = float(pic.Height)\r\n\t\t\t\tw = float(pic.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\timage_maxsize = formbody.Width - 25*xRatio - xlabel \r\n\t\t\t\tim.Size = Size(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tscaledimage = Bitmap(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\t\t\tgr.DrawImage(pic,0,0,image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tim.Image = pic\r\n\t\t\t\tim.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\t\t\tformbody.Controls.Add(im)\r\n\t\t\t\tim.Location = Point(25 * xRatio,y+25*yRatio)\r\n\t\t\t\ty = im.Bottom + 25 * yRatio\r\n\t\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 0:\r\n\t\t\t\tcp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcp.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tcp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcp.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tcp.Location = Point(xlabel,y)\r\n\t\t\t\tcp.Text = j.buttontext\r\n\t\t\t\tcp.Height = 30 * yRatio\r\n\t\t\t\tformbody.Controls.Add(cp)\r\n\t\t\t\tcp.Click += form.colorpicker\r\n\t\t\t\tform.output.append(cp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 1:\r\n\t\t\t\timportcolorselection = 2\r\n\t\t\telif j.__class__.__name__ == 'uigroup':\r\n\t\t\t\tgrouppanel = GroupBox()\r\n\t\t\t\tgrouppanel.Text = j.groupname\r\n\t\t\t\tgrouppanel.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanel.Width = formbody.Width - 65 * xRatio\r\n\t\t\t\t#recursive implementation of the definition to process grouped inputs\r\n\t\t\t\taddinput(grouppanel,j.inputgroup,25*yRatio,xinput-25*xRatio,80 * xRatio,90 * xRatio,importcolorselection)\r\n\t\t\t\tformbody.Controls.Add(grouppanel)\r\n\t\t\t\ty = grouppanel.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiconditional':\r\n\t\t\t\tgrouppanelcond = GroupBox()\r\n\t\t\t\tgrouppanelcond.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanelcond.Width = formbody.Width - 25*xRatio - 65 * xRatio\t\r\n\t\t\t\tform.output.append(grouppanelcond)\t\t\t\t\r\n\t\t\t\t#recursive implementation of the definition to process conditional groups of inputs\r\n\t\t\t\tpanlist = []\r\n\t\t\t\trblist = []\r\n\t\t\t\typ = 25 * yRatio\r\n\t\t\t\txrb = 25 * xRatio\r\n\t\t\t\tfor i,d in zip(j._Conditions,j._GroupedInputs): \r\n\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\trb.CheckedChanged += form.ActivateOption\r\n\t\t\t\t\trb.Text = i\r\n\t\t\t\t\trb.Location = Point(xrb,10*yRatio)\r\n\t\t\t\t\trb.Width = 95 * xRatio\r\n\t\t\t\t\trblist.append(rb)\t\t\t\t\t\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(rb)\t\t\t\t\r\n\t\t\t\t\tcondition_pannel = Panel()\r\n\t\t\t\t\tcondition_pannel.Name = i\r\n\t\t\t\t\tcondition_pannel.Top = yp\r\n\t\t\t\t\tcondition_pannel.Width = formbody.Width - 25*xRatio - 65 * xRatio\r\n\t\t\t\t\tcondition_pannel.BackColor = Color.Transparent\r\n\t\t\t\t\tcondition_pannel.BringToFront()\t\t\t\t\t\r\n\t\t\t\t\taddinput(condition_pannel,d,25*yRatio,xinput-25*xRatio,80*xRatio,90*xRatio,importcolorselection)\r\n\t\t\t\t\tpanlist.append(condition_pannel)\r\n\t\t\t\t\typ = condition_pannel.Bottom - 25*yRatio\r\n\t\t\t\t\txrb += 100 * xRatio\r\n\t\t\t\tfor pan in panlist:\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(pan)\r\n\t\t\t\tfor e,pan in enumerate(panlist):\r\n\t\t\t\t\tif e != j._defaultOptionIndex:\r\n\t\t\t\t\t\tpan.Enabled = False\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\trblist[j._defaultOptionIndex].Checked = True\r\n\t\t\t\tgrouppanelcond.Height = sum([p.Height for p in panlist]) - (len(panlist)-2)*25 * yRatio\r\n\t\t\t\tgrouppanelcond.BackColor = Color.Transparent\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(grouppanelcond)\r\n\t\t\t\tform.output.append([grouppanelcond.Tag])\t\t\t\t\r\n\t\t\t\ty = grouppanelcond.Bottom + 25*yRatio\r\n\t\t\tformbody.Height = y\r\n\r\n\r\n\t# process input lists \r\n\taddinput(body,inputtypes,0,IN[9],40 * xRatio ,IN[9] * xRatio,importcolorselection)\r\n\t\r\n\t#add the formbody panel to the form\r\n\tform.Controls.Add(body)\t\t\r\n\t\r\n\r\n\tif IN[6] != None:\r\n\t\tif IN[8] > 400 * yRatio:\r\n\t\t\tformy += 50 * yRatio\r\n\t\t\txinput = 270 * yRatio\r\n\t\telse:\r\n\t\t\tformy = logo.Bottom + 20 * yRatio\r\n\telse:\r\n\t\tformy += 50 * yRatio\r\n\r\n\r\n\r\n\t#Adding validation button\r\n\t\r\n\tbutton = Button()\r\n\tbutton.Text = IN[1]\r\n\tbutton.Width = formwidth - xinput - 40 * xRatio\r\n\tbutton.Height = 20 * yRatio\r\n\tbutton.Location = Point (xinput,formy)\r\n\tbutton.Click += form.setclose\r\n\tform.Controls.Add(button)\r\n\tform.MaximizeBox = False\r\n\tform.MinimizeBox = False\r\n\tform.FormBorderStyle = FormBorderStyle.FixedSingle\r\n\t\r\n\t#Adding Cancel button\r\n\tif IN[6] != None:\r\n\t\tcancelbutton = Button()\r\n\t\tcancelbutton.Text = IN[6]\r\n\t\tcancelbutton.Width = 120 * xRatio\r\n\t\tcancelbutton.Height = 20 * xRatio\r\n\t\tcancelbutton.Name = \"Cancel\"\r\n\t\tcancelbutton.Location = Point (xinput -120 * xRatio ,formy)\r\n\t\tcancelbutton.Click += form.setclose\r\n\t\tform.Controls.Add(cancelbutton)\r\n\t\tform.CancelButton = cancelbutton\r\n\t\r\n\t#Adding link to help\r\n\t\r\n\tif IN[5] != None :\r\n\t\thelplink = LinkLabel()\r\n\t\thelplink.Text = \"Help\"\r\n\t\thelplink.Tag = IN[5]\r\n\t\thelplink.Click += form.openurl\r\n\t\thelplink.Location = Point(formwidth - 65 * xRatio ,formy+30 * yRatio)\r\n\t\tform.Controls.Add(helplink)\r\n\telse:\r\n\t\tpass\t\r\n\t\t\t\r\n\tform.ShowIcon = True\r\n\tform.Width = formwidth\r\n\tform.Height = formy + 120 * yRatio\r\n\tformfooterheight = form.Height - formheaderheight\r\n\t\r\n\t# Make formbody scrollable\r\n\t\r\n\t# if the form is longer than its maximum height, do the following:\r\n\t# modify the form height\r\n\t# make the formbody panel scrollable\r\n\tif form.Height + body.Height > IN[7] * yRatio and IN[7] * yRatio > 0:\r\n\t\tformbody_calculatedheight = IN[7] * yRatio - form.Height\r\n\t\t# make sure the formbody is at least 100 px high\r\n\t\tif formbody_calculatedheight < 100 * yRatio: formbody_calculatedheight = 100 * yRatio\r\n\t\tbody.Height = formbody_calculatedheight\r\n\t\tform.Height = form.Height + formbody_calculatedheight\r\n\t\t# this (and apparently only this) will implement a vertical AutoScroll *only*\r\n\t\t# http://stackoverflow.com/a/28583501\r\n\t\tbody.HorizontalScroll.Maximum = 0\r\n\t\tbody.AutoScroll = False\r\n\t\tbody.VerticalScroll.Visible = False\r\n\t\tbody.AutoScroll = True\r\n\t\tbody.BorderStyle = BorderStyle.Fixed3D\r\n\telse:\r\n\t\tform.Height = form.Height + body.Height\r\n\t# Move footer elements\r\n\tlogo.Location = Point(logo.Location.X, logo.Location.Y + body.Height)\r\n\tbutton.Location = Point(button.Location.X, button.Location.Y + body.Height)\r\n\tif IN[6] != None: cancelbutton.Location = Point(cancelbutton.Location.X, cancelbutton.Location.Y + body.Height)\r\n\tif IN[5] != None: helplink.Location = Point(helplink.Location.X, helplink.Location.Y + body.Height)\r\n\r\n\t#Positionning the form at top left of current view\r\n\t#In The revit environment\r\n\ttry:\r\n\t\tuiviews = uidoc.GetOpenUIViews()\r\n\t\tif doc.ActiveView.IsValidType(doc.ActiveView.GetTypeId()):\r\n\t\t\tactiveviewid = doc.ActiveView.Id\r\n\t\t\tactiveUIView = [v for v in uiviews if v.ViewId == activeviewid][0]\r\n\t\telse:\r\n\t\t\tactiveUIView = uiviews[0]\r\n\t\trect = activeUIView.GetWindowRectangle()\r\n\t\tform.StartPosition = FormStartPosition.Manual\r\n\t\tform.Location = Point(rect.Left-7 * xRatio,rect.Top)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\t\t\r\n\tif IN[2]:\r\n\t\tif importcolorselection != 2:\r\n\t\t\tform.Show()\r\n\t\t\tCustomMessageLoop(form)\r\n\t\t\tresult = form.values\r\n\t\t\tOUT = result,True, form.cancelled \r\n\t\telse:\r\n\t\t\tOUT = ['ColorSelection input is only available With Revit 2017'] , False, False\r\n\telse :\r\n\t\tOUT = ['Set toggle to true!'] , False, False\r\nexcept:\r\n\timport traceback\r\n\tOUT = traceback.format_exc() , \"error\", \"error\"\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "4ce976916be04773b925ca8490918ae0",
      "Inputs": [
        {
          "Id": "4a7854063e204ada9ff58f688cde9315",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bfd52ade190745409683179b21ba1694",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bb6937d980a1457390f4d0f6650b7905",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f40e6b60d16f4c7381a14c614ba65bad",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1b7a54b026564fb3bd05879d89aec691",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eb1100a876fa47888a82d0d806e5f618",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d0dee0e284c24624afd089bcb39fabbd",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fcb31d53de5d4513a4afede58b4a6d6a",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "49812f3e222a47f780dcfe7af460566a",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0ac4c9fa4c6449858302d1561b986934",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "01624cb7b3f244cb944278903bb74cf3",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "LinkToHelp_optional: string = null;",
      "Id": "9000b71502514e86bb826175b94b84b1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a1074510680842e595965c0235a52e36",
          "Name": "",
          "Description": "LinkToHelp_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "/* Cancel button will only be displayed if a label text is entered here*/\nCancelButtonText_optional: string = null;",
      "Id": "6b69288f430c478ab4833f175b560528",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5d862fb88b7e4771b0144678280af474",
          "Name": "",
          "Description": "CancelButtonText_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "9316b23d1b944f57b3eeb1d5a65824a7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "72129c0124614f4bac36d75263b85088",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "0de3feba15964a818c707f86fb729874",
      "Inputs": [
        {
          "Id": "6a72caedb8604a249fd1b2e0f0659b36",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "12652404ba144a53a11984e7f15c0252",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d72fb9f27beb45d88733d45708d4c1d1",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f9968131bc5442f490c3facb4d3ffe61",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "12cdc4b32d2a429c97530bb3fecd5591",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8e4183b19d154696a3c577270c97fa62",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Rename END from\";",
      "Id": "7e8eb55b98dd4b19ac9a0aca77236dc0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9e73e5db0dad4152bd762e8decc21276",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "99027473275744d790cd3893e959a755",
      "Inputs": [
        {
          "Id": "b892d16ef284477c80dd8617619df4a6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ddd303e233c40988b60951abf89e5d0",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ed23d0c1cce84a86950c596c8f44891f",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "07861a4c3a4742178187943b04686c3d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[a,b,c];",
      "Id": "b4cb4cb4c3024912a92868382313a5e5",
      "Inputs": [
        {
          "Id": "e6a084328ef54a25b9215a2dd0884a1b",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "915e7a2dc3ac4de685c0711afeb2ecca",
          "Name": "b",
          "Description": "b",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ab361d35969841b992a2058761fcfa7d",
          "Name": "c",
          "Description": "c",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8558702e686f4a409002b8dab4c7d07f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Logo_optional: var = \"\";",
      "Id": "a6b668532bb24a3599384813f1159818",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fa5ece7479044da09b2565e0e9db9d31",
          "Name": "",
          "Description": "Logo_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "ButtonText_optional: string = \"Set Values\";",
      "Id": "e3d0ebad06bc456bafabc448442830c6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e0656fb1af56464cabd279d5e59c2bf0",
          "Name": "",
          "Description": "ButtonText_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Description_optional: string = \"\";",
      "Id": "02616909c26548d88269ce06acd3a800",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cde81e8decc148dbb8bf315bc0b7dee0",
          "Name": "",
          "Description": "Description_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"+x or -x sheets\";",
      "Id": "9d311e814e29478a85b4e1a99d30fb9f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5e31a2d73ae2468b81419a9b1e722a0c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "39202a6bb0db4a9397cf2be9ce05fc52",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "38ed1e359e2244d390f33d7dbcac6f99",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "05a680db2e62438ba58d2a67dcc4b2dc",
      "Inputs": [
        {
          "Id": "3da36fb4295d457ab17313edf5d04536",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b9bad56f6824a0b8e956f449008efa2",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cffece21f8384b518f3b9b0edd7ca05c",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "34e4586f6c874f7e8f34cad421768e45",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"for example, A104 or A1.10\";",
      "Id": "e5817798e55541b9b53f8f0bf169066c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b4231c517ccb4bf9bedf63921dc83831",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "a17d80e94600430081446cad3c32ebe5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ab500b69c4ee46648dece92f0527aab5",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"for example, 10\";",
      "Id": "c0ed021ed1cc4c02a489a0d112e53676",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "97727dd0efd44560b4ad272d91569065",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Up to N sheets\";",
      "Id": "9c9897000f0e4d898e84c6fb7f7a84a6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8375597e8daa4c878d95dd18c8fec814",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"For example, +1\";",
      "Id": "b6cb548eeea14fb7919a916439acd8f3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f078eddf71144d3f90787f8f7de14564",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0][0];",
      "Id": "ab58fe4876444ec493369b408406df57",
      "Inputs": [
        {
          "Id": "176700abc286412291bab85f03d10729",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4a5e2d56acfd4321a21de8f3138cfb12",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0][1];",
      "Id": "cf31193561ad4d929e200d18ed29228b",
      "Inputs": [
        {
          "Id": "24364852de0c46498f7a3a19fa207865",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "41d0798cc9ff44e9b3eb716c9ad2e8f2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0][2];",
      "Id": "4b4a7f3be3ee424896e301cd13482d0e",
      "Inputs": [
        {
          "Id": "f95406a6445d473a975db3b1345082dc",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b09e7e2a1a7340fda066eae19bf44c99",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "812509283b62452ab28d730bde07efeb",
      "Inputs": [
        {
          "Id": "7bf9f9c7adb148e8b14a5c6c11a1eb6c",
          "Name": "string",
          "Description": "String to be converted\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "78b273e91c9d42ccbbb698243557fd98",
          "Name": "number",
          "Description": "Integer or double-type number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (string: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "434c4dc757514ab79bd7684f856dd750",
      "Inputs": [
        {
          "Id": "6f48ad0e00db4ec18eb1352a6b490fc5",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d27475135a4443548f257a5b314a1274",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ec509a8e6fd445f08c7bfaf535ce32db",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\".\";",
      "Id": "7ca697d1f4064ff0a359bf5b318183b3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c1f64d5344bf41ad847999760df5491f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "c7472a7458cd43aea0462a8218b3c445",
      "Inputs": [
        {
          "Id": "e7a7a7ffc1634a87ae9fb90df7a22f7d",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "039229daeeb346b7afc4bc5837d7f074",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8890808d88e34d2ba2fd114819845dba",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\".\";",
      "Id": "410483ff10534847a6e45a6689b4e5f1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b6d0fc5427104e03ae79f8bf77b92566",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "b627912531b14cff830a58b690bbf50c",
      "End": "090e29fba95248d194d9c49302787e0c",
      "Id": "3965bd80918247778884ea80d4cd0061",
      "IsHidden": "False"
    },
    {
      "Start": "8d684a63e9da473f809b996aa031a430",
      "End": "47e7f0b142be48a497d000dd22f96ec3",
      "Id": "670c2eda68e74f63af349584db26573b",
      "IsHidden": "False"
    },
    {
      "Start": "2e2f49b251fd48e88a702f5dda31cad0",
      "End": "94fea5345bea4e2d9cdbbe07b2e51242",
      "Id": "30203ffeb6e949319976dcc56a98613b",
      "IsHidden": "False"
    },
    {
      "Start": "156cd3298af8424fbe57554215774f95",
      "End": "7a5ab7db0ced46a187026fbe4d5dbf3f",
      "Id": "64647b11ae5542d88bccd28f559c0cff",
      "IsHidden": "False"
    },
    {
      "Start": "a558009ede7447c69432aa0c3c5b71c2",
      "End": "fe26e8c1182b4b51840db827a0f659c6",
      "Id": "42d3772ae87244e1b62ee14297b5c69a",
      "IsHidden": "False"
    },
    {
      "Start": "0efe5a4aac5f417683e17d93308b5a15",
      "End": "f4733fddc0e64e73bfd781a273ac9b2b",
      "Id": "9dd7cf04095e491cb535fda239908c30",
      "IsHidden": "False"
    },
    {
      "Start": "fec15e8215a84c5e9bcd30f237d7ffa7",
      "End": "56f86128a7d9479d84d9b611f0954aa3",
      "Id": "da554092769546e5b5e3c79fbe45e11b",
      "IsHidden": "False"
    },
    {
      "Start": "f4fdc24762874cb4ab5ff115455f6f07",
      "End": "85dbc15f664d4abaa5adc0c3f482d77f",
      "Id": "1d4b5b6765b7487da41ea76af54ee302",
      "IsHidden": "False"
    },
    {
      "Start": "a402e27cd28d473fa1efff0ea1177ec5",
      "End": "3fbee0a87b2b4fa2904dd381936551b2",
      "Id": "9e2f646c47a64ee3889c47574df14393",
      "IsHidden": "False"
    },
    {
      "Start": "d23876a9bf914017b2efceb0a7db105e",
      "End": "b599dfb56cc847e7bb9f61ee1b39d714",
      "Id": "6ed6b68b7c6a49e5aa30af6eb8b001f3",
      "IsHidden": "False"
    },
    {
      "Start": "d23876a9bf914017b2efceb0a7db105e",
      "End": "9bdf167794624fd8b1003b2524008a4d",
      "Id": "b7a99177e4514c5696c19817d52929ca",
      "IsHidden": "False"
    },
    {
      "Start": "35249b3dd6624307bbac4fc5e82151d5",
      "End": "1787cbbd31824149955f99df83a5622b",
      "Id": "04fe7866f5cc4eac850f1f7601cc7354",
      "IsHidden": "False"
    },
    {
      "Start": "08d704ac7ad7432a97ab79fd52e485a6",
      "End": "a3f234102cb444479b04e54568f0aa37",
      "Id": "b82882abe14f49fbb8f44415efd5d75c",
      "IsHidden": "False"
    },
    {
      "Start": "fea3f0d377764b1b9b6b0886a3b12a0d",
      "End": "e57a9c4c9d37461e8a2befeb76cba64c",
      "Id": "0cc7f0aa78c042f09e62dc160e0ccd37",
      "IsHidden": "False"
    },
    {
      "Start": "4cc2c97edc6349c6afc5e6554eb3346e",
      "End": "93c9b7f20c334bdcbca02030b4174730",
      "Id": "28f5ab39e8784a2f9bcd1c17d1e2c2bc",
      "IsHidden": "False"
    },
    {
      "Start": "d62f13154c354e7691ac04d42f6af90d",
      "End": "6b5483aa6d9049cb90077fd2da2381c1",
      "Id": "ec5e0c33d0c64e08ae2a2feaf6e4b447",
      "IsHidden": "False"
    },
    {
      "Start": "6058332c9f9147a2b93ecf73edfdcafc",
      "End": "1ff78da631854e11a02b2d4bcd5ed978",
      "Id": "16458be3fa754447a816fec99dd8f383",
      "IsHidden": "False"
    },
    {
      "Start": "6058332c9f9147a2b93ecf73edfdcafc",
      "End": "c60b0c943da0469ba7662cfc41337213",
      "Id": "5c719568a82b41758d282e4dff1435de",
      "IsHidden": "False"
    },
    {
      "Start": "aaddd9ce52754195ae05b144ea1e2f94",
      "End": "135e11335ea44020af8c8e932818567d",
      "Id": "da1d8dc491c240da83cecc4583fda1be",
      "IsHidden": "False"
    },
    {
      "Start": "aaddd9ce52754195ae05b144ea1e2f94",
      "End": "2737ba2ceba34556b8d28e02e8a913e1",
      "Id": "9c698d471eaf44398f7369e9d2307773",
      "IsHidden": "False"
    },
    {
      "Start": "aaddd9ce52754195ae05b144ea1e2f94",
      "End": "154bf9c64e1947ae91bb8e1097d1f276",
      "Id": "212cd8c0803e47febadf5afba23830d0",
      "IsHidden": "False"
    },
    {
      "Start": "9b103f31b8ef41c69277d4f6d12a9ad7",
      "End": "7e542ae9f3034f74bc561e3714858dc6",
      "Id": "3c52172da2a74c318e8608d1033096d8",
      "IsHidden": "False"
    },
    {
      "Start": "d12b0e9243e24a899d8add98becb3ce6",
      "End": "948f0ae4ae6f40a19b2e01c390e0dd36",
      "Id": "9506e347a7ed4359ad0b0298f57632a8",
      "IsHidden": "False"
    },
    {
      "Start": "76dffd03b8184e85b211ac1c6c763f49",
      "End": "d32ac72e5d264da38e8c4d4fb3170f6d",
      "Id": "6489e465442b45609d0b4005a430c415",
      "IsHidden": "False"
    },
    {
      "Start": "2c770c37bbcd450294f0838e571b0cef",
      "End": "2a16561f87684eba89d9e505551c70ac",
      "Id": "d6c24f3bef8f4368a8bfcf75d185eb1a",
      "IsHidden": "False"
    },
    {
      "Start": "5358e3eabb75485b8bf1e1db14bd0b8b",
      "End": "3c9c7632112d4986ac6c962247693de3",
      "Id": "1cbec63d2b8c45e9a19353ac4b3d80f9",
      "IsHidden": "False"
    },
    {
      "Start": "dd75040a874a4b14b2ead6789d4afef7",
      "End": "4f8e07bccc7f416d88d78cbceb86fc14",
      "Id": "953540752351497a9d49f099a2d9df7e",
      "IsHidden": "False"
    },
    {
      "Start": "e63af5f1fed0451fa5e27c8fe0f0d1ac",
      "End": "581d920ad8dc417e855b190638afccb5",
      "Id": "e078e18147cc4eda9a8070903f62b6be",
      "IsHidden": "False"
    },
    {
      "Start": "620704115e3345279ca7138711b85688",
      "End": "1ad28cae3f2f49b1a43cf5afd6bd1d6f",
      "Id": "16210987a8f5494ca19c9ef01dbb693a",
      "IsHidden": "False"
    },
    {
      "Start": "620704115e3345279ca7138711b85688",
      "End": "8ee2a0d377b74cbfa28546bbb2f8e8ae",
      "Id": "f2e6980a9c17417ea6607e8b1f7bb2c1",
      "IsHidden": "False"
    },
    {
      "Start": "620704115e3345279ca7138711b85688",
      "End": "380ea88d897b460a88c77fe74c3c7e4a",
      "Id": "2e8dd9488f604b609f4657c7eeddffe2",
      "IsHidden": "False"
    },
    {
      "Start": "620704115e3345279ca7138711b85688",
      "End": "6f48ad0e00db4ec18eb1352a6b490fc5",
      "Id": "7e5db5cf0fbd442f91af8c389a43938a",
      "IsHidden": "False"
    },
    {
      "Start": "620704115e3345279ca7138711b85688",
      "End": "e7a7a7ffc1634a87ae9fb90df7a22f7d",
      "Id": "9737df914f9f434eacc9b517aa225481",
      "IsHidden": "False"
    },
    {
      "Start": "8e50cb0718dd4c3cabf429c6dfd40a7f",
      "End": "3448d1b0c38b4c349aee38f1f85c91bd",
      "Id": "692569d111994880b11c42a11f1bb4f2",
      "IsHidden": "False"
    },
    {
      "Start": "a689f6af42c245a49b836cbc6b5230a2",
      "End": "47c8bebfb7b845b08afd002285ed9caa",
      "Id": "4cf881d36c984f1eb761f23ee22228c0",
      "IsHidden": "False"
    },
    {
      "Start": "9a21ec35d1ed4f73a7f3ba89d69144e5",
      "End": "c3d8f6da5caf4a13a326ddc469913e8d",
      "Id": "daf0b278693b44e6ae8166b3e86d5500",
      "IsHidden": "False"
    },
    {
      "Start": "f8ae605e58764e6c90221e8de759c4cb",
      "End": "c9603cefa20f46ef83c86436cf1fcc2a",
      "Id": "a90d0e511aae49caaf4526adbe070344",
      "IsHidden": "False"
    },
    {
      "Start": "0d04a748f50145a99130aeb20b232b17",
      "End": "721ee52af0674658b3d6d6d56f0ceaff",
      "Id": "72af57fcb3a244eb941525ee547d2046",
      "IsHidden": "False"
    },
    {
      "Start": "5fb0047242fa44d891133ba130473971",
      "End": "0e8f583278a04dd6a9455eaac2bbed4d",
      "Id": "a0afc4a5839848cebc63f389e9661147",
      "IsHidden": "False"
    },
    {
      "Start": "82e69c4721ac463e9d204c54009c1855",
      "End": "f31acf18adf34eec88fdbada2a16c1ea",
      "Id": "94c7c4d1dfd54164b96e86ec693caf3f",
      "IsHidden": "False"
    },
    {
      "Start": "3c8d3c8dc9eb49e0a9c76f98605f0704",
      "End": "e2ac11a3959847fe9f916a33750eb2d9",
      "Id": "a39451b592d84b08a2ff9c299e8f31ea",
      "IsHidden": "False"
    },
    {
      "Start": "67128b3c46e4488fb713bcaed401a5f6",
      "End": "a0de33c31a8a4f0e82a577d77d3d306c",
      "Id": "66fb43c373a94eb881ab6591968584fa",
      "IsHidden": "False"
    },
    {
      "Start": "81d0ab618adf494e86be37416774fbab",
      "End": "19b427dec1f94b8d81c657c2992595f6",
      "Id": "7f2f6974587e470a94d354274cb0986b",
      "IsHidden": "False"
    },
    {
      "Start": "e7c695ed8e5d4456ab1ac4b88311cc68",
      "End": "0bb0cab6923246aea5335464574f9e1a",
      "Id": "50e71565592e400383810d50d90421e6",
      "IsHidden": "False"
    },
    {
      "Start": "93b60ca9e1824496a831960455b8c1e5",
      "End": "2f72f5ca1ccd49e79ac32fc1a1c44df3",
      "Id": "bc66949cd7fa4f889455026328d69f65",
      "IsHidden": "False"
    },
    {
      "Start": "f6d83d59a6d74d8a802fbfd401aadbe0",
      "End": "ea7d895423a6440aa310f18689b64ff9",
      "Id": "d91d88d83ff14de8b6e047e9a852efa5",
      "IsHidden": "False"
    },
    {
      "Start": "f6d83d59a6d74d8a802fbfd401aadbe0",
      "End": "93b7c432fc8f4ce8b723a41ac961262a",
      "Id": "d8f71b0dc2734bf39fb0071be644182e",
      "IsHidden": "False"
    },
    {
      "Start": "f6d83d59a6d74d8a802fbfd401aadbe0",
      "End": "1c84cc38fc5446408ee8e04c09f49744",
      "Id": "1594396a70064007b29e15910b399da0",
      "IsHidden": "False"
    },
    {
      "Start": "f6d83d59a6d74d8a802fbfd401aadbe0",
      "End": "a0637a05d14147a89c9734343a9e4e86",
      "Id": "a22cef5a55a34bd4b258042d62f58c1a",
      "IsHidden": "False"
    },
    {
      "Start": "78fb356219e6457a8a35b40cb3f6e6c7",
      "End": "0f1e11f2e4904a5cac5be2a5743d2994",
      "Id": "8a0b1900696d4db2acf2f19cb08fcf39",
      "IsHidden": "False"
    },
    {
      "Start": "ef8c12b459bb452eb4a266ee90c2751c",
      "End": "1690d1063f85427cbf3c2afc924a17b1",
      "Id": "20bbbeb39d69475395d61b12550b8eac",
      "IsHidden": "False"
    },
    {
      "Start": "2c10a524ce9d4775bc050518c39d2ade",
      "End": "c933724f5be4478c91e2fdc5ba0294c1",
      "Id": "a14d53a37df943b0bd054a0f486a7967",
      "IsHidden": "False"
    },
    {
      "Start": "5fd8ddef0bed4bc38e053dcd67a1101c",
      "End": "aa14801628784a76bc5017a73c0c0d15",
      "Id": "eb4c4513928e44728adbf291788b0cb5",
      "IsHidden": "False"
    },
    {
      "Start": "91aa97fe7f2742a9ac0bb8fc70b1d81a",
      "End": "6930b4f174be469bb96435baa0b7986a",
      "Id": "8e85b31113154c848773760dec7978ba",
      "IsHidden": "False"
    },
    {
      "Start": "24a44bc644f649f6b99565b886e1ba1d",
      "End": "965b585ccb684a15bf55db48aa6115ac",
      "Id": "3b9fdf85061343058968b5db4e38bb64",
      "IsHidden": "False"
    },
    {
      "Start": "24a44bc644f649f6b99565b886e1ba1d",
      "End": "8bdc5e2a70c047bfa65e4b620ec5c127",
      "Id": "3e0c460db0cd42db9e812ab1c372f174",
      "IsHidden": "False"
    },
    {
      "Start": "c3ad1ab056fe4abfb7fea7f5a199b094",
      "End": "5a9c851b320b467b9056659e0367a351",
      "Id": "f75b53b51a4742c9a9007397afd507bb",
      "IsHidden": "False"
    },
    {
      "Start": "1015531945a04bb5927e1f0bf2a4409e",
      "End": "2daf324a0ecc4b71a5de2e29d6a2a29a",
      "Id": "a1ae754815e94bcdb692b80c9ee46fd5",
      "IsHidden": "False"
    },
    {
      "Start": "eaa000672bcf4de2972c80c2d9488447",
      "End": "dd60c672928b4ef1b393e4dc13b2bd03",
      "Id": "065cbb0ca1b0430a8eb76cf13fb66076",
      "IsHidden": "False"
    },
    {
      "Start": "eaa000672bcf4de2972c80c2d9488447",
      "End": "667882f761ac4cf58d4164f5c442d89b",
      "Id": "448524e5a00e46408d01221c9d865efe",
      "IsHidden": "False"
    },
    {
      "Start": "8303f430da4a4caa9984590da8b77d73",
      "End": "f199748c8016465ab1ac7c010bc68487",
      "Id": "384d3d843ba3447e8f246ef7d703b262",
      "IsHidden": "False"
    },
    {
      "Start": "abf9d0afe68d4852a42c4a06d5718109",
      "End": "1c877df5bc7849c1b23f453231be4553",
      "Id": "2586323ee41e4fd8beaa1071653c0a69",
      "IsHidden": "False"
    },
    {
      "Start": "584617d2cf12423986f133498c459244",
      "End": "198e60f8412244f9af2882c3209f6be2",
      "Id": "03b2387821f74009a27cc1e5ba87b981",
      "IsHidden": "False"
    },
    {
      "Start": "584617d2cf12423986f133498c459244",
      "End": "2e56310e7cef48cfad4cdd34a0f29c74",
      "Id": "8687802a95104d2f8029b43dc46c1bf6",
      "IsHidden": "False"
    },
    {
      "Start": "84d7ef63f2164d2198748c81d4a4cbfa",
      "End": "0da9a181609f471689cc48f53e8f6aeb",
      "Id": "ab93dbb6bcda451d9e9f6d94f895cbb5",
      "IsHidden": "False"
    },
    {
      "Start": "84d7ef63f2164d2198748c81d4a4cbfa",
      "End": "4362dae7cc004061bf1fd4f6780f0a04",
      "Id": "7afe3d73d74047bdbb87725e06ab1836",
      "IsHidden": "False"
    },
    {
      "Start": "78c90969450f45e88834a530a7eb140e",
      "End": "d445d4b8adf4488ab8fa353c58e336d6",
      "Id": "b6bea68554f24bdbbf65459d55e53206",
      "IsHidden": "False"
    },
    {
      "Start": "de60b6714b974a8d906faa09e01508f5",
      "End": "9b580e05d6fc4813b39c7a6adf6c9906",
      "Id": "5c082b1cf79b4e30a66af978f366aa96",
      "IsHidden": "False"
    },
    {
      "Start": "c556576b0a994d7c8e9f06825e62e931",
      "End": "f061024dc6a84a9cbcbf7e5fbcfe74a9",
      "Id": "e71e40cabb574dba89b34539163fcc2d",
      "IsHidden": "False"
    },
    {
      "Start": "2348091264394b7386125bd308056bd2",
      "End": "19f43e520c654b49a8d936beb9a35ac7",
      "Id": "047bc6664ca241e6a8ffbc9dc3e53eea",
      "IsHidden": "False"
    },
    {
      "Start": "25759c19316d46d2a22cf9c75b3c51a3",
      "End": "a4b3128482a84085bff4507ba1f01bc9",
      "Id": "7934c88f0144431a983dad4b971b6fcb",
      "IsHidden": "False"
    },
    {
      "Start": "15c9129f5a3a45138ce880f3aed8f4ff",
      "End": "f2616170e3eb45799fd9b7e85383dfec",
      "Id": "42fc2ae240c84aeea10122422da5661f",
      "IsHidden": "False"
    },
    {
      "Start": "735d9774c25c47ceafdfa1633fc35a9c",
      "End": "9da76f79fc4d4f0fb5937453eba5dead",
      "Id": "400851e8cd54455f80e481cc04d43812",
      "IsHidden": "False"
    },
    {
      "Start": "65327e6856064e25a2ce1074f908fe70",
      "End": "b87008ff5c5a4eaf8fb4def9a1c40e47",
      "Id": "402db3d570a44d5aaa9f0087ac6ce720",
      "IsHidden": "False"
    },
    {
      "Start": "363b33968d1342728a6f2de625a523cd",
      "End": "4bcfe8030ab04cf296832926f5879b49",
      "Id": "0059861bc2154dcb87815b76e5d490be",
      "IsHidden": "False"
    },
    {
      "Start": "f5a7dc77f0f44362b60985ecbd717811",
      "End": "e90ddbac489a47d0874475af4582ed0f",
      "Id": "27183f2a47c34a73a2b58efa1e0508a7",
      "IsHidden": "False"
    },
    {
      "Start": "1bb81df25a1649528e2fc74051a19ecc",
      "End": "188caea8ee24498c9d7fcfe275950270",
      "Id": "3c2ed6baffa54c229561d5658c5deda5",
      "IsHidden": "False"
    },
    {
      "Start": "4624a9f486664149b24f86578796f06d",
      "End": "1475c862e4124da6b200c4e289985903",
      "Id": "d684660b05794d5eb75eeded1d87b084",
      "IsHidden": "False"
    },
    {
      "Start": "b897b33458654eaf87fb6c0161f5d690",
      "End": "8a40ce2c274c4624834fc69afe9c2fe8",
      "Id": "184f51aa341743f787f1792c0611c7ff",
      "IsHidden": "False"
    },
    {
      "Start": "6e135f4bdf21464a885675cd9dc1ff5b",
      "End": "0bd233a6852f436d898688801594f8fa",
      "Id": "0f125404277a4e90bd15ed53e0d1645e",
      "IsHidden": "False"
    },
    {
      "Start": "9f96e54b1187441cb95f4f91a0755b32",
      "End": "1b943eb4f33f4d6ab4741b79d41380e7",
      "Id": "eb37d8e63ae9453693e99960e4adb628",
      "IsHidden": "False"
    },
    {
      "Start": "f12d7fe1d80448c094f2e00cb355627f",
      "End": "cfbd82681ec44fb0b9e6232978a9dd8a",
      "Id": "df8eb4cf96a148e082cd10b6cc3716cb",
      "IsHidden": "False"
    },
    {
      "Start": "298ada2a28014907b2b939f6cd0819be",
      "End": "a9efb67206f141989ed381c570db0ef5",
      "Id": "e47dd10f369747ecaeb071ab70aa7034",
      "IsHidden": "False"
    },
    {
      "Start": "223dcf37429c4a5da796243a057845e9",
      "End": "125b91f130564101bba1d5585ba5bf01",
      "Id": "1c3cdd0953bb4250b373ac3c63130fc8",
      "IsHidden": "False"
    },
    {
      "Start": "fe5fa4d1f2404fa5a890dc05cde93ab2",
      "End": "724179ceb65e4f39b2f2e904ba8ae950",
      "Id": "2cf5bc66e4b540d385fbe4e88bf13b49",
      "IsHidden": "False"
    },
    {
      "Start": "fa570d170aa34a5dbcb29214df8c5a05",
      "End": "527745a93e3a40a2a5c19ca16a8c2e82",
      "Id": "4e86366bde8c4919b4188afae455bd5f",
      "IsHidden": "False"
    },
    {
      "Start": "c0194625bc014baba092210f4754b917",
      "End": "c77fd210eca54ed0ae9f8f8689e8af61",
      "Id": "6742d466c7df4f259e28b95b0d0bcd4a",
      "IsHidden": "False"
    },
    {
      "Start": "444fdeaf2f004f64a5a5e1eed1e37c22",
      "End": "6d406d40753245b190958132727082ac",
      "Id": "acdc9df305094e878af253f1e41b317b",
      "IsHidden": "False"
    },
    {
      "Start": "444fdeaf2f004f64a5a5e1eed1e37c22",
      "End": "c935bc9676ac468b87aff697454d4452",
      "Id": "c5c1ca66983641088284093eedfb79af",
      "IsHidden": "False"
    },
    {
      "Start": "444fdeaf2f004f64a5a5e1eed1e37c22",
      "End": "d5e66af66d244bd197a35d71ffe53c57",
      "Id": "345463ef189549bebcc60ecf90f40816",
      "IsHidden": "False"
    },
    {
      "Start": "444fdeaf2f004f64a5a5e1eed1e37c22",
      "End": "514316897fe64f4b9e1532ff6ebbba1c",
      "Id": "3c0a93e8ba8a4791b45a457f3645a8ea",
      "IsHidden": "False"
    },
    {
      "Start": "638ed65993394e58840933882ee8717e",
      "End": "8c515e8469ef485bb1e13bd441171a1f",
      "Id": "1da4d4ae982d4aeb8cf8ed3bab7ce81c",
      "IsHidden": "False"
    },
    {
      "Start": "638ed65993394e58840933882ee8717e",
      "End": "6c3dbf19e7a44b69a763fab72fbe6620",
      "Id": "eed73af992e544ada079360246e742e1",
      "IsHidden": "False"
    },
    {
      "Start": "0233232574734ce29339f9ae3050ebf8",
      "End": "ed9f336e56564f5780a4848742ec9e23",
      "Id": "834fde06a1764ac288335a85ebe6606c",
      "IsHidden": "False"
    },
    {
      "Start": "0233232574734ce29339f9ae3050ebf8",
      "End": "b1f6d9ea6cea4f78a510f9bab1424f26",
      "Id": "ffb116fb34a7464c9d774478013be97d",
      "IsHidden": "False"
    },
    {
      "Start": "95e5d445b5dc4ac9bf2a882088f6630a",
      "End": "933c01c2a9e940c998d6079749824807",
      "Id": "55c27f1dfa5b4935a983005d7c8c5283",
      "IsHidden": "False"
    },
    {
      "Start": "f9c6e8094457491b9d67bfb7a4ca9906",
      "End": "fcb31d53de5d4513a4afede58b4a6d6a",
      "Id": "e46761c0d059412d9c61837fa31505b1",
      "IsHidden": "False"
    },
    {
      "Start": "84ca8f36154440e39e34bacbe5831699",
      "End": "49812f3e222a47f780dcfe7af460566a",
      "Id": "1059803aafb74c05a9be1e28bad96fe2",
      "IsHidden": "False"
    },
    {
      "Start": "b633246d62ae429e8b7ee85bb67b7a70",
      "End": "0ac4c9fa4c6449858302d1561b986934",
      "Id": "4e00a65683fe48718bfaf83e4c0ed5bc",
      "IsHidden": "False"
    },
    {
      "Start": "01624cb7b3f244cb944278903bb74cf3",
      "End": "176700abc286412291bab85f03d10729",
      "Id": "ce34506399e9466e99ab41324af61a07",
      "IsHidden": "False"
    },
    {
      "Start": "01624cb7b3f244cb944278903bb74cf3",
      "End": "24364852de0c46498f7a3a19fa207865",
      "Id": "aa9448dfc92b442fa5c6c8ab980550e0",
      "IsHidden": "False"
    },
    {
      "Start": "01624cb7b3f244cb944278903bb74cf3",
      "End": "f95406a6445d473a975db3b1345082dc",
      "Id": "0c00bdbc00ba46439b021f906c117e3d",
      "IsHidden": "False"
    },
    {
      "Start": "a1074510680842e595965c0235a52e36",
      "End": "eb1100a876fa47888a82d0d806e5f618",
      "Id": "0c21d2a5016944c2aa69129de37cff7e",
      "IsHidden": "False"
    },
    {
      "Start": "5d862fb88b7e4771b0144678280af474",
      "End": "d0dee0e284c24624afd089bcb39fabbd",
      "Id": "4ba1be6eb7fc48918338cf33261b8de4",
      "IsHidden": "False"
    },
    {
      "Start": "72129c0124614f4bac36d75263b85088",
      "End": "bb6937d980a1457390f4d0f6650b7905",
      "Id": "6d8f9e0c016d4bceb8879ce3402ab815",
      "IsHidden": "False"
    },
    {
      "Start": "f9968131bc5442f490c3facb4d3ffe61",
      "End": "e6a084328ef54a25b9215a2dd0884a1b",
      "Id": "fbfab03c87044389a078eb99c28af49c",
      "IsHidden": "False"
    },
    {
      "Start": "8e4183b19d154696a3c577270c97fa62",
      "End": "d72fb9f27beb45d88733d45708d4c1d1",
      "Id": "ae98bb1893134d07bb69fe695c1e0067",
      "IsHidden": "False"
    },
    {
      "Start": "9e73e5db0dad4152bd762e8decc21276",
      "End": "6a72caedb8604a249fd1b2e0f0659b36",
      "Id": "423c41ef42904ab380222b260f2632e4",
      "IsHidden": "False"
    },
    {
      "Start": "07861a4c3a4742178187943b04686c3d",
      "End": "915e7a2dc3ac4de685c0711afeb2ecca",
      "Id": "15656787f2ed4150884b91591ee49eea",
      "IsHidden": "False"
    },
    {
      "Start": "8558702e686f4a409002b8dab4c7d07f",
      "End": "4a7854063e204ada9ff58f688cde9315",
      "Id": "ed3e0206241e445387b29262ab3dd1b6",
      "IsHidden": "False"
    },
    {
      "Start": "fa5ece7479044da09b2565e0e9db9d31",
      "End": "1b7a54b026564fb3bd05879d89aec691",
      "Id": "33f4a15788af4e8ab6f03d0530d25144",
      "IsHidden": "False"
    },
    {
      "Start": "e0656fb1af56464cabd279d5e59c2bf0",
      "End": "bfd52ade190745409683179b21ba1694",
      "Id": "36b81163f59b43cb9f179661579b3e2d",
      "IsHidden": "False"
    },
    {
      "Start": "cde81e8decc148dbb8bf315bc0b7dee0",
      "End": "f40e6b60d16f4c7381a14c614ba65bad",
      "Id": "364511db11a44c18bcb0654be289ebbd",
      "IsHidden": "False"
    },
    {
      "Start": "5e31a2d73ae2468b81419a9b1e722a0c",
      "End": "3da36fb4295d457ab17313edf5d04536",
      "Id": "cfe1c3f6aeeb43efa718a13146d11be1",
      "IsHidden": "False"
    },
    {
      "Start": "38ed1e359e2244d390f33d7dbcac6f99",
      "End": "cffece21f8384b518f3b9b0edd7ca05c",
      "Id": "9e12cea8e6814db0b6a6660416e2b15c",
      "IsHidden": "False"
    },
    {
      "Start": "34e4586f6c874f7e8f34cad421768e45",
      "End": "ab361d35969841b992a2058761fcfa7d",
      "Id": "0331c95ac1ee4650a47413559f2949dd",
      "IsHidden": "False"
    },
    {
      "Start": "b4231c517ccb4bf9bedf63921dc83831",
      "End": "12652404ba144a53a11984e7f15c0252",
      "Id": "52467dc5a6d94deb90c7f00134d4fc42",
      "IsHidden": "False"
    },
    {
      "Start": "ab500b69c4ee46648dece92f0527aab5",
      "End": "ed23d0c1cce84a86950c596c8f44891f",
      "Id": "de53c35c410547db89293f1785c04bd1",
      "IsHidden": "False"
    },
    {
      "Start": "97727dd0efd44560b4ad272d91569065",
      "End": "1ddd303e233c40988b60951abf89e5d0",
      "Id": "8c4ef50f4e14447cb3270f7501836ad8",
      "IsHidden": "False"
    },
    {
      "Start": "8375597e8daa4c878d95dd18c8fec814",
      "End": "b892d16ef284477c80dd8617619df4a6",
      "Id": "918d371b205f40b2bec8396a7ef56291",
      "IsHidden": "False"
    },
    {
      "Start": "f078eddf71144d3f90787f8f7de14564",
      "End": "6b9bad56f6824a0b8e956f449008efa2",
      "Id": "0a7cf7dbf7344edca777c1171bb3cfc2",
      "IsHidden": "False"
    },
    {
      "Start": "4a5e2d56acfd4321a21de8f3138cfb12",
      "End": "57bdcc05c3cf4bf1a998b64de80345bf",
      "Id": "db4321ddf8ee49de95b23e006a356ff5",
      "IsHidden": "False"
    },
    {
      "Start": "4a5e2d56acfd4321a21de8f3138cfb12",
      "End": "03abaeb239dd43639f4bcd90832e9c32",
      "Id": "a4a4acdafb384045aa193cab10715a60",
      "IsHidden": "False"
    },
    {
      "Start": "4a5e2d56acfd4321a21de8f3138cfb12",
      "End": "4e356b624a01417ea052049ec1d66f1d",
      "Id": "c67a4de2b4f44350bb5d4d9bfa4fcf0a",
      "IsHidden": "False"
    },
    {
      "Start": "41d0798cc9ff44e9b3eb716c9ad2e8f2",
      "End": "7bf9f9c7adb148e8b14a5c6c11a1eb6c",
      "Id": "641fd33206bb4549a691cef2e6d7b848",
      "IsHidden": "False"
    },
    {
      "Start": "b09e7e2a1a7340fda066eae19bf44c99",
      "End": "40e9acbce6324575b5e7c471dacb7ade",
      "Id": "2262bb25bb4b4f36a9cf007a65e4f392",
      "IsHidden": "False"
    },
    {
      "Start": "78b273e91c9d42ccbbb698243557fd98",
      "End": "4e0b3ff5837646ae8327c569684f068f",
      "Id": "10720f86eab04e51a446456f6e69b862",
      "IsHidden": "False"
    },
    {
      "Start": "ec509a8e6fd445f08c7bfaf535ce32db",
      "End": "74e4cff15bef41069f3134127a57ec1c",
      "Id": "cbcb117bdbb84c58813bbbc8f141ca7a",
      "IsHidden": "False"
    },
    {
      "Start": "c1f64d5344bf41ad847999760df5491f",
      "End": "d27475135a4443548f257a5b314a1274",
      "Id": "4dfefd5bcc694554ae8a3582be567fb7",
      "IsHidden": "False"
    },
    {
      "Start": "8890808d88e34d2ba2fd114819845dba",
      "End": "9dc66cda7ae147e59923264b5c6be24b",
      "Id": "cbe56af708984daeb5749b5193cc60ab",
      "IsHidden": "False"
    },
    {
      "Start": "b6d0fc5427104e03ae79f8bf77b92566",
      "End": "039229daeeb346b7afc4bc5837d7f074",
      "Id": "fa57ed1558a747d6b64cd98b633e1543",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "None provided",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.17.0.3472",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": -34.370481555537935,
      "EyeY": 42.818021685166094,
      "EyeZ": 133.95732751843335,
      "LookX": 29.370481555537935,
      "LookY": -31.818021685166094,
      "LookZ": -141.95732751843335,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Parameter.ParameterByName",
        "ShowGeometry": true,
        "Id": "a8f75e58d91a4d4a9af1d6eb94ebd53c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 525.62552202081542,
        "Y": -26.214708124027482
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ee0d65753f38412191d8b9460e9d5bfa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 292.38470627686229,
        "Y": 200.08204347789479
      },
      {
        "Name": "String from Object",
        "ShowGeometry": true,
        "Id": "213a5e6a822f46f98abc0437aa7f0617",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 822.88470627686229,
        "Y": 121.58204347789479
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "92e6fb4303114e60a4b4e399b0bf927f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1051.8847062768623,
        "Y": 152.58204347789479
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "45565bef9d85461d885db41ac387b126",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 851.78420782999092,
        "Y": 274.21445470948811
      },
      {
        "Name": "List.Contains",
        "ShowGeometry": true,
        "Id": "d7154c72536e47bc8f27897c22ad9c26",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2030.7292752823555,
        "Y": 94.654969308866612
      },
      {
        "Name": "List.DropEveryNthItem",
        "ShowGeometry": true,
        "Id": "c23355bfce2a41948bbd84133a828315",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1383.1601957245416,
        "Y": 310.36197884771207
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0f1358c884404a77bda45ddb3e65f8f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1169.3847062768623,
        "Y": 387.08204347789479
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "775f9493189949858815833478c709c4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1149.3847062768623,
        "Y": 533.08204347789479
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "0101bc3c67b84625a152e9ad40bc87fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1644.8927461256972,
        "Y": 303.28067243356907
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "a91275344f7a4edaabddcc0ebd3d6679",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1532.2782285846038,
        "Y": 791.67626582026332
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "d7f2d971279a4f75a5cee892cebf43de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2584.0787182238405,
        "Y": 539.03217235737679
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "48c5d6103f36443cb38796b668f07c07",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2134.0060125752429,
        "Y": -32.896595062508595
      },
      {
        "Name": "List.Contains",
        "ShowGeometry": true,
        "Id": "88a63d4a77914f099d77106cdd68c262",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2331.437260788261,
        "Y": 71.529850273302259
      },
      {
        "Name": "Element.SetParameterByName",
        "ShowGeometry": true,
        "Id": "ca30de3cc06246bfa0b85471203aead1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6695.6963961315705,
        "Y": 1668.663920398767
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "3549a48d067145a58522feed12901f02",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2880.9422647655419,
        "Y": 582.56578441771876
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7d20038480664ca9a7b82da92a3f307c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3351.9791665617349,
        "Y": 964.0395981618077
      },
      {
        "Name": "Parameter.ParameterByName",
        "ShowGeometry": true,
        "Id": "08d14afadd914c7f9aa571137a833485",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3479.9869363016037,
        "Y": 1178.0978473115656
      },
      {
        "Name": "List.DropEveryNthItem",
        "ShowGeometry": true,
        "Id": "51a813187854475d9bc9625fe2118a49",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4286.0937672722539,
        "Y": 1458.4887640232414
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "30d4e047effe49069fff725834fc4c2b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4072.3182778245732,
        "Y": 1535.2088286534245
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e9241d71849a47798e24a5504b12abb1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4052.3182778245732,
        "Y": 1681.2088286534245
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "dbc85df11fdf49eb8607cb1ab2fa1eee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3954.8182778245732,
        "Y": 1300.7088286534245
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "84fbbfa659d94afcbe5e493e67384900",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3798.0052941816816,
        "Y": 1452.0998104176483
      },
      {
        "Name": "String from Object",
        "ShowGeometry": true,
        "Id": "a042f6a996ac42a6a8cfcda2f10c2c5a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3782.0530865628093,
        "Y": 1162.5849476890444
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "77361572be4e4dd29d38b03b45c9d8ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4628.1805369737594,
        "Y": 1476.3491646536024
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "54cd4c89cab34ee6b4e60ea91216e5aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5114.6089916348492,
        "Y": 3536.8866750050065
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4fb6bed1a7684175a6e15de5a24ce97b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5416.0731448417655,
        "Y": 3663.2694264663328
      },
      {
        "Name": "<",
        "ShowGeometry": true,
        "Id": "143dc36a3a214b43a56ab8113c74157c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5411.5165924495859,
        "Y": 3382.78076063477
      },
      {
        "Name": ">",
        "ShowGeometry": true,
        "Id": "cf6da6a0ff474127b035281b9cf35685",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5548.1847785761465,
        "Y": 3610.4108482841739
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "4f9b501c0d984a789b29670727ee9ec8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5581.1039636893865,
        "Y": 3232.0222772287248
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "0b3187a1ac8541b4bfe4a3ddee905a9d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5827.221060588774,
        "Y": 3193.2520769819739
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "a07022598c1542678478a23e68357402",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5790.8212399840158,
        "Y": 3511.051162868142
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0fa128410b4e4f17bdac1f53f44a56f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5839.323575614726,
        "Y": 3008.6798589893178
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ca5cb2ad54174401bc86dfa5b5f83f25",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6094.983680522646,
        "Y": 3673.6392175282149
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "199904c4c93649408ce2f4e73ff91f63",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6076.5170703257263,
        "Y": 2934.6491144621268
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "3b30abf7d062411d9df89c569507144b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6343.8990333128258,
        "Y": 3311.9057657492426
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "f68fe1b76cdb42e186d3d24fefea421d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6583.3314817981709,
        "Y": 3314.7457168679707
      },
      {
        "Name": "+",
        "ShowGeometry": true,
        "Id": "da921f5ebeb94834a06eb972e22b313f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4978.6804299083215,
        "Y": 3325.13113207878
      },
      {
        "Name": "Element.SetParameterByName",
        "ShowGeometry": true,
        "Id": "52747af44249478b842034a60ceb4074",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7791.5072082300667,
        "Y": 1467.3600923953852
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6f36420c52ee450bb0963c61fb7df3bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5770.8503684515263,
        "Y": 1942.4214801615303
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "209e9400244b4130911c085d5dd43374",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6082.0034432751963,
        "Y": 1431.8999208963578
      },
      {
        "Name": "Math.Ceiling",
        "ShowGeometry": true,
        "Id": "38c422c206104e88ba7465c9953c914a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5755.0094211752748,
        "Y": 2187.0677939288248
      },
      {
        "Name": "String.ToNumber",
        "ShowGeometry": true,
        "Id": "9a48bfef1198479690af6b02af846ebf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4824.5712609594038,
        "Y": 3515.9289903510407
      },
      {
        "Name": "+",
        "ShowGeometry": true,
        "Id": "b4a888937ff1439b93012636d23e931d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 719.42166906908494,
        "Y": -560.17319931693225
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "a1c0c737896d4698bed4c7edcd9a6e85",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -16.984509573356263,
        "Y": 277.63238625843303
      },
      {
        "Name": "Category.ByName",
        "ShowGeometry": true,
        "Id": "a86e73135a9f4dc38bcf8d599ddb42e5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -251.5999929095027,
        "Y": 280.48904083077707
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "81ddf3270306488085ca1063d397b8f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -480.9067465440354,
        "Y": 274.94532408060707
      },
      {
        "Name": "check for special symbol",
        "ShowGeometry": true,
        "Id": "1291e6fca27f48a38bb4b4c95c41be8d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1935.5996898090334,
        "Y": -330.80211951388696
      },
      {
        "Name": "beginning",
        "ShowGeometry": true,
        "Id": "6624986042464699a14d1aaec5e0a2f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5320.8712006189562,
        "Y": 1836.53695750222
      },
      {
        "Name": "end",
        "ShowGeometry": true,
        "Id": "4e90d1351fca4100b1fff2a9a2679d4f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5395.6774413886942,
        "Y": 2030.4234647935159
      },
      {
        "Name": "check for special symbol",
        "ShowGeometry": true,
        "Id": "fe4b726de18143f0b37a1179854fde97",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5827.1822199072367,
        "Y": 3861.5313175442634
      },
      {
        "Name": "beginning",
        "ShowGeometry": true,
        "Id": "b3bb13793f014b1a9f49d72ddbdfaf53",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4299.0641075861486,
        "Y": 3051.4126879272667
      },
      {
        "Name": "end",
        "ShowGeometry": true,
        "Id": "41b118721b034772bc514b160ef6a73a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4252.7340224756226,
        "Y": 3214.8392679372978
      },
      {
        "Name": "*",
        "ShowGeometry": true,
        "Id": "18cf71fcf3d347e489e01de0516beafc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5530.3377262997874,
        "Y": 2186.989249948072
      },
      {
        "Name": "Math.Rand",
        "ShowGeometry": true,
        "Id": "8c4900be09f045b9a3d6e736c59d2c2b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5283.1777143623158,
        "Y": 2165.6542081424327
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d673ee9af5a24b299372885827149fd5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5300.8437714047914,
        "Y": 2333.1707683175259
      },
      {
        "Name": "sorted",
        "ShowGeometry": true,
        "Id": "09307fff7f544b03a087f5928608ea95",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1344.0516573057073,
        "Y": 725.40560049159092
      },
      {
        "Name": "sorted",
        "ShowGeometry": true,
        "Id": "6cd854a196c0499892a2fc48be5638ad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1934.1435395778033,
        "Y": 400.10285452374296
      },
      {
        "Name": "end",
        "ShowGeometry": true,
        "Id": "de88edc491aa47218daebe0ca371001e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 285.039435063101,
        "Y": -779.168721602236
      },
      {
        "Name": "beginning",
        "ShowGeometry": true,
        "Id": "015c45b31eaf4010928203de80fc726a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 278.91716591255204,
        "Y": -995.931964971887
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "1669f9b3a72b45f0a265abb8ab8c2458",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2319.10839355674,
        "Y": -397.613600479194
      },
      {
        "Name": ">",
        "ShowGeometry": true,
        "Id": "e4e55e2d57c14c5d9ea395ba9f58eb8d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1772.30949161024,
        "Y": -460.841969723235
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "95e3bc8549bb4a4dbebb1e23d80cd1b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1547.32576975186,
        "Y": -323.01531091699087
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "e9cdb55d972146879c7384da34296897",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2014.9459530181102,
        "Y": -560.201655139267
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "338729ba16bd4aa89f9c48fd6b9584ea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2036.3472112097902,
        "Y": -834.879874087836
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "d0bd21f36b81427aa92234c580753099",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1805.22867672348,
        "Y": -839.230540778684
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9d987a1991b34079b951c7112f37a5dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1467.50452315849,
        "Y": -581.636443460591
      },
      {
        "Name": "<",
        "ShowGeometry": true,
        "Id": "68fd60c16279423cb25bb96a16ab5e21",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1635.64130548368,
        "Y": -688.472057372639
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "163ca73c140648c583bec406df457aa7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2555.35146290095,
        "Y": -770.867309936324
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "fbc586647c3643a6a4ea80267e6835e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2787.3326829740818,
        "Y": -770.23722893869581
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "013475db2f9e4d72ac0934c59ce1a899",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2090.13769530492,
        "Y": -1078.68722413752
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "dbb0137e9a4649ab9f7f75518e7ee0ad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2300.64178335982,
        "Y": -1136.60370354529
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e03d6565155c432fb75cc3ec6a0389e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 982.780953599907,
        "Y": -537.65962132983
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a7ae63e4c2d24afb97ba8e43e5067a20",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1165.39155113008,
        "Y": -751.921621506514
      },
      {
        "Name": "flatten",
        "ShowGeometry": true,
        "Id": "dce8a7e32b3146a5b32b3a350960a5e7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 785.49047054590528,
        "Y": -772.25069570954088
      },
      {
        "Name": "flatten",
        "ShowGeometry": true,
        "Id": "3b58293bdcc44efaa3751bf8971b8fbb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 792.09194847818,
        "Y": -986.99642123043714
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "748418b26f544832b552a580d1a041f7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5548.8007645854568,
        "Y": 1852.8295947966942
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6ee95d2ba4724875816d62e2fbbc0ee8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1787.286517009652,
        "Y": 250.55714135852713
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "98d8255f16f44d8b8f49cc5e06092556",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1763.4405738063322,
        "Y": 340.65811098925406
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "efad6f71678d4b5bb52b16686afd08c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1810.2715263066921,
        "Y": 422.06956993808808
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "4ce976916be04773b925ca8490918ae0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1334.9234119962421,
        "Y": -309.92336531861588
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9000b71502514e86bb826175b94b84b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1836.742778621272,
        "Y": 66.534209628270219
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6b69288f430c478ab4833f175b560528",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2143.848708485802,
        "Y": 161.12500272539228
      },
      {
        "Name": "is Number",
        "ShowGeometry": true,
        "Id": "9316b23d1b944f57b3eeb1d5a65824a7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1736.4701110942922,
        "Y": -88.853953250487848
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "0de3feba15964a818c707f86fb729874",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2843.9056020708422,
        "Y": -1072.8874598053919
      },
      {
        "Name": "is Number",
        "ShowGeometry": true,
        "Id": "12cdc4b32d2a429c97530bb3fecd5591",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3101.4118112929023,
        "Y": -968.71178015361284
      },
      {
        "Name": "input name",
        "ShowGeometry": true,
        "Id": "7e8eb55b98dd4b19ac9a0aca77236dc0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3166.587388197122,
        "Y": -1266.7117801536128
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "99027473275744d790cd3893e959a755",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2912.5866016614123,
        "Y": -674.752087600082
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b4cb4cb4c3024912a92868382313a5e5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2499.7964092985821,
        "Y": -835.38290898445575
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a6b668532bb24a3599384813f1159818",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2146.6037085088719,
        "Y": -207.84627794544804
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e3d0ebad06bc456bafabc448442830c6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2196.1764672736522,
        "Y": -324.75222415324583
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "02616909c26548d88269ce06acd3a800",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2115.5996201374319,
        "Y": -468.30184288258693
      },
      {
        "Name": "input name",
        "ShowGeometry": true,
        "Id": "9d311e814e29478a85b4e1a99d30fb9f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3149.695077439842,
        "Y": -246.07927776633687
      },
      {
        "Name": "is Number",
        "ShowGeometry": true,
        "Id": "39202a6bb0db4a9397cf2be9ce05fc52",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3084.5195005356222,
        "Y": 51.920722233662218
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "05a680db2e62438ba58d2a67dcc4b2dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2827.0132913135621,
        "Y": -52.254957418116646
      },
      {
        "Name": "default text",
        "ShowGeometry": true,
        "Id": "e5817798e55541b9b53f8f0bf169066c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3287.5507863387525,
        "Y": -1111.6821005595023
      },
      {
        "Name": "is Number",
        "ShowGeometry": true,
        "Id": "a17d80e94600430081446cad3c32ebe5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3160.0150207990123,
        "Y": -472.31795462482182
      },
      {
        "Name": "default text",
        "ShowGeometry": true,
        "Id": "c0ed021ed1cc4c02a489a0d112e53676",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3450.817177508472,
        "Y": -636.81713828113129
      },
      {
        "Name": "input name",
        "ShowGeometry": true,
        "Id": "9c9897000f0e4d898e84c6fb7f7a84a6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3225.190597703232,
        "Y": -770.31795462482182
      },
      {
        "Name": "default text",
        "ShowGeometry": true,
        "Id": "b6cb548eeea14fb7919a916439acd8f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3375.321657245082,
        "Y": -112.57846142264771
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ab58fe4876444ec493369b408406df57",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1079.6439666925376,
        "Y": -337.32335018043682
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "cf31193561ad4d929e200d18ed29228b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1069.7689976510767,
        "Y": -175.2391456573389
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4b4a7f3be3ee424896e301cd13482d0e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1092.0,
        "Y": 53.0
      },
      {
        "Name": "String.ToNumber",
        "ShowGeometry": true,
        "Id": "812509283b62452ab28d730bde07efeb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -814.79418067233973,
        "Y": -174.22383986294307
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "434c4dc757514ab79bd7684f856dd750",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4979.9369280740157,
        "Y": 2050.6229228250177
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7ca697d1f4064ff0a359bf5b318183b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4786.61216924614,
        "Y": 2179.8377329212394
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "c7472a7458cd43aea0462a8218b3c445",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3909.6085127361234,
        "Y": 3183.2520764896608
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "410483ff10534847a6e45a6689b4e5f1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3696.3239736432497,
        "Y": 3259.6321741197216
      }
    ],
    "Annotations": [
      {
        "Id": "01e98cc1abde419aa77d3a7e071a938b",
        "Title": "Filter existing sheets to find required",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "a8f75e58d91a4d4a9af1d6eb94ebd53c",
          "ee0d65753f38412191d8b9460e9d5bfa",
          "213a5e6a822f46f98abc0437aa7f0617",
          "92e6fb4303114e60a4b4e399b0bf927f",
          "45565bef9d85461d885db41ac387b126",
          "d7154c72536e47bc8f27897c22ad9c26",
          "c23355bfce2a41948bbd84133a828315",
          "0f1358c884404a77bda45ddb3e65f8f2",
          "775f9493189949858815833478c709c4",
          "0101bc3c67b84625a152e9ad40bc87fe",
          "a91275344f7a4edaabddcc0ebd3d6679",
          "d7f2d971279a4f75a5cee892cebf43de",
          "48c5d6103f36443cb38796b668f07c07",
          "88a63d4a77914f099d77106cdd68c262",
          "3549a48d067145a58522feed12901f02",
          "6cd854a196c0499892a2fc48be5638ad"
        ],
        "HasNestedGroups": false,
        "Left": 282.38470627686229,
        "Top": -105.8965950625086,
        "Width": 2885.5575584886797,
        "Height": 1195.5728608827719,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -32.896595062508595,
        "InitialHeight": 969.57286088277192,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "812146c6c67b4b98b072d365fa350295",
        "Title": "getting sheets numbers",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7d20038480664ca9a7b82da92a3f307c",
          "08d14afadd914c7f9aa571137a833485",
          "51a813187854475d9bc9625fe2118a49",
          "30d4e047effe49069fff725834fc4c2b",
          "e9241d71849a47798e24a5504b12abb1",
          "dbc85df11fdf49eb8607cb1ab2fa1eee",
          "84fbbfa659d94afcbe5e493e67384900",
          "a042f6a996ac42a6a8cfcda2f10c2c5a",
          "77361572be4e4dd29d38b03b45c9d8ce"
        ],
        "HasNestedGroups": false,
        "Left": 3341.9791665617349,
        "Top": 891.0395981618077,
        "Width": 1491.2013704120245,
        "Height": 922.16923049161676,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 964.0395981618077,
        "InitialHeight": 862.16923049161676,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "9014dc8d6fee4ecb8a338483d92349b9",
        "Title": "fake rename to avoid error",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "ca30de3cc06246bfa0b85471203aead1"
        ],
        "HasNestedGroups": false,
        "Left": 6685.6963961315705,
        "Top": 1552.663920398767,
        "Width": 323.0,
        "Height": 313.0,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 1668.663920398767,
        "InitialHeight": 145.0,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "6b7036309f944593bc6b840818ae1a4c",
        "Title": "+x random  in the same order",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "6f36420c52ee450bb0963c61fb7df3bb",
          "38c422c206104e88ba7465c9953c914a",
          "6624986042464699a14d1aaec5e0a2f2",
          "4e90d1351fca4100b1fff2a9a2679d4f",
          "748418b26f544832b552a580d1a041f7"
        ],
        "HasNestedGroups": false,
        "Left": 5310.8712006189562,
        "Top": 1763.53695750222,
        "Width": 715.97916783257,
        "Height": 555.53083642660476,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 1836.53695750222,
        "InitialHeight": 495.53083642660476,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "5dc84ccb2ad24297932407ed78a87eee",
        "Title": "+/- number in the same order",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "54cd4c89cab34ee6b4e60ea91216e5aa",
          "4fb6bed1a7684175a6e15de5a24ce97b",
          "143dc36a3a214b43a56ab8113c74157c",
          "cf6da6a0ff474127b035281b9cf35685",
          "4f9b501c0d984a789b29670727ee9ec8",
          "0b3187a1ac8541b4bfe4a3ddee905a9d",
          "a07022598c1542678478a23e68357402",
          "0fa128410b4e4f17bdac1f53f44a56f4",
          "ca5cb2ad54174401bc86dfa5b5f83f25",
          "199904c4c93649408ce2f4e73ff91f63",
          "3b30abf7d062411d9df89c569507144b",
          "f68fe1b76cdb42e186d3d24fefea421d",
          "da921f5ebeb94834a06eb972e22b313f",
          "9a48bfef1198479690af6b02af846ebf",
          "fe4b726de18143f0b37a1179854fde97",
          "b3bb13793f014b1a9f49d72ddbdfaf53",
          "41b118721b034772bc514b160ef6a73a"
        ],
        "HasNestedGroups": false,
        "Left": 4242.7340224756226,
        "Top": 2861.6491144621268,
        "Width": 2545.5974593225483,
        "Height": 1131.8822030821366,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 2934.6491144621268,
        "InitialHeight": 1071.8822030821366,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "146dac50ae2843b9a3fb16f19e5c9f46",
        "Title": "generating list required to rename",
        "DescriptionText": "",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "a7ae63e4c2d24afb97ba8e43e5067a20",
          "e03d6565155c432fb75cc3ec6a0389e3",
          "dbb0137e9a4649ab9f7f75518e7ee0ad",
          "013475db2f9e4d72ac0934c59ce1a899",
          "fbc586647c3643a6a4ea80267e6835e8",
          "163ca73c140648c583bec406df457aa7",
          "68fd60c16279423cb25bb96a16ab5e21",
          "9d987a1991b34079b951c7112f37a5dc",
          "d0bd21f36b81427aa92234c580753099",
          "338729ba16bd4aa89f9c48fd6b9584ea",
          "e9cdb55d972146879c7384da34296897",
          "95e3bc8549bb4a4dbebb1e23d80cd1b1",
          "e4e55e2d57c14c5d9ea395ba9f58eb8d",
          "1669f9b3a72b45f0a265abb8ab8c2458",
          "015c45b31eaf4010928203de80fc726a",
          "de88edc491aa47218daebe0ca371001e",
          "dce8a7e32b3146a5b32b3a350960a5e7",
          "3b58293bdcc44efaa3751bf8971b8fbb"
        ],
        "HasNestedGroups": false,
        "Left": 268.91716591255204,
        "Top": -1209.60370354529,
        "Width": 2723.4155170615295,
        "Height": 1018.5883926282992,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -1136.60370354529,
        "InitialHeight": 958.58839262829918,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -4251.7948400734249,
    "Y": -857.32785821098719,
    "Zoom": 0.68009124046775771
  }
}