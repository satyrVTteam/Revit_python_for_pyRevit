{
  "Uuid": "e223811e-01cd-453b-9116-f9ed97376dc7",
  "IsCustomNode": false,
  "Description": null,
  "Name": "SiteVision CSV to control points_script",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportCSV@string,bool",
      "Id": "c84fabc69f604392bc4e752a4d0b0a8f",
      "Inputs": [
        {
          "Id": "8280adf1026042b48eb903d7dbb76e08",
          "Name": "filePath",
          "Description": "CSV file to be converted into a list\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "58ce19b98c2d48918ab22c0387f31e3d",
          "Name": "transpose",
          "Description": "Toggle to transpose the imported data\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "48e6a5a09b714c60948da21d7eae6e19",
          "Name": "list",
          "Description": "List containing the items in the CSV file",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Imports data from a CSV (comma separated values) file, put the items into a list and transpose it if needed.\n\nData.ImportCSV (filePath: string, transpose: bool = false): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "pts = IN[0]\r\nflip = IN[1]\r\noutp = []\r\nlocal = IN[2]\r\nlocalh = IN[3]\r\nunits = IN[0][30][1:]\r\n\r\nxx = pts[11]\r\nyy = pts[10]\r\nzz = pts[12]\r\nxmin=0\r\nymin=0\r\nzmin=0\r\nx = []\r\ny = []\r\nz = []\r\n\r\nif localh:\r\n\tzzz = []\r\n\tfor i in range(len(pts[0])-1):\r\n\t\tzzz.append(zz[i+1])\r\n\t\tzmin = min(zzz)\r\n\t\t\r\n\tfor i in range(len(pts[0])-1):\r\n\t\tz.append(zz[i+1]-zmin)\r\n\r\nelse:\r\n\tz = zz[1:]\r\n\r\n\r\n\r\nif local:\r\n\txxx = []\r\n\tyyy = []\r\n\t\r\n\tfor i in range(len(pts[0])-1):\r\n\t\txxx.append(xx[i+1])\r\n\t\tyyy.append(yy[i+1])\r\n\t\txmin = min(xxx)\r\n\t\tymin = min(yyy)\r\n\t\t\r\n\tfor i in range(len(pts[0])-1):\r\n\t\tx.append(xx[i+1]-xmin)\r\n\t\ty.append(yy[i+1]-ymin)\t\r\n\r\nelse:\r\n\tx = xx[1:]\r\n\ty = yy[1:]\r\n\r\n\r\n\r\nfor i in range(len(pts[0])-1):\t\r\n\r\n\tif units[i] == \"Meters\":\r\n\t\tum = 1\r\n\telse:\r\n\t\tum = 0.3048\r\n\t\t\r\n\tif flip:\r\n\t\toutp.append(str(x[i]*um) + \",\" + str(y[i]*um) + \",\" + str(z[i]*um))\r\n\telse:\r\n\t\toutp.append(str(y[i]*um) + \",\" + str(x[i]*um) + \",\" + str(z[i]*um))\r\n\t\t\r\n\tum = 0\r\n\r\nOUT = outp,xmin*um,ymin*um,zmin*um",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "5877719c35cc4a798ea1e546e76f9e67",
      "Inputs": [
        {
          "Id": "737616e67810445f9d7c25764a80038f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b41ea3a053184a47aae2cebe817cf232",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "903cb4997a3d4910b8edede924d18464",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "309a54ae66714fdd90582c2fbe4b3040",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7ed82a137c454e829bc1b7e184fd50c9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "b1aeea3311ca42aab64494800e8f0e35",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ec509f02eb1e4f0a980d9d438001006c",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\npt = []\r\np = IN[0]\r\nsw = IN[4]\r\n\r\nfor i in range(len(p)):\r\n\tx = float(p[i].split(\",\")[0])\r\n\ty = float(p[i].split(\",\")[1])\r\n\tz = float(p[i].split(\",\")[2])\r\n\r\n\tif sw:\r\n\t\tpt.append(Point.ByCoordinates(x-IN[1],y-IN[2],z-IN[3]))\r\n\telse:\r\n\t\tpt.append(Point.ByCoordinates(x,y,z))\r\n\t\r\nOUT = pt",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "d027948b833541c191f0c3eda1870ee4",
      "Inputs": [
        {
          "Id": "82f8834c4da3420fa08a2b241749c1e3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "03e87b0db79c4ce3a13e404fba9f2524",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "472e065d3ab343e4a5a4ce4684dcef1b",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cc04c7f2e575415cadf43e4d9b9fae6a",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4cbed0955dec4bbf9066a916b03d9552",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "099008b2cdcb4f688777bf1482570b79",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "95b1d7bd97a0404abe3256032932c253",
      "Inputs": [
        {
          "Id": "2992d17865ab4f93bc5ec7a6a83b06a4",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aa82a5640b504fbca71150c8ad4c4270",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nOUT = IN[0][3][1:]",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "7fc028f20e8c47488ef5f1f02ef9feaa",
      "Inputs": [
        {
          "Id": "de46126b04c843448781a311ead5adaf",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "97d0f245bd7e4f349f6e4e27757dd1ca",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e358610788fb4b43971ba895df10277a",
      "Inputs": [
        {
          "Id": "82f7d5e73d49485b82762c87d40fe696",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7912c615cfdd4570b991a1dd0ad59c17",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "codenames = IN[0]\r\nallcodes = IN[1]\r\npoints = IN[2]\r\ncodefilter = IN[3]\r\n\r\noutput = []\r\nnewoutput = []\r\n\r\n\r\nfor j in range(len(codenames)):\r\n\toutput.append([])\r\n\tfor i in range(len(points)):\r\n\t\tif allcodes[i]==codenames[j]:\r\n\t\t\toutput[j].append(points[i])\r\n\r\n#OUT = output\r\n\r\nif codefilter:\r\n\tif \",\" in codefilter:\r\n\t\tnewcode = codefilter.split(\", \")\r\n\t\tfor i in newcode:\r\n\t\t\tfor j in range(len(codenames)):\r\n\t\t\t\tif i == codenames[j]:\r\n\t\t\t\t\tnewoutput.append(output[j])\t\t\r\n\t\tOUT = [i for sublist in newoutput for i in sublist]\r\n\t\t\r\n\telse:\r\n\t\tfor j in range(len(codenames)):\r\n\t\t\tif codefilter == codenames[j]:\r\n\t\t\t\tOUT = output[j]\r\n\t\t\t\t\r\n\t\t\t\r\nelse: OUT = output",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "c24efc2935a541a794e90360d41616cb",
      "Inputs": [
        {
          "Id": "ef90abbf35fa48df97d33862bd364e98",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c0a7c185f0df41288afbfa8c611bc814",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f1c1678918814c32a908c400945b1c2c",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d30c5fef0db04cd9a2ac931361465c30",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "78a85e98638249228f6395222eca962b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "",
      "Id": "e6fbf54f668242b58e1ce62da3e32fc7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f443b4dd16d643bcb58d348f1c5a9a14",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"leave blank for no filter\";\n\"'road, lamp, tree' for add multiple\";",
      "Id": "f6f0cb46bd9f476c84dc37553687d78f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b0fc29096ca04d81b3b422e0370eb921",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2e7787723bce41399e16c8cb0628da6a",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.ByPoint@Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Point",
      "Id": "91e0bff1683847ad8cf76f5373cec576",
      "Inputs": [
        {
          "Id": "e01ed15705244474b66171d33e202a0d",
          "Name": "familyType",
          "Description": "Family Type. Also called Family Symbol.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7959b2235ab641fc8fc6a30ed264c24a",
          "Name": "point",
          "Description": "Point in meters.\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6556749e04f74ab09ace02631e3bdc3b",
          "Name": "FamilyInstance",
          "Description": "FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Place a Revit FamilyInstance given the FamilyType (also known as the FamilySymbol in the Revit API) and its coordinates in world space\n\nFamilyInstance.ByPoint (familyType: FamilyType, point: Point): FamilyInstance"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "7c019b8b9c344f43b03779016a04cded",
      "Inputs": [
        {
          "Id": "fd31624650854514bd12ce6cbe4ae283",
          "Name": "name",
          "Description": "The name of the FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2a1c8a2b1e4c4eec8c27719497aa512a",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Select a FamilyType given it's name. This method will return the first FamilyType it finds if there are two or more FamilyTypes with the same name.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "controlp",
      "Id": "c391607d79564aed86e57a8a4c5e436d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2caaf87e96a442cebce5e97aa693524f",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\np = IN[0]\r\ny = []\r\n\r\nfor i in p:\r\n\ty.append(Point.ByCoordinates(round(i.X*1000),round(i.Y*1000),round(i.Z*1000)))\r\n\r\nOUT = y",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "af5ca01093c747aeb44ecde9b0d63157",
      "Inputs": [
        {
          "Id": "8cbf42637e08460d91146d37a918dadd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9dea3be365944fe9b736563c1c953128",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "x = IN[0]\r\npos = IN[1]\r\n\r\noutp = []\r\n\r\nif IN[0]:\r\n    for j in range(len(x)):\r\n        if j not in pos: outp.append(x[j])\r\n\r\nOUT = outp",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "5e3756254b654b77afefd056ead64d22",
      "Inputs": [
        {
          "Id": "7927fae05d5141a8b560bc6f20a316fe",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cce8e0fa2a0943f1bbf488ace445ce9b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "311d76781a7f433892e7610463abf1bc",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[];",
      "Id": "887cf07403964d3f987b5b6a840ea57f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "32f7899daea043ec9a698b195e238d56",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "1ba86d31a511470ba1027688c4f90a3c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cf259867a94a47b5b7c1553c9dc88876",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"click on list to see numbers in preview\";",
      "Id": "41148ec02dc1431b8ab4d54373ca1a5a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "89e738ba84874916b6f9a2c1d9ba9f2e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "5e5240101c3247d0b9c42a31343676b7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4dd064102b1c442e9ec0131162348ad5",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "0df36a59e3104ff49fdf771cb2526a1c",
      "Inputs": [
        {
          "Id": "a1284822ec2941089c5b4f5557d58119",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e1b7558efa2541d98454299c2a8dca8c",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "96c6f354983d410aa407489a06b70c0a",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\npt = IN[0]\r\np =[]\r\nnotinlist = []\r\n\r\nfor i in range(len(pt)-1):\r\n\tif pt[i].X != pt[i+1].X and pt[i].Y != pt[i+1].Y:\r\n\t\tp.append(pt[i])\r\n\telse: \r\n\t\tnotinlist.append(pt[i])\r\n\t\r\nif pt[len(pt)-1] != pt[0]: p.append(pt[len(pt)-1])\r\nelse:notinlist.append(pt[len(pt)-1])\r\n\r\nif p==[]:\r\n    OUT = [pt,[]]\r\nelse:\r\n    OUT = [p, notinlist]\r\n\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "ee788cdf52684b8dbcbe2e3e8dc7c721",
      "Inputs": [
        {
          "Id": "466ba35f08294d4a85533243d6808e88",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a15875ba205f45389531aa25809242d6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "pt = IN[0]\r\ninp = IN[1]\r\nacc = IN[2]\r\noutp = []\r\n\r\nfor i in range(len(inp[0])-1):\r\n\tif inp[21][i+1]<acc and inp[22][i+1]<acc:\r\n\t\toutp.append(pt[i])\r\n\r\n\t\t\r\nOUT = outp\r\n\t\t",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "df51d4c6daf0430cb1abca7ceedeedc4",
      "Inputs": [
        {
          "Id": "c9f54df6d6144d93a6519039a0b71737",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0004e68e273e4d6aa92c2aa01741e724",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c4e56e9855114070a74f847285b88eb1",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "48901d4d3bd6403c8085ec3d57a9905c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0.2;",
      "Id": "cbd1896a3cc944dbbb27dba74902557c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7d320f20af7d47bf80ef0c85d471b29d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0];",
      "Id": "1bb1ec564d6048a9ba1340b6dd05d0e7",
      "Inputs": [
        {
          "Id": "568400e915934d97b4d8ed729f6778e3",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ee38ca30dae7467facb361b9ba460b15",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[1];",
      "Id": "9eaccc50a68246b883521b8d37bf2184",
      "Inputs": [
        {
          "Id": "bdbf65ee90164a6c8adc21b9ccf938fd",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b327fb9da4064f2697a2cf1ca8420062",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0];",
      "Id": "c00708b50df84a27bbd33991babb4b1f",
      "Inputs": [
        {
          "Id": "4ae90cd430d947aba14ffe722c6a770b",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "93ecc7be14794c40867a0aa8e22c48a4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nOUT = IN[0][2][1:]",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0a451407ffdd4ac19576d1f16ab0f2a7",
      "Inputs": [
        {
          "Id": "8c10157b83ba44d48b6a7f6b205ef5d6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "80156add8b3f4bfbb29e5bb56cfd265b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "a70867da080048fc806daa86d6a259b4",
      "Inputs": [
        {
          "Id": "e47dc78b707b43a8863ec3f9adf5c3ae",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7cf5291818ec406da1c140d6981e45a6",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1740931f63ad4e69ac7390f6c1c4c802",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fdc6b533844643278c561e464f828d72",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Mark\";",
      "Id": "3dcb3c09b6094275a6b479c0a7727d23",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a2345f1afd144db096bf5b46436fa779",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "982ba65340e5498a96188aa1aefea1fd",
      "Inputs": [
        {
          "Id": "fc0dcf7fea5047109a772e008a478ac9",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ef70acb215734c2eac1a7acd7b5b2598",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "67e3e65109e740e99a36a72bd8db8871",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "040df0a32a06405193e423fb13aac4fa",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Comments\";",
      "Id": "9af897fc515e40308cd92407e141e96e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2e96e4ed7e8c49b7a31cc110f7280397",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nOUT = IN[0][3][1:]",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "72d08abdd56346368a01c724948a83e5",
      "Inputs": [
        {
          "Id": "6afe69662b0644a99fc4656f32e7155e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d5469562389a42de9b6acfe3751997aa",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "x = IN[0]\r\nm = []\r\n\r\nfor i in range(len(x)):\r\n\tm.append([])\r\n\tfor j in range(len(x[0])):\r\n\t\tif x[33][j]!=\"Deleted\":\r\n\t\t\tm[i].append(x[i][j])\r\n\r\n\r\nOUT = m",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "8677111c044b4d36945e336d1458e308",
      "Inputs": [
        {
          "Id": "68f6dc2f15014ef181fc6d584f710bfc",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "709509a3e9564e32a7b220eb6b6c33d6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\npos = IN[1]\r\n\r\noutp = []\r\n\r\nif IN[0]:\r\n    x = IN[0][0]\r\n    if len(pos)>0:\r\n        for j in range(len(x)):\r\n        \t\tif j in pos: outp.append(x[j])\r\n    \r\n    else: \r\n        outp = x\r\n\r\nOUT = outp",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "b65d3a0d86d849a7afe4ac49a053364d",
      "Inputs": [
        {
          "Id": "c9954661c1384c01a5c627bf633c31ca",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c17f4484e4834bbabeebbe0be11ccaf8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e88d3bede33b45658247bcf607f90e76",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[];",
      "Id": "66cbdd4c218d4599ac4263b6de92fb3b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d5ee4683354a4f41ac74864ea1af5b9d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "x = IN[0]\r\nm = []\r\n\r\nfor i in range(len(x)):\r\n\tm.append([])\r\n\tfor j in range(len(x[0])):\r\n\t\tif \"SiteVision_\" not in x[2][j]:\r\n\t\t\tm[i].append(x[i][j])\r\n\r\n\r\nOUT = m",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0f0983a794d846afbd2d1f1d53f203c3",
      "Inputs": [
        {
          "Id": "d4a8a67a48a941599edd49e0c87133e6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "88c7aae1c87e4ed8a73caefc067a4cf1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nOUT = \"0...\" + str(len(IN[0][2])-1)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "9972009cd8da44a19da30c3ac74945ef",
      "Inputs": [
        {
          "Id": "0cdcacbef81f4e28b2d0a5f5eb338a50",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "62f9e8ca488a44e1a9c366ea25883602",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.X",
      "Id": "89bfd7f1d2ad4e01a6f40e0bc5b70ee5",
      "Inputs": [
        {
          "Id": "d2d8f950d32341398a2fd80568b17f05",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "10424bec637045c697ba9269db0a274e",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the X component of a Point\n\nPoint.X: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Y",
      "Id": "1e56ae67c8bf4952a6d504ec1079965d",
      "Inputs": [
        {
          "Id": "5539daeccdf344468db4fc8af73e1b7d",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2ade2ec7c50d4a2f85bccdb39564879e",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Y component of a Point\n\nPoint.Y: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "66fb33f5941d49d4928ac097393f144e",
      "Inputs": [
        {
          "Id": "8ea723b4210444e198ce48f4be100adc",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "af4ea390520642af8ce0cb7857345d46",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Selection.Select.GetSurveyPoint",
      "Id": "bb6c6101dd4946e2ba0a61fce9b78704",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f11d8718683f480cbe2d36073ed8cf40",
          "Name": "Point",
          "Description": "Survey Point.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retrieves Survey Point from the model.\n\nSelect.GetSurveyPoint ( ): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a*304.8/1000;",
      "Id": "661dacabdc5349158a7932fb7c8b2856",
      "Inputs": [
        {
          "Id": "22f0063592ca479aafdb3dc74dc8a0e9",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a452b82415784bf6a1976c4a25a0a407",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a*304.8/1000;",
      "Id": "f8245a599ca843a29ceba83c8b0df804",
      "Inputs": [
        {
          "Id": "e3eaef7a10534c4c873a5d7a23e94f72",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0b783f77efc2493da4d1e8c88d779077",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a*304.8/1000;",
      "Id": "bddec3ac96af4d389eca1093b1c9cf68",
      "Inputs": [
        {
          "Id": "90ecd9573402452a94446e65711c4cc9",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d747b87f61cd4d45af6bfb34717a0a2c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "821ce1e57a8348e6a37b3a733ad7c52c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "03c6e6a72e3d4f16af4e0d85013b7fb3",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Coordinates.ProjectRotation",
      "Id": "7389863ea48b481bbec7508936ad1aae",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "57c027ec535d42c1a8eba0e76d9bc6ce",
          "Name": "double",
          "Description": "Rotation in degrees",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get Project Rotation\n\nCoordinates.ProjectRotation ( ): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Rotate@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,double",
      "Id": "eeb84358176d4908866f78bbaf7dfa65",
      "Inputs": [
        {
          "Id": "fe399d183a374972a7c8919d4cea48a3",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9ceadf38cb434e1babddb89d9fcf1b05",
          "Name": "origin",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c1b440281f064d24b3a9dfeccc426f54",
          "Name": "axis",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7c52ebdd07194afab16ad16adb4c22ce",
          "Name": "degrees",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "55d104933cc64cdc9cd96453f94cb3dd",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Rotates an object around an origin and an axis by a specified degree\n\nGeometry.Rotate (origin: Point, axis: Vector, degrees: double = 0): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "37f8493a0f0140c9bef416ba11f83b44",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6a0f59a309854f87b0c9a36eb461a55c",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Z axis Vector (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Coordinates.SurveyPoint",
      "Id": "55f84f57d5644f4a9bf460241bbfc136",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "eb689ea81e38424eba74e4dd5229bfe9",
          "Name": "Point",
          "Description": "Survey Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get Survey Point\n\nCoordinates.SurveyPoint ( ): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//get Property boundaries (from LINZ in case of New Zealand)\n//unclip survey point\n//\"acquire coordinates\" from linked DWG\n//\"Specify coordinates\" at Survey point and assign height closer to real\n//clip survey point (for safety)\n//now you can run the script\n//restart the scrip every time you change numbers",
      "Id": "b9e9d4b757894430b8ac13225e88c87d",
      "Inputs": [],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "339c549409394f239ce865b0e9e0ec3e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2c74050cc1e1458f8bccd92ed2a17b97",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "/*Is ignored if a default path is given*/\nButtonText: string = \">> Specify CSV File Path\";",
      "Id": "4117c9affc3742d199487f52a487eba4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4659979746bd453db65559a0d8f0bae0",
          "Name": "",
          "Description": "ButtonText",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2016\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uifilepath():\r\n\r\n    def __init__(self,inputname,defaultvalue,buttontext):\r\n        self.inputname = inputname\r\n        self.defaultvalue = defaultvalue\r\n        self.buttontext = buttontext\r\n\r\n    def __repr__(self):\r\n        return 'UI.FilePath input'\r\n\r\nx = uifilepath(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "e016a97a76a24bfab9ec7f2d862ebf94",
      "Inputs": [
        {
          "Id": "05b35e81964947c0bb51798bee3d53c1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9b0c60273f9a4df7aba0aca1487f90db",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a6ae5f2e0a7a4201b7a857339a7d1313",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c515d1ef4b354587b8fc8703ad2c1c81",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DefaulPath: string = \"CSV FilePath\";",
      "Id": "4ac02112f3be4379aaced4214fc47123",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c5fc0175adbc43778e19f475d09c46ba",
          "Name": "",
          "Description": "DefaulPath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "InputName: string = \"\";",
      "Id": "869e478b2ccd4985ad4435a23aeaf96a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f21f87dcabdd4ea09e8d20bf478657c5",
          "Name": "",
          "Description": "InputName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) Data Shapes,\t 2020\r\n#Data-Shapes www.data-shapes.io , elayoubi.mostafa@data-shapes.io @data_shapes\r\n\t\r\nimport clr\r\nimport sys\r\npyt_path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib'\r\nsys.path.append(pyt_path)\r\nimport os\r\nimport webbrowser\r\nimport unicodedata\r\nimport io\r\nimport tempfile\r\nimport System\r\n\t\r\ntry:\r\n\tclr.AddReference('System.Windows.Forms')\r\n\tclr.AddReference('System.Drawing')\r\n\tclr.AddReference('System.Windows.Forms.DataVisualization')\r\n\tclr.AddReference(\"PresentationCore\")\r\n\tclr.AddReference(\"WindowsBase\")\r\n\tfrom System.Windows.Input import  Key, Keyboard\r\n\t\r\n\tfrom System.Drawing import Point , Size , Graphics, Bitmap, Image, Font, FontStyle, Icon, Color, Region , Rectangle , ContentAlignment , SystemFonts, FontFamily\r\n\tfrom System.Windows.Forms import Application, DockStyle,MouseButtons , Button, Form, Label, TrackBar , ToolTip, ColumnHeader, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition, ListView, ListViewItem , SortOrder, Panel, ImageLayout, GroupBox, RadioButton, BorderStyle, PictureBox, PictureBoxSizeMode, LinkLabel, CheckState, ColumnHeaderStyle , ImageList, VScrollBar, DataGridView, DataGridViewSelectionMode, DataGridViewAutoSizeColumnsMode , DataGridViewClipboardCopyMode , TreeView , TreeNode , TreeNodeCollection , AutoScaleMode , Screen, Padding, NativeWindow\r\n\tfrom System.Windows.Forms.DataVisualization.Charting import *#Chart , SeriesChartType\r\n\tfrom System.Collections.Generic import *\r\n\tfrom System.Collections.Generic import List as iList\r\n\tfrom System.Windows.Forms import View as vi\r\n\tclr.AddReference('System')\r\n\tfrom System import IntPtr , Char\r\n\tfrom System import Type as SType, IO\r\n\tfrom System import Array\r\n\tfrom System.ComponentModel import Container\r\n\tclr.AddReference('System.Data')\r\n\tfrom System.Data import DataTable , DataView\r\n\r\n\ttry: #try to import All Revit dependencies\r\n\t\tclr.AddReference('RevitAPIUI')\r\n\t\tfrom  Autodesk.Revit.UI import Selection , TaskDialog \r\n\t\tfrom  Autodesk.Revit.UI.Selection import ISelectionFilter\r\n\t\tclr.AddReference('RevitNodes')\r\n\t\timport Revit\r\n\t\tclr.ImportExtensions(Revit.Elements)\r\n\t\tclr.ImportExtensions(Revit.GeometryConversion)\r\n\t\t\r\n\t\tclr.AddReference('RevitServices')\r\n\t\tfrom RevitServices.Persistence import DocumentManager\r\n\t\tdoc = DocumentManager.Instance.CurrentDBDocument\r\n\t\tuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\t\r\n\t\tclr.AddReference('RevitAPI')\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageImportOptions\t\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageTypeOptions , ImageType, ImagePlacementOptions , ImageInstance\r\n\t\tfrom Autodesk.Revit.DB import FilteredElementCollector , Transaction, View , ViewType , ViewFamily, ViewDrafting, ViewFamilyType, Element, ElementId , FamilyInstance , Document , XYZ, BoxPlacement, UnitUtils\r\n\t\t\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import  UnitType\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import SpecTypeId\r\n\r\n\t\tdbviews = [v for v in FilteredElementCollector(doc).OfClass(View).ToElements() if (v.ViewType == ViewType.FloorPlan or v.ViewType == ViewType.CeilingPlan or v.ViewType == ViewType.Section or v.ViewType == ViewType.Elevation or v.ViewType == ViewType.ThreeD)]\r\n\t\tviewindex = 0\r\n\t\ttry:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n\t\texcept:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()\r\n\t\t\t\r\n\t\tclass selectionfilter(ISelectionFilter):\r\n\t\t\tdef __init__(self,category):\r\n\t\t\t\tself.category = category\r\n\t\t\tdef AllowElement(self,element):\r\n\t\t\t\tif element.Category.Name in [c.Name for c in self.category]:\r\n\t\t\t\t\treturn True\r\n\t\t\t\telse:\r\n\t\t\t\t\treturn False\r\n\t\t\tdef AllowReference(reference,point):\r\n\t\t\t\treturn False\r\n\r\n\r\n\t\t\t\r\n\texcept: #in case we are in the Sandbox, Formit or Civil 3D environment\r\n\t\tpass\r\n\t\r\n\timportcolorselection = 0\r\n\t\r\n\ttry:\r\n\t\tfrom  Autodesk.Revit.UI import ColorSelectionDialog\r\n\texcept:\r\n\t\timportcolorselection = 1\r\n\r\n\ttry:\r\n\t\tfrom  Autodesk.Revit.DB import ImageTypeSource \r\n\texcept:\r\n\t\tpass\r\n\t\r\n\r\n\t\r\n\tclr.AddReference('ProtoGeometry')\r\n\tfrom Autodesk.DesignScript.Geometry import Point as dsPoint\r\n\r\n\tfrom System.Reflection import Assembly\r\n\timport xml.etree.ElementTree as et\r\n\t\r\n\r\n\t\r\n\timport re\t\r\n\tdef regexEndNum(input):\r\n\t\ttry:\r\n\t\t\treturn\tre.search('(\\d+)$', input).group(0)\r\n\t\texcept:\r\n\t\t\treturn \"\"\r\n\r\n\tdef iterateThroughNodes(collection,li):\r\n\t\tif hasattr(collection,'Nodes'):\r\n\t\t\tntest = collection.Nodes\r\n\t\t\tif len(ntest) > 0:\r\n\t\t\t\tfor i in ntest:\r\n\t\t\t\t\titerateThroughNodes(i,li)\r\n\t\t\telse:\r\n\t\t\t\tif collection.Checked:\r\n\t\t\t\t\tli.append(collection.Tag)\r\n\t\treturn li\r\n\r\n\tclass CustomMessageLoop(NativeWindow):\r\n\t    def __init__(self, form):\r\n\t        self.form = form\r\n\t        self.AssignHandle(form.Handle)\r\n\t        self.run_loop()\r\n\t\r\n\t    def run_loop(self):\r\n\t        while self.form.Visible:\r\n\t            Application.DoEvents()\r\n\r\n\t\r\n\tclass MultiTextBoxForm(Form):\r\n\t\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Text = 'Data-Shapes | Multi Input UI ++'\r\n\t\t\tself.output = []\r\n\t\t\tself.values = []\r\n\t\t\tself.cancelled = True\r\n\t\t\tself.lastMouseLocation = 0\r\n\t\t\tself.startNode = None\r\n\t\r\n\t\tdef setclose(self, sender, event):\r\n\t\t\tcbindexread = 0\r\n\t\t\tif sender.Name != \"Cancel\":\r\n\t\t\t\tself.cancelled = False\r\n\t\t\t\tfor f in self.output:\t\t\t\t\t\r\n\t\t\t\t\tif f.GetType() == myTextBox:\r\n\t\t\t\t\t\tif f._isNum :\r\n\t\t\t\t\t\t\tval = float(f.Text)\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tval = f.Text\r\n\t\t\t\t\t\tself.values.append(val)\r\n\t\t\t\t\tif f.GetType() == CheckBox:\r\n\t\t\t\t\t\tself.values.append(f.Checked)\r\n\t\t\t\t\tif f.GetType() == Button:\r\n\t\t\t\t\t\tif isinstance(f.Tag ,list):\r\n\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\tself.values.append([e for e in f.Tag if e.__class__.__name__ != \"Category\"])\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\tself.values.append(f.Tag)\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\ttry:\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif f.Tag.__class__.__name__ != \"Category\":\r\n\t\t\t\t\t\t\t\t\tself.values.append(f.Tag)\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tself.values.append([])\r\n\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\tself.values.append(f.Tag)\t\r\n\t\t\t\t\tif f.GetType() == ComboBox:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tkey = f.Text\r\n\t\t\t\t\t\t\tself.values.append(f.Tag[key])\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tself.values.append(None)\r\n\t\t\t\t\tif f.GetType() == mylistview:\r\n\t\t\t\t\t\tself.values.append([f.Values[i.Text] for i in f.CheckedItems])\r\n\t\t\t\t\tif f.GetType() == mytrackbar:\r\n\t\t\t\t\t\tself.values.append(f.startval+f.Value*f.step)\r\n\t\t\t\t\tif f.GetType() == mygroupbox:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tkey = [j.Text for j in f.Controls if j.Checked == True][0]\r\n\t\t\t\t\t\t\tself.values.append(f.Tag[key])\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tself.values.append(None)\r\n\t\t\t\t\tif f.GetType() == myDataGridView:\r\n\t\t\t\t\t\tf.EndEdit()\r\n\t\t\t\t\t\tdsrc = f.DataSource\r\n\t\t\t\t\t\tout = []\r\n\t\t\t\t\t\tcolcount = f.ColumnCount\r\n\t\t\t\t\t\trowcount = f.RowCount - 1\r\n\t\t\t\t\t\tif f.Tag:\r\n\t\t\t\t\t\t\tl = []\r\n\t\t\t\t\t\t\tfor i in range(colcount):\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tl.append(dsrc.Columns[i].ColumnName)\r\n\t\t\t\t\t\t\tout.append(l)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor r in range(rowcount):\r\n\t\t\t\t\t\t\t\tl = []\r\n\t\t\t\t\t\t\t\tfor i in range(colcount):\r\n\t\t\t\t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t\t\t\t\t\t\tout.append(l)\r\n\t\t\t\t\t\telse: \r\n\t\t\t\t\t\t\tfor r in range(rowcount):\r\n\t\t\t\t\t\t\t\tl = []\r\n\t\t\t\t\t\t\t\tfor i in range(colcount):\r\n\t\t\t\t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t\t\t\t\t\t\tout.append(l)\r\n\t\t\t\t\t\tself.values.append(out)\r\n\t\t\t\t\tif f.GetType() == TreeView:\r\n\t\t\t\t\t\tls = []\r\n\t\t\t\t\t\tnds = f.Nodes[0]\r\n\t\t\t\t\t\titerateThroughNodes(nds,ls)\r\n\t\t\t\t\t\tself.values.append(ls)\r\n\t\t\t\t\tif f.GetType() == GroupBox:\r\n\t\t\t\t\t\trb = [c for c in f.Controls if c.GetType() == RadioButton and c.Checked][0]\r\n\t\t\t\t\t\tself.values.append(rb.Text)\r\n\t\t\t\t\t\tf.Controls.Remove(rb)\r\n\t\t\telse:\r\n\t\t\t\tself.values = None\r\n\t\t\t\tself.cancelled = True\r\n\t\t\ttry:\r\n\t\t\t\tself.Close()\r\n\t\t\texcept:\r\n\t\t\t\tConsole.WriteLine(\"error\")\r\n\t\r\n\t\tdef reset(self, sender, event):\r\n\t\t\tpass\r\n\t\r\n\t\tdef openfile(self, sender, event):\r\n\t\t\tofd = OpenFileDialog()\r\n\t\t\tdr = ofd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = ofd.FileName\r\n\t\t\t\tsender.Tag = ofd.FileName\r\n\r\n\t\tdef exportToExcel(self, sender, event):\r\n\t\t\t#importing Excel IronPython libraries\r\n\t\t\tclr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')\r\n\t\t\tfrom Microsoft.Office.Interop import Excel\r\n\t\t\tex = Excel.ApplicationClass()\r\n\t\t\tex.Visible = sender.Tag[1]\r\n\t\t\tex.DisplayAlerts = False\r\n\t\t\tfbd = FolderBrowserDialog()\r\n\t\t\tfbd.SelectedPath = sender.Text\r\n\t\t\tparent = sender.Parent\r\n\t\t\tfptextbox = parent.GetChildAtPoint(Point(parent.Location.X,sender.Location.Y+5*yRatio))\r\n\t\t\tdataGrid = parent.GetChildAtPoint(Point(parent.Location.X,parent.Location.Y+23*xRatio))\r\n\t\t\tdataTable = dataGrid.DataSource\r\n\t\t\tfptext = fptextbox.Text\r\n\t\t\ttitletext = parent.GetChildAtPoint(Point(0,0)).Text\r\n\t\t\tdr = fbd.ShowDialog()\r\n\t\t\tfrstRwTtle = sender.Tag[0]\r\n\t\t\tif frstRwTtle:\r\n\t\t\t\t_header = Excel.XlYesNoGuess.xlYes\r\n\t\t\telse:\r\n\t\t\t\t_header = Excel.XlYesNoGuess.xlNo\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tworkbk = ex.Workbooks.Add()\r\n\t\t\t\tworksheet = workbk.Worksheets.Add()\r\n\t\t\t\t#Writing title and doc info\r\n\t\t\t\tif sender.Tag[2]:\r\n\t\t\t\t\ttitleCell = worksheet.Cells[1,1]\r\n\t\t\t\t\tworksheet.Cells[2,1].Value2 = sender.Tag[3]\r\n\t\t\t\t\ttitleCell.Value2 = titletext\r\n\t\t\t\t\ttitleCell.Font.Size = 18\r\n\t\t\t\t\ttitleCell.Font.Bold = True\r\n\t\t\t\t\tstartR = 3\r\n\t\t\t\t\tendR = 3\r\n\t\t\t\telse:\r\n\t\t\t\t\tstartR = 1\r\n\t\t\t\t\tendR = 0\t\r\n\t\t\t\tif frstRwTtle:\r\n\t\t\t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t\t\t\tworksheet.Cells[startR,j+1] = dataTable.Columns[j].ColumnName\t\t\t\t\r\n\t\t\t\t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t\t\t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t\t\t\t\tworksheet.Cells[i+startR+1,j+1] = dataTable.DefaultView[i].Row[j].ToString()\r\n\t\t\t\t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR+1,dataTable.Columns.Count])\t\t\t\t\t\t\t\r\n\t\t\t\telse :\r\n\t\t\t\t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t\t\t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t\t\t\t\tworksheet.Cells[i+startR,j+1] = dataTable.DefaultView[i].Row[j].ToString()\t\t\t\t\r\n\t\t\t\t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR,dataTable.Columns.Count])\r\n\t\t\t\txlrange.Columns.AutoFit()\r\n\t\t\t\tworksheet.ListObjects.Add(Excel.XlListObjectSourceType.xlSrcRange, xlrange, SType.Missing, _header, SType.Missing).Name = \"DataShapesTable\"\r\n\t\t\t\tworksheet.ListObjects[\"DataShapesTable\"].TableStyle =  \"TableStyleMedium16\"\r\n\t\t\t\tworkbk.SaveAs(fbd.SelectedPath + \"\\\\\" + fptext)\r\n\t\t\t\tif not sender.Tag[1]:\r\n\t\t\t\t\tworkbk.Close()\r\n\t\t\t\t\tex.Quit()\r\n\r\n\t\tdef startCell(self, sender, event ):\r\n\t\t\tsender.startcell[\"X\"] = event.ColumnIndex\r\n\t\t\tsender.startcell[\"Y\"] = event.RowIndex\t\r\n\r\n\t\tdef endCell(self, sender, event ):\r\n\t\t\ttry:\r\n\t\t\t\tsender.endcell[\"X\"] = event.ColumnIndex\r\n\t\t\t\tsender.endcell[\"Y\"] = event.RowIndex \r\n\t\t\t\tstartval = sender.Rows[sender.startcell[\"Y\"]].Cells[sender.startcell[\"X\"]].Value\r\n\t\t\t\tendNum = regexEndNum(startval)\r\n\t\t\t\tif endNum != \"\":\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\telse:\t\t\t\t\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\t\t\t\t\r\n\t\tdef startRowDrag(self, sender, event ):\r\n\t\t\tshmak\r\n\t\t\t\r\n\t\tdef opendirectory(self, sender, event):\r\n\t\t\tfbd = FolderBrowserDialog()\r\n\t\t\tfbd.SelectedPath = sender.Text\r\n\t\t\tdr = fbd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = fbd.SelectedPath\r\n\t\t\t\tsender.Tag = fbd.SelectedPath\r\n\t\r\n\t\tdef pickobjects(self, sender, event):\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t#THIS METHOD IS FOR CIVIL 3D EVIRONMENT\r\n\t\tdef pickautocadobjects(self, sender, event):   \r\n\t\t\tselelem = []\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\t\r\n\t\t\t\tacadDoc.SendCommand(\"(and(princ\\042\"+ sender.Text + \"\\042)(setq ss(ssget))(setvar\\042users5\\042\\042LinkDWGUIOK\\042)(command\\042_.Select\\042ss\\042\\042)) \")\r\n\t\t\t\tselection_ = acadDoc.ActiveSelectionSet\r\n\t\t\t\tacadDoc.SendCommand(\"(setq ss nil) \")\r\n\t\t\t\tif acadDoc.GetVariable(\"users5\") == \"LinkDWGUIOK\" and selection_ != None:\r\n\t\t\t\t\tfor sel in selection_:\t\t\t\t\r\n\t\t\t\t\t\tselelem.append(sel)\t\t\r\n\t\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tsender.Tag = list(selelem)\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t\tdef pickautocadobject(self, sender, event):\t  \r\n\t\t\tselelem = None\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadPickBox = acadDoc.GetVariable(\"pickbox\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", 5)\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadDoc.SendCommand(\"(setq obj(car(entsel\\042\" + sender.Text + \"\\042))) \")\r\n\t\t\t\tacadDoc.SendCommand(\"(and obj(setvar\\042users5\\042(cdr(assoc 5(entget obj))))(setq obj nil)) \")\t\t\r\n\t\t\t\tselection_ = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", acadPickBox)\r\n\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tselelem = acadDoc.HandleToObject(selection_)\r\n\t\t\t\tsender.Tag = selelem\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t\tdef pickobjectsordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Pick elements in order, then hit ESC to exit.')\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element, 'Pick elements in order').ElementId)\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = output\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\r\n\t\tdef pickobjectsofcatordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tif isinstance(sender.Tag,list):\t\t\t\r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Select %s in order, then press ESC to exit.' %(', '.join([c.Name for c in category])))\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt, 'Select %s' %(', '.join([c.Name for c in category]))).ElementId)\t\t\t\t\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = (output)\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t\tdef picklinkedobjects(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked elements and press Finish.')\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.LinkedElement,'Select the linked elements and press Finish.')\r\n\t\t\t\tselelem = [link.GetElement(s.LinkedElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\t\r\n\r\n\t\tdef pickobject(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t\tdef picklinkedobject(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked element.')\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.LinkedElement,'Select the linked element.')\r\n\t\t\t\tselelem = link.GetElement(sel.LinkedElementId)\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\t\t\t\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t\tdef pickobjectsofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t\t\r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t\tdef pickobjectofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t\t\r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t\tdef treeNodeMouseDown(self, sender, event):\r\n\t\t\tif Keyboard.IsKeyDown(Key.LeftShift) and event.Button == MouseButtons.Left:\r\n\t\t\t\ttv = sender\r\n\t\t\t\tendNode = tv.GetNodeAt(0, event.Y)\r\n\t\t\t\t#If both nodes exist and are in the same parent node\r\n\t\t\t\tif self.startNode != None and endNode != None and self.startNode.Parent == endNode.Parent:\r\n\t\t\t\t\tstartIndex = self.startNode.Index\r\n\t\t\t\t\tendIndex = endNode.Index\r\n\t\t\t\t\t#Swap the indexes if the starting index is greater than the ending index\r\n\t\t\t\t\tif startIndex > endIndex:\r\n\t\t\t\t\t\ttemp = startIndex\r\n\t\t\t\t\t\tstartIndex = endIndex\r\n\t\t\t\t\t\tendIndex = temp\r\n\t\t\t\t\tfor i in range(startIndex,endIndex+1):\t\t\t\t\t  \r\n\t\t\t\t\t\tself.startNode.Parent.Nodes[i].Checked = not self.startNode.Parent.Nodes[i].Checked\r\n\t\t\t\t\tself.lastMouseLocation = event.Y\r\n\t\t\telse:\r\n\t\t\t\ttv = sender\r\n\t\t\t\tself.startNode = tv.GetNodeAt(0, event.Y)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\tdef pickfaces(self, sender, event):\r\n\t\t\tfaces = []\t\t\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tselface = uidoc.Selection.PickObjects(Selection.ObjectType.Face,'')\r\n\t\t\t\tfor s in selface:\r\n\t\t\t\t\telemid = s.ElementId\r\n\t\t\t\t\telem = doc.GetElement(elemid)\r\n\t\t\t\t\tif isinstance(elem,FamilyInstance):\r\n\t\t\t\t\t\ttransf = elem.GetTransform().ToCoordinateSystem()\r\n\t\t\t\t\t\tgeom = elem.GetGeometryObjectFromReference(s)\r\n\t\t\t\t\t\tconvertedGeom = geom.Convert(s, transf)\t\t\t\t\t\r\n\t\t\t\t\t\tfaces.append(convertedGeom)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tf = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).ToProtoType(True)\r\n\t\t\t\t\t\t[i.Tags.AddTag(\"RevitFaceReference\", s) for i in f]\r\n\t\t\t\t\t\tfaces.append(f)\r\n\t\t\t\tsender.Tag = [i for j in faces for i in j]\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t\tdef pickpointsonface(self, sender, event):\r\n\t\t\tfaces = []\t\t\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tselpoints = uidoc.Selection.PickObjects(Selection.ObjectType.PointOnElement,'')\r\n\t\t\tpoints = []\r\n\t\t\tfor s in selpoints:\r\n\t\t\t\tpt = s.GlobalPoint\r\n\t\t\t\tpoints.append(dsPoint.ByCoordinates(UnitUtils.ConvertFromInternalUnits(pt.X,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Y,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Z,UIunit)))\r\n\t\t\tsender.Tag = points\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t\tdef pickedges(self, sender, event):\r\n\t\t\tedges = []\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\t\r\n\t\t\ttry:\t\t\t\t\r\n\t\t\t\tseledge = uidoc.Selection.PickObjects(Selection.ObjectType.Edge,'')\r\n\t\t\t\tfor s in seledge:\r\n\t\t\t\t\telemid = s.ElementId\r\n\t\t\t\t\telem = doc.GetElement(elemid)\r\n\t\t\t\t\tif isinstance(elem,FamilyInstance):\r\n\t\t\t\t\t\ttransf = elem.GetTransform().ToCoordinateSystem()\r\n\t\t\t\t\t\tgeom = elem.GetGeometryObjectFromReference(s)\r\n\t\t\t\t\t\tconvertedGeom = geom.Convert(s, transf)\r\n\t\t\t\t\t\tconvertedGeom.Tags.AddTag(\"RevitFaceReference\", s)\r\n\t\t\t\t\t\tedges.append(convertedGeom)\t\t\t\t\t\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\te = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).AsCurve().ToProtoType(True)\r\n\t\t\t\t\t\te.Tags.AddTag(\"RevitFaceReference\", s)\r\n\t\t\t\t\t\tedges.append(e)\r\n\t\t\t\tsender.Tag = edges\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t\tdef colorpicker(self, sender, event):\r\n\t\t\tdialog = ColorSelectionDialog()\r\n\t\t\tselection = ColorSelectionDialog.Show(dialog)\r\n\t\t\tselected = dialog.SelectedColor\r\n\t\t\tsender.Tag = selected\r\n\t\t\tsender.BackColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\t\tsender.ForeColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\r\n\t\tdef topmost(self):\r\n\t\t\tself.TopMost = True\r\n\t\r\n\t\tdef lvadd(self, sender, event):\r\n\t\t\tsender.Tag = [i for i in sender.CheckedItems]\r\n\t\t\t\r\n\t\tdef scroll(self, sender, event):\r\n\t\t\tparent = sender.Parent\r\n\t\t\tchild = parent.GetChildAtPoint(Point(0,5*yRatio))\r\n\t\t\tchild.Text = str(sender.startval+sender.Value*sender.step)\r\n\r\n\t\tdef openurl(self, sender, event):\r\n\t\t\twebbrowser.open(sender.Tag)\r\n\t\r\n\t\tdef selectall(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = True\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t\tdef selectnone(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = False\r\n\t\t\telse:\r\n\t\t\t\tpass\t\t\r\n\r\n\t\tdef updateallnone(self, sender, event):\r\n\t\t\ttry:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\trball = parent.GetChildAtPoint(Point(0,sender.Height + 5*yRatio))\r\n\t\t\t\trbnone = parent.GetChildAtPoint(Point(80 * xRatio,sender.Height + 5*yRatio))\r\n\t\t\t\tif sender.CheckedItems.Count == 0 and event.NewValue == CheckState.Unchecked:\r\n\t\t\t\t\trbnone.Checked = False\r\n\t\t\t\t\trball.Checked = False\r\n\t\t\t\telif sender.CheckedItems.Count == sender.Items.Count and event.NewValue == CheckState.Unchecked:\r\n\t\t\t\t\trball.Checked = False\r\n\t\t\t\t\trbnone.Checked = False\r\n\t\t\t\telif sender.CheckedItems.Count == sender.Items.Count-1 and event.NewValue == CheckState.Checked:\r\n\t\t\t\t\trball.Checked = True\r\n\t\t\t\t\trbnone.Checked = False\r\n\t\t\t\telif sender.CheckedItems.Count == 1 and event.NewValue == CheckState.Unchecked:\r\n\t\t\t\t\trball.Checked = False\r\n\t\t\t\t\trbnone.Checked = True\t\t\t\r\n\t\t\t\telse :\r\n\t\t\t\t\trball.Checked = False\r\n\t\t\t\t\trbnone.Checked = False\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\r\n\t\tdef zoomcenter(self, sender, event ):\r\n\t\t\tif event.X > 15:\t\t\r\n\t\t\t\ttry:\r\n\t\t\t\t\telement = doc.GetElement(uidoc.Selection.GetElementIds()[0])\r\n\t\t\t\t\tuidoc.ShowElements(element)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t\t\t\r\n\t\tdef setviewforelement(self, sender, event ):\t\r\n\t\t\tif event.X > 15*xRatio:\t\t\t\t\r\n\t\t\t\ttry:\r\n\t\t\t\t\titem = sender.GetItemAt(event.X,event.Y).Text\r\n\t\t\t\t\telement = UnwrapElement(sender.Values[item])\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(element.__class__).ToElements()])]\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(FamilyInstance).ToElements()])]\r\n\t\t\t\t\tglobal viewindex\r\n\t\t\t\t\tdbView = viewsforelement[viewindex]\r\n\t\t\t\t\tid = [element.Id]\r\n\t\t\t\t\ticollection = iList[ElementId](id)\r\n\t\t\t\t\tuidoc.Selection.SetElementIds(icollection)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\t\t\r\n\t\t\t\tpass\r\n\r\n\r\n\t\tdef CheckChildren(self, sender, event ):\r\n\t\t\tevNode = event.Node\t\t\r\n\t\t\tcheckState = evNode.Checked \r\n\t\t\tfor n in event.Node.Nodes:\t\t\r\n\t\t\t\tn.Checked = checkState\t\t\t\r\n\t\t\t\t\r\n\t\tdef ActivateOption(self, sender, event ):\r\n\t\t\tparent = sender.Parent\r\n\t\t\tassociatedControls = [p for p in parent.Controls if p.Name == sender.Text and p.GetType() == Panel][0]\r\n\t\t\trestofcontrols = [p for p in parent.Controls if p.Name != sender.Text and p.GetType() == Panel]\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tassociatedControls.Enabled = True\r\n\t\t\t\tfor c in restofcontrols:\r\n\t\t\t\t\tc.Enabled = False\r\n\t\t\t\tparent.Tag = sender.Text\r\n\t\t\t\t\r\n\t\tdef showtooltip(self, sender, event ):\r\n\t\t\tttp = ToolTip()\r\n\t\t\tttp.AutoPopDelay = 10000\r\n\t\t\tttp.SetToolTip(sender , sender.Tag) \r\n\r\n\t\tdef numsOnly(self, sender, event ):\r\n\t\t\tif Char.IsDigit(event.KeyChar)==False and event.KeyChar != \".\" and Char.IsControl(event.KeyChar)==False:\r\n\t\t\t\tevent.Handled = True\r\n\t\t\r\n\t\tdef chart_showLabels(self, sender, event):\r\n\t\t\tcb = sender\r\n\t\t\tpanelcht = sender.Parent\r\n\t\t\tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t\t\tfor s in chart1.Series:\r\n\t\t\t\tif s.ChartType == SeriesChartType.Pie:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Disabled\"\r\n\t\t\t\telse:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = True\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = False\r\n\t\t\t\t\r\n\t\tdef imageexport(self, sender, event):\r\n\t\t\timport datetime\r\n\t\t\tfrom datetime import datetime\r\n\t\t\tfrom RevitServices.Transactions import TransactionManager\r\n\t\t\t#Modify resolution before the render\r\n\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\tpanelcht = sender.Parent\r\n\t\t\tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t\t\toriginalTitleFont = chart1.Titles[0].Font\r\n\t\t\toriginalWidth = chart1.Width\r\n\t\t\toriginalHeight = chart1.Height\r\n\t\t\tchart1.Visible = False\r\n\t\t\tchart1.Dock = DockStyle.None\r\n\t\t\tchart1.Width = 2100 * 0.8\r\n\t\t\tchart1.Height = 1500 * 0.8\r\n\t\t\tchart1.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t\t\tchart1.ChartAreas[0].AxisY.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t\t\tchart1.ChartAreas[0].AxisX.LabelStyle.Font = Font(fontFam, 30)\r\n\t\t\tchart1.ChartAreas[0].AxisY.LabelStyle.Font = Font(fontFam, 30)\r\n\t\t\tchart1.ChartAreas[0].AxisX.TitleFont = Font(fontFam, 30)\r\n\t\t\tchart1.ChartAreas[0].AxisY.TitleFont = Font(fontFam, 30)\r\n\t\t\tchart1.TextAntiAliasingQuality = TextAntiAliasingQuality.High\r\n\t\t\tchart1.BackColor = Color.White\r\n\t\t\tchart1.Titles[0].Font = Font(fontFam, 32, FontStyle.Bold)\r\n\t\t\tchart1.ChartAreas[0].BackColor = Color.White\r\n\t\t\tfor serie in chart1.Series:\r\n\t\t\t\tserie.Font = Font(fontFam, 30)\r\n\t\t\t\tfor p in serie.Points:\r\n\t\t\t\t\tp.Font = Font(fontFam, 30)\r\n\t\t\t\t\tp.MarkerSize = 15\r\n\t\t\tfor legend in chart1.Legends:\r\n\t\t\t\tlegend.Font = Font(fontFam, 30)\r\n\t\t\t\tlegend.BackColor = Color.White\r\n\t\t\tchart1.Invalidate()\r\n\t\t\tchart1.SaveImage(tempfile.gettempdir() + \"\\\\chartImage.bmp\", ChartImageFormat.Bmp)\r\n\t\t\t#Get back to original settings\r\n\t\t\tchart1.Width = originalWidth\r\n\t\t\tchart1.Height = originalHeight\r\n\t\t\tchart1.BackColor = Color.Transparent\r\n\t\t\tchart1.ChartAreas[0].BackColor = Color.Transparent\r\n\t\t\tchart1.ChartAreas[0].AxisX.LabelStyle.Font = originalFont\r\n\t\t\tchart1.ChartAreas[0].AxisY.LabelStyle.Font = originalFont\r\n\t\t\tchart1.ChartAreas[0].AxisX.TitleFont = originalFont\r\n\t\t\tchart1.ChartAreas[0].AxisY.TitleFont = originalFont\r\n\t\t\tchart1.Titles[0].Font = originalTitleFont\r\n\t\t\tfor serie in chart1.Series:\r\n\t\t\t\tserie.Font = originalFont\r\n\t\t\t\tfor p in serie.Points:\r\n\t\t\t\t\tp.Font = originalFont\r\n\t\t\t\t\tp.MarkerSize = 8\r\n\t\t\tfor legend in chart1.Legends:\r\n\t\t\t\tlegend.Font = originalFont\r\n\t\t\t\tlegend.BackColor = Color.Transparent\r\n\t\t\tchart1.Invalidate()\r\n\t\t\tchart1.Visible = True\r\n\t\t\t#Import the picture in a Drafting View\r\n\t\t\t#Import the picture in a Drafting View // The try catch if for handling the fact that ImageImportOptions was deprecated in 2020 and is obsolete in 2021\t\t\t\t\t  \r\n\t\t\tcollector = FilteredElementCollector(doc).OfClass(ViewFamilyType)\r\n\t\t\tviewFamilyTypes = []\r\n\t\t\tfor c in collector:\r\n\t\t\t\tif c.ViewFamily == ViewFamily.Drafting:\r\n\t\t\t\t\tviewFamilyTypes.append(c)\r\n\t\t\tviewFamilyType = viewFamilyTypes[0]\r\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t\t\tdraftView = ViewDrafting.Create(doc,viewFamilyType.Id)\r\n\t\t\tdraftView.Name = chart1.Titles[0].Text + datetime.now().strftime(\" (%m/%d/%Y, %H.%M.%S)\")\r\n\t\t\timagePath = tempfile.gettempdir() + \"\\\\chartImage.bmp\"\r\n\t\t\tnewElement = clr.StrongBox[Element]()\r\n\t\t\ttry:\r\n\t\t\t\timportOptions = ImageImportOptions()\t\r\n\t\t\t\timportOptions.Resolution = 72\r\n\t\t\t\timportOptions.Placement = BoxPlacement.TopLeft\t\t\t\t\r\n\t\t\t\tdoc.Import(imagePath,importOptions,draftView,newElement)\t\t\t\r\n\t\t\texcept:\r\n\t\t\t\ttry:\r\n\t\t\t\t\timageTypeOption = ImageTypeOptions()   \r\n\t\t\t\t\timageTypeOption.SetPath(imagePath)\t\t\t\t\t\t\t\t\r\n\t\t\t\texcept:\r\n\t\t\t\t\timageTypeOption = ImageTypeOptions(imagePath,False,ImageTypeSource.Import)\r\n\t\t\t\timageTypeOption.Resolution = 72\t\t\t\t   \r\n\t\t\t\timageType = ImageType.Create(doc,imageTypeOption)\r\n\t\t\t\tplacementOptions = ImagePlacementOptions(XYZ(0,0,0),BoxPlacement.TopLeft)\r\n\t\t\t\tImageInstance.Create(doc,draftView,imageType.Id,placementOptions)\t\t\t\t\r\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\t\t\t\t\t \r\n\t\tdef chart_showLegend(self, sender, event ):\r\n\t\t\tcb = sender\r\n\t\t\tpanelcht = sender.Parent\r\n\t\t\tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t\t\tif len(chart1.Legends) <= 1:\r\n\t\t\t\tfor legend in chart1.Legends:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\tlegend.Enabled = True\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tlegend.Enabled = False\r\n\t\t\telse:\r\n\t\t\t\tif cb.Checked:\r\n\t\t\t\t\tchart1.Legends[1].Enabled = True\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Legends[1].Enabled = False\r\n\t\t\t\t\t\r\n\r\n\tclass mylistview(ListView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\r\n\tclass mytrackbar(TrackBar):\r\n\t\r\n\t\tdef __init__(self,startval,step):\r\n\t\t\tself.startval = startval\r\n\t\t\tself.step = step\r\n\r\n\tclass myDataGridView(DataGridView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.startcell = {}\r\n\t\t\tself.endcell = {}\r\n\t\t\t\r\n\tclass mygroupbox(GroupBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\t\t\t\r\n\tclass myTextBox(TextBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself._isNum = False\r\n\t\r\n\t\t\t\r\n\t#Form initialization\r\n\t\r\n\tform = MultiTextBoxForm()\r\n\txRatio = Screen.PrimaryScreen.Bounds.Width/1920\r\n\tif xRatio == 0:\r\n\t\txRatio = 1\r\n\tyRatio = Screen.PrimaryScreen.Bounds.Height/1080\r\n\tif yRatio == 0:\r\n\t\tyRatio = 1\r\n\tform.topmost()\t\r\n\tform.ControlBox = True\r\n\txlabel = 25 * xRatio\r\n\txinput = 150 * xRatio\r\n\tformy = 10 * yRatio\r\n\tif IN[8] * xRatio > (350 * xRatio): formwidth = IN[8] * xRatio\r\n\telse: formwidth = 350 * xRatio\r\n\tfields = []\r\n\terror = 0\r\n\t\r\n\t#Description \r\n\t\r\n\tif IN[3] != \"\":\r\n\t\tdes = Label()\r\n\t\tdes.Location = Point(xlabel,formy)\r\n\t\tdes.Font = Font(\"Arial\", 15,FontStyle.Bold)\t\t\r\n\t\tdes.AutoSize = True\r\n\t\tdes.MaximumSize = Size(formwidth - (2 * xlabel)*xRatio,0)\r\n\t\tdes.Text = IN[3]\r\n\t\tform.Controls.Add(des)\r\n\t\tformy = des.Bottom + (15*xRatio)\r\n\tformheaderheight = formy\r\n\t\r\n\t#Input form\r\n\t\r\n\t# Create a container panel for all inputs\r\n\tbody = Panel()\r\n\tbody.Location = Point(0,formy)\r\n\tbody.Width = formwidth - 15*xRatio\r\n\t\r\n\t\r\n\t# Process form inputs\r\n\tif isinstance(IN[0],list):\r\n\t\tinputtypes = IN[0]\r\n\telse:\r\n\t\tinputtypes = [IN[0]]\r\n\t# This definition is to handle the sorting of special characters\r\n\tdef remove_accents(input_str):\r\n\t\tnfkd_form = unicodedata.normalize('NFKD', input_str)\r\n\t\tonly_ascii = nfkd_form.encode('ASCII', 'ignore')\r\n\t\treturn only_ascii\t\r\n\r\n\t#Adding Logo \r\n\t#default logo in case no input\t\r\n\tdef getImageByName(ImName):\r\n\t\tdynamo = Assembly.Load('DynamoCore')\r\n\t\tversion = str(dynamo.GetName().Version)[:3]\t\t\r\n\t\tdynPath = os.getenv('APPDATA')+\"\\\\Dynamo\\Dynamo Revit\\\\\" + version \r\n\t\troot = et.parse(dynPath + \"\\DynamoSettings.xml\").getroot()\r\n\t\tlogopaths = []\r\n\t\tfor child in root:\r\n\t\t\tif child.tag == \"CustomPackageFolders\":\r\n\t\t\t\tfor path in child:\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\packages\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\tdeflogopath = \"\"\r\n\t\tfor path in logopaths:\r\n\t\t\tif deflogopath == \"\":\r\n\t\t\t\tif os.path.isfile(path):\r\n\t\t\t\t\tdeflogopath = path\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tima = Image.FromFile(deflogopath)\r\n\t\t\t\t\t\tbmp = Bitmap.FromFile(deflogopath)\r\n\t\t\t\t\t\treturn ima,bmp\r\n\t\t\t\t\texcept: \r\n\t\t\t\t\t\tpass\r\n\t\t\t\t\t\t\r\n\ttry:\r\n\t\tif IN[4] != '':\r\n\t\t\ttry:\r\n\t\t\t\tima = Image.FromFile(IN[4])\r\n\t\t\t\tbmp = Bitmap.FromFile(IN[4])\r\n\t\t\texcept:\r\n\t\t\t\tima = IN[4]\r\n\t\t\t\tbmp = IN[4]\r\n\r\n\t\telse :\r\n\t\t\t_ims = getImageByName(\"a.png\")\r\n\t\t\tima = _ims[0]\r\n\t\t\tbmp = _ims[1]\r\n\t\t\t\r\n\t\tlogo = Panel()\r\n\t\tif IN[6] == None:\r\n\t\t\txlogo = 20 * xRatio\r\n\t\t\tylogo = formy+ 10*yRatio\r\n\t\telse:\r\n\t\t\txlogo = 30 * xRatio\r\n\t\t\tylogo = formy\r\n\t\tsize = 110 * xRatio\r\n\t\tlogo = PictureBox()\r\n\t\tratio = (ima.Height)/(ima.Width)\r\n\t\th = float(ima.Height)\r\n\t\tw = float(ima.Width)\r\n\t\tratio = h/w\r\n\t\tlogo.Size = Size(size,size*ratio)\r\n\t\tscaledimage = Bitmap(size,size*ratio)\r\n\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\tgr.DrawImage(ima,0,0,size,size*ratio)\r\n\t\tlogo.Image = ima\r\n\t\tlogo.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\tform.Controls.Add(logo)\r\n\t\tlogo.Location = Point(xlogo,ylogo)\r\n\t\t\r\n\t\t\r\n\t\t#Setting icon \r\n\t\tthumb = bmp.GetThumbnailImage(64, 64, bmp.GetThumbnailImageAbort,IntPtr.Zero)\r\n\t\tthumb.MakeTransparent();\r\n\t\ticon = Icon.FromHandle(thumb.GetHicon())\r\n\t\tform.Icon = icon\r\n\r\n\texcept :\r\n\t\tlogo = Panel()\r\n\t\tlogo.Width = 110 * xRatio\r\n\t\tlogo.Height = 110 * yRatio\r\n\t\r\n\tdef addinput(formbody,inputs,starty,xinput,rightmargin,labelsize,importcolorselection):\r\n\t\ty = starty\r\n\t\tfor j in inputs:\r\n\t\t\tlabel = Label()\r\n\t\t\tlabel.Location = Point(xlabel,y+4*yRatio)\r\n\t\t\tlabel.AutoSize = True\r\n\t\t\tlabel.MaximumSize = Size(labelsize,0)\r\n\t\t\tif j.__class__.__name__ == 'listview' and j.element_count > 0:\r\n\t\t\t\tlabel.Text = j.inputname + '\\n(' + str(j.element_count) + ' element' + (\"s\" if j.element_count > 1 else \"\") + ')'\r\n\t\t\telse:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tlabel.Text = j.inputname\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\tformbody.Controls.Add(label)\r\n\t\r\n\t\t\tif j.__class__.__name__ == 'dropdown':\r\n\t\t\t\tcb = ComboBox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcb.Width = formbody.Width - 25*xRatio  - xinput\r\n\t\t\t\t\tcb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcb.Width = formbody.Width - 25*xRatio  - xlabel\r\n\t\t\t\t\tcb.Location = Point(xlabel,y)\r\n\t\t\t\tcb.Sorted = j._sorted\r\n\t\t\t\t[cb.Items.Add(i) for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )]\r\n\t\t\t\tcb.Tag = j\r\n\t\t\t\tif j.defaultvalue != None:\r\n\t\t\t\t\tdefindex = [i for i in cb.Items].index([i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )][j.defaultvalue])\r\n\t\t\t\t\tcb.SelectedIndex = defindex\r\n\t\t\t\tformbody.Controls.Add(cb)\r\n\t\t\t\tform.output.append(cb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t#CHARTS \r\n\t\t\tif j.__class__.__name__ == 'uipiechart':\t\t\t\t\t\r\n\t\t\t\tlabels = j.xseries\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\txseries = [j.xseries]\r\n\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tlabel = SmartLabelStyle()\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Pie\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,len(xseries)):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Legend text of the points\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points: \r\n\t\t\t\t\t\tp.Font = originalFont\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\t\t\t\t\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.IsTextAutoFit = True\r\n\t\t\t\tlegend1.LegendStyle = LegendStyle.Column\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Font = originalFont\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 30)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\thorizont = j.ishorizontal\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values,_horizont):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tif _horizont:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Bar\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Column\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i],horizont))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.Docking = Docking.Right\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiradarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Create a panel for buttons\r\n\t\t\t\tpanelCtrls = Panel()\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\tpanelCtrls.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formbody.Width - 25*xRatio - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Radar\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelCtrls.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Show/Hide labels\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uipointchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Point\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Change marker size\r\n\t\t\t\toriginalMarkerSize = 8\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points:\r\n\t\t\t\t\t\tp.MarkerSize = originalMarkerSize\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\tchartArea1 = chart1.ChartAreas[0]\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend2 = Legend()\r\n\t\t\t\t#Add legends to charts\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\tchart1.Legends.Add(legend2)\r\n\t\t\t\t#Create Custom legend\r\n\t\t\t\tcustomevent = CustomizeLegendEventArgs(legend2.CustomItems)\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tlegend2.CustomItems.Add(LegendItem(s.Name.ToString(),s.Color,\"\"))\t\t\t\t\t\r\n\t\t\t\tdef chart_CustomizeLegend(sender, customevent ):\r\n\t\t\t\t\tchart1 = sender\r\n\t\t\t\t\t#legend1.Enabled = False\r\n\t\t\t\t\tlegend2.Name = \"Legend2\"\r\n\t\t\t\t\tfor s,it in zip(series,legend2.CustomItems):\r\n\t\t\t\t\t\tit.ImageStyle = LegendImageStyle.Marker\r\n\t\t\t\t\t\tit.MarkerStyle = s.MarkerStyle\r\n\t\t\t\t\t\tit.MarkerColor = s.Color\r\n\t\t\t\t\t\tit.BorderColor = Color.Transparent\r\n\t\t\t\t\t\tit.MarkerSize *= 1.3\r\n\t\t\t\tlegend1.Enabled = False\r\n\t\t\t\tlegend2.Font = originalFont\r\n\t\t\t\tlegend2.IsTextAutoFit = True\r\n\t\t\t\tlegend2.BackColor = formbody.BackColor\t\t\t\r\n\t\t\t\tchart1.CustomizeLegend += chart_CustomizeLegend\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uilinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Line\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uisplinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Spline\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibubblechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\t#panelChart.Padding = Padding(1) To create a black border\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formbody.Width - 25*xRatio - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Bubble\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\r\n\t\t\telif j.__class__.__name__ == 'uitreeview':\r\n\t\t\t\ttv = TreeView()\r\n\t\t\t\ttv.MouseDown += form.treeNodeMouseDown\r\n\t\t\t\ttv.CheckBoxes = True\r\n\t\t\t\ttitles = j._hastitles\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttv.Width =formbody.Width - 25*xRatio - xinput\r\n\t\t\t\t\ttv.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\t\ttv.Location = Point(xlabel,y)\r\n\t\t\t\ttv.Height = j._height\r\n\t\t\t\tdef treeIterationTitle(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(remove_accents(input[0].ToString()))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\t\tinput.pop(0)\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIterationTitle(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item) \r\n\t\t\t\tdef treeIteration(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\tcurrentNode.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIteration(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item)\r\n\t\t\t\tcurrentNode = TreeNode(\"List1\")\r\n\t\t\t\tcurrentNode.Expand()\t\t\t\t\r\n\t\t\t\tif titles:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIterationTitle(currentNode,dl)\t\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIteration(currentNode,dl)\r\n\t\t\t\ttv.AfterCheck += form.CheckChildren\t\t\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(tv)\r\n\t\t\t\tform.output.append(tv)\r\n\t\t\t\ty = tv.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'listview':\r\n\t\t\t\tlvp = Panel()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tlvp.Location = Point(xinput,y)\r\n\t\t\t\t\tlvp.Width = formbody.Width - 25*xRatio- xinput\t\t\t\t\r\n\t\t\t\telif j.inputname == \"\" and j.element_count != 0:\r\n\t\t\t\t\tlvp.Location = Point(xlabel,y+35*yRatio)\r\n\t\t\t\t\tlvp.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\telse : \r\n\t\t\t\t\tlvp.Location = Point(xlabel,y)\r\n\t\t\t\t\tlvp.Width = formbody.Width - 25*xRatio - xlabel\t\t\t\t\r\n\t\t\t\tlvp.Height = j.height * yRatio + 25 * yRatio\r\n\t\t\t\t#Creating the listview box\r\n\t\t\t\tlv = mylistview()\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tdummyheader = ColumnHeader()\r\n\t\t\t\tdummyheader.Text = \"\"\r\n\t\t\t\tdummyheader.Name = \"\"\r\n\t\t\t\tdummyheader.Width = -2 * xRatio\r\n\t\t\t\tlv.HeaderStyle = ColumnHeaderStyle.None\r\n\t\t\t\tlv.Columns.Add(dummyheader)\r\n\t\t\t\tlv.Values = j\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlv.CheckBoxes = True\r\n\t\t\t\tlv.View = vi.Details\r\n\t\t\t\tlvItems =  [i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'highlight' or i == 'display_mode' or i == 'element_count' or i == 'default_values' or i == 'sorted' or i == 'showId')]\r\n\t\t\t\tif j.sorted :\r\n\t\t\t\t\tlvItems = sorted(lvItems,key = remove_accents)\r\n\t\t\t\telse:\r\n\t\t\t\t\tpass\r\n\t\t\t\t[lv.Items.Add(i) for i in lvItems]\r\n\t\t\t\tlv.Location = Point(0,0)\r\n\t\t\t\tif j.inputname != \"\" and j.element_count != 0:\r\n\t\t\t\t\tlv.Width = formbody.Width - 25*xRatio- xinput\r\n\t\t\t\telif j.inputname != \"\" and j.element_count == 0:\r\n\t\t\t\t\tlv.Width = formbody.Width - 25*xRatio - xinput\r\n\t\t\t\telse:\r\n\t\t\t\t\tlv.Width =formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\tlv.Height = j.height * yRatio\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tlv.ItemCheck += form.updateallnone\r\n\t\t\t\tfor i in j.default_values:\r\n\t\t\t\t\tdefInd = lvItems.index([x for x in j.keys() if not (x == 'inputname' or x == 'height' or x == 'highlight' or x == 'display_mode' or x == 'element_count' or x == 'default_values' or x == 'sorted' or x == 'showId')][i])\r\n\t\t\t\t\tlv.Items[defInd].Checked = True\r\n\t\t\t\t#Click listview items to hilight and center in appropriate view\r\n\t\t\t\tif j.highlight :\r\n\t\t\t\t\tlv.MouseDown += form.setviewforelement\r\n\t\t\t\t\tlv.MouseUp += form.zoomcenter\r\n\t\t\t\t\titems = list(lv.Items)\r\n\t\t\t\t\tlv.FullRowSelect = True\r\n\t\t\t\t\tdel items[::2]\r\n\t\t\t\t\tfor item in items:\r\n\t\t\t\t\t\titem.BackColor = Color.FromArgb(230,243,255)\r\n\t\t\t\t#Creating select all and select none radiobuttons\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\trball = RadioButton()\r\n\t\t\t\t\trball.Location = Point(0,(j.height+5)*yRatio)\r\n\t\t\t\t\trball.Width = 100 * xRatio\r\n\t\t\t\t\trball.Height = 20 * yRatio\r\n\t\t\t\t\trball.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trball.Text = \"Select all\"\r\n\t\t\t\t\trball.Click += form.selectall\r\n\t\t\t\t\trbnone = RadioButton()\r\n\t\t\t\t\trbnone.Location = Point(105 * xRatio,(j.height+5)*yRatio)\r\n\t\t\t\t\trbnone.Width = 100 * xRatio\r\n\t\t\t\t\trbnone.Height = 20 * yRatio\r\n\t\t\t\t\trbnone.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trbnone.Text = \"Select none\"\t\t\t\r\n\t\t\t\t\trbnone.Click += form.selectnone\t\t\t\r\n\t\t\t\t#Adding controls to panel\r\n\t\t\t\tlvp.Controls.Add(lv)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlvp.Controls.Add(rball)\r\n\t\t\t\t\tlvp.Controls.Add(rbnone)\r\n\t\t\t\tformbody.Controls.Add(lvp)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tform.output.append(lv)\r\n\t\t\t\ty = lvp.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uitext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formbody.Width - 25*xRatio - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uimultilinetext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\ttb.Multiline  = True\r\n\t\t\t\ttb.Height = j._height * yRatio\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formbody.Width - 25*xRatio - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = tb.Bottom + 25 * yRatio\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'tableview':\r\n\t\t\t\t#Creating grouping panel\r\n\t\t\t\ttvp = Panel()\r\n\t\t\t\ttvp.Location = Point(xlabel,y)\r\n\t\t\t\ttvp.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\tif (50 + len(j.dataList) * 15) * yRatio > 800 * yRatio:\r\n\t\t\t\t\tautoheight = 800 * yRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tautoheight = (50 + len(j.dataList) * 15 ) * yRatio\t\t\t\r\n\t\t\t\ttvp.Height = autoheight + 73 * yRatio\r\n\t\t\t\t#Creating title\r\n\t\t\t\ttitlep = Label()\r\n\t\t\t\ttitlep.Text = j._tabletitle\r\n\t\t\t\ttitlep.Width = formbody.Width - 25*xRatio - xlabel\r\n\t\t\t\ttitlep.BackColor = Color.FromArgb(153,180,209)\r\n\t\t\t\ttitlep.Font = Font(\"Arial\", 11, FontStyle.Bold)\r\n\t\t\t\ttitlep.TextAlign = ContentAlignment.MiddleLeft\r\n\t\t\t\ttitlep.BorderStyle = BorderStyle.FixedSingle\r\n\t\t\t\ttitlep.Location = Point(0,0)\r\n\t\t\t\ttvp.Controls.Add(titlep)\r\n\t\t\t\t#Creating data structure\r\n\t\t\t\tdg = myDataGridView()\r\n\t\t\t\t#dg.SelectionMode = DataGridViewSelectionMode.CellSelect\r\n\t\t\t\tdg.EnableHeadersVisualStyles = False\t\t\t\t\r\n\t\t\t\tdt = DataTable()\r\n\t\t\t\tdl = j.dataList\r\n\t\t\t\tfor i in range(len(dl[0])):\r\n\t\t\t\t\tif j._hasTitle:\r\n\t\t\t\t\t\tdt.Columns.Add(remove_accents(dl[0][i].ToString()))\r\n\t\t\t\t\t\trngstart = 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tdt.Columns.Add(\"Column \" + str(i))\r\n\t\t\t\t\t\trngstart = 0\t\t\t\t\t\t\r\n\t\t\t\tfor rindex in range(rngstart,len(dl)):\r\n\t\t\t\t\trow = dt.NewRow()\r\n\t\t\t\t\tfor i in range(len(dl[rindex])):\r\n\t\t\t\t\t\trow[i] = dl[rindex][i]\r\n\t\t\t\t\tdt.Rows.Add(row)\t\t\t\t\t\t\r\n\t\t\t\tdg.Tag = j._hasTitle\t\t\t\t\r\n\t\t\t\tdg.DataSource = dt\r\n\t\t\t\tdg.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText\r\n\t\t\t\tdg.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells\r\n\t\t\t\tdg.Width = formbody.Width - 25*xRatio- xlabel\r\n\t\t\t\tdg.Location = Point(0,23 * yRatio)\r\n\t\t\t\tdg.Height = autoheight\r\n\t\t\t\t#Creatin Excel like drag copy functionalities\r\n\t\t\t\tdg.CellMouseDown += form.startCell\r\n\t\t\t\tdg.CellMouseUp += form.endCell\r\n\t\t\t\t#dg.MouseDown += form.startRowDrag\r\n\t\t\t\t#dg.MouseUp =\t\t\t\r\n\t\t\t\ttvp.Controls.Add(dg)\t\t\t\r\n\t\t\t\ty = tvp.Bottom + 15 * yRatio\r\n\t\t\t\t#Adding export to excel button\r\n\t\t\t\tex = Button()\r\n\t\t\t\tex.Tag = [j._hasTitle , j._openExcel , j._showinfo , j._fileInfo]\r\n\t\t\t\ttry:\r\n\t\t\t\t\texpImage = getImageByName(\"exp.png\")[0]\r\n\t\t\t\t\tex.BackgroundImage = expImage\r\n\t\t\t\texcept:\r\n\t\t\t\t\tex.Text = \"Export\"\t\t\t\t\t\r\n\t\t\t\tex.Width = 60 * xRatio\r\n\t\t\t\tex.Height = 30 * yRatio\r\n\t\t\t\tex.Location = Point(formbody.Width - 25*xRatio - 125 * xRatio ,dg.Bottom + 15 * yRatio)\t\t\t\t\t\r\n\t\t\t\ttvp.Controls.Add(ex)\r\n\t\t\t\tex.Click += form.exportToExcel\r\n\t\t\t\t#Adding filepath export textbox\r\n\t\t\t\tfilepathtb = TextBox()\r\n\t\t\t\tfilepathtb.Text = \"ExportFileName\"\r\n\t\t\t\tfilepathtb.Location = Point(0 ,dg.Bottom + 20 * yRatio)\r\n\t\t\t\tfilepathtb.Width = formbody.Width - 25*xRatio - xlabel - 125 * xRatio\r\n\t\t\t\ttvp.Controls.Add(filepathtb)\r\n\t\t\t\t#Adding copy to clipboard button\r\n\t\t\t\tcb = Button()\r\n\t\t\t\t#Adding panel to form\r\n\t\t\t\tformbody.Controls.Add(tvp)\r\n\t\t\t\tform.output.append(dg)\r\n\t\t\t\ty = tvp.Bottom + 25 * yRatio\r\n\t\t\t\tform.topmost()\r\n\t\t\telif j.__class__.__name__ == 'uitextnote':\r\n\t\t\t\tgb = GroupBox()\r\n\t\t\t\tgb.Text = j.title\r\n\t\t\t\tgb.Parent = form\r\n\t\t\t\tgb.SendToBack()\r\n\t\t\t\tgb.BackColor = Color.Transparent\r\n\t\t\t\tgb.Location = Point(xlabel, y)\r\n\t\t\t\ttn = Label()\r\n\t\t\t\ttn.Location = Point(xlabel,18 * yRatio)\r\n\t\t\t\ttn.AutoSize = True\r\n\t\t\t\ttn.MaximumSize = Size(formbody.Width - 25*xRatio - 50 * xRatio,0)\r\n\t\t\t\ttn.Text = j.textnote\r\n\t\t\t\ttn.BringToFront()\r\n\t\t\t\tgb.Controls.Add(tn)\r\n\t\t\t\tgb.Size = Size(formbody.Width - 25*xRatio - 25 * xRatio, tn.Bottom-tn.Top+25 * yRatio)  \r\n\t\t\t\ty = gb.Bottom + 25 * xRatio\r\n\t\t\t\tformbody.Controls.Add(gb)\r\n\t\t\telif j.__class__.__name__ == 'uibool':\r\n\t\t\t\tyn = CheckBox()\r\n\t\t\t\tyn.Width = formbody.Width - 25*xRatio - xinput  + 10 * xRatio\r\n\t\t\t\tyn.Location = Point(xinput,y)\r\n\t\t\t\tyn.Text = j.booltext\r\n\t\t\t\tg = yn.CreateGraphics()\r\n\t\t\t\tsizetext = g.MeasureString(yn.Text,yn.Font, formbody.Width - 25*xRatio - xinput  -20 * xRatio)\r\n\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\tyn.Height = heighttext + 15 * yRatio\r\n\t\t\t\tyn.Checked = j.defaultvalue\r\n\t\t\t\tformbody.Controls.Add(yn)\r\n\t\t\t\tform.output.append(yn)\r\n\t\t\t\ty = yn.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiradio':\r\n\t\t\t\tyrb = 20 * yRatio\r\n\t\t\t\trbs = []\r\n\t\t\t\trbgroup = mygroupbox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\trbgroup.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\trbgroup.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\trbgroup.Width = formbody.Width - 25*xRatio - xlabel \r\n\t\t\t\t\trbgroup.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\trbgroup.Tag = j\r\n\t\t\t\trbcounter = 0\r\n\t\t\t\tfor key in j.keys():\r\n\t\t\t\t\tif key != 'inputname' and key != 'defaultvalue':\r\n\t\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\t\trb.Text = key \r\n\t\t\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\t\t\trb.Width = formbody.Width - 25*xRatio - xinput  - 35 * xRatio\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\trb.Width = formbody.Width - 25*xRatio - xlabel  - 35 * xRatio\r\n\t\t\t\t\t\trb.Location = Point(20 * xRatio,yrb)\r\n\t\t\t\t\t\tif rbcounter == j.defaultvalue:\r\n\t\t\t\t\t\t\trb.Checked = True\r\n\t\t\t\t\t\trbgroup.Controls.Add(rb)\r\n\t\t\t\t\t\tg = rb.CreateGraphics()\r\n\t\t\t\t\t\tsizetext = g.MeasureString(key,rb.Font, formbody.Width - 25*xRatio - xinput - 90*xRatio)\r\n\t\t\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\t\t\trb.Height = heighttext + 15 * yRatio\r\n\t\t\t\t\t\tybot = rb.Bottom\r\n\t\t\t\t\t\tyrb += heighttext + 12 * yRatio\r\n\t\t\t\t\t\trbcounter += 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tpass\r\n\t\t\t\trbgroup.Height = ybot + 20 * yRatio\r\n\t\t\t\t[rbgroup.Controls.Add(rb) for rb in rbs]\r\n\t\t\t\tformbody.Controls.Add(rbgroup)\r\n\t\t\t\tform.output.append(rbgroup)\r\n\t\t\t\ty = rbgroup.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__  == 'uifilepath':\r\n\t\t\t\tfp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tfp.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tfp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tfp.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tfp.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\tif not j.defaultvalue == \"FilePath\":\r\n\t\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\t\tfp.MouseHover += form.showtooltip\t\r\n\t\t\t\tfp.Text = j.buttontext\r\n\t\t\t\tfp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(fp)\r\n\t\t\t\tfp.Click += form.openfile\r\n\t\t\t\tform.output.append(fp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uidirectorypath':\r\n\t\t\t\tdp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tdp.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tdp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tdp.Location = Point(xlabel,y)\t\t\t\t\r\n\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\tdp.Text = j.buttontext\r\n\t\t\t\tif not j.defaultvalue == \"DirectoryPath\":\r\n\t\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\t\tdp.MouseHover += form.showtooltip\r\n\t\t\t\tdp.Text = j.buttontext\t\r\n\t\t\t\tdp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(dp)\r\n\t\t\t\tdp.Click += form.opendirectory\r\n\t\t\t\tform.output.append(dp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xlabel\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.pickobject\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectautocadelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickautocadobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click += form.pickautocadobject\t\t\t\t\t\t\t\t\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tse.Click  += form.pickobjectsordered\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.picklinkedobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.picklinkedobject\r\n\t\t\t\tform.output.append(se)\r\n\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.pickobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.pickobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tsec.Click += form.pickobjectsofcatordered\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectfaces':\r\n\t\t\t\tsf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsf.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsf.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsf.Location = Point(xlabel,y)\r\n\t\t\t\tsf.Text = j.buttontext\r\n\t\t\t\tsf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sf)\r\n\t\t\t\tsf.Click += form.pickfaces\r\n\t\t\t\tform.output.append(sf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectpointsonface':\r\n\t\t\t\tspf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tspf.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tspf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tspf.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tspf.Location = Point(xlabel,y)\r\n\t\t\t\tspf.Text = j.buttontext\r\n\t\t\t\tspf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(spf)\r\n\t\t\t\tspf.Click += form.pickpointsonface\r\n\t\t\t\tform.output.append(spf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectedges':\r\n\t\t\t\tsed = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsed.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tsed.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsed.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tsed.Location = Point(xlabel,y)\r\n\t\t\t\tsed.Text = j.buttontext\r\n\t\t\t\tsed.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sed)\r\n\t\t\t\tsed.Click += form.pickedges\r\n\t\t\t\tform.output.append(sed)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uislider':\r\n\t\t\t\tgb = Panel()\r\n\t\t\t\tif j.defaultvalue == '':\r\n\t\t\t\t\tdefval = j.minimum\r\n\t\t\t\telse:\r\n\t\t\t\t\tdefval = j.defaultvalue\r\n\t\t\t\tsl = mytrackbar(j.minimum,j.step)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tgb.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tgb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tgb.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tgb.Location = Point(xlabel,y)\r\n\t\t\t\tgb.Height = 40 * yRatio\r\n\t\t\t\tsl.Minimum = 0\r\n\t\t\t\tsl.Maximum = (j.maximum-j.minimum)/j.step\r\n\t\t\t\tsl.Value = (defval - j.minimum) / j.step\r\n\t\t\t\tsl.TickFrequency = (j.maximum-j.minimum)/j.step/10\r\n\t\t\t\tsl.Location = Point(40 * xRatio,0)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsl.Width = formbody.Width - 25*xRatio - xinput  - 35 * xRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tsl.Width = formbody.Width - 25*xRatio - xlabel  - 35 * xRatio\r\n\t\t\t\tgb.Controls.Add(sl)\r\n\t\t\t\tform.output.append(sl)\r\n\t\t\t\tdisplabel = Label()\r\n\t\t\t\tdisplabel.Width = 50 * xRatio\r\n\t\t\t\tdisplabel.Location = Point(0,5 * yRatio)\r\n\t\t\t\tdisplabel.Text = str(defval)\r\n\t\t\t\tdisplabel.Height = 30 * yRatio\r\n\t\t\t\tdisplabel.BringToFront()\r\n\t\t\t\tgb.Controls.Add(displabel)\t\r\n\t\t\t\tformbody.Controls.Add(gb)\t\t\t\r\n\t\t\t\tsl.Scroll += form.scroll\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiimage':\r\n\t\t\t\tpic = Image.FromFile(j.image)\r\n\t\t\t\tim = PictureBox()\r\n\t\t\t\tif j.showborder:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.Fixed3D\r\n\t\t\t\telse:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.None\r\n\t\t\t\tratio = (pic.Height)/(pic.Width)\r\n\t\t\t\th = float(pic.Height)\r\n\t\t\t\tw = float(pic.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\timage_maxsize = formbody.Width - 25*xRatio - xlabel \r\n\t\t\t\tim.Size = Size(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tscaledimage = Bitmap(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\t\t\tgr.DrawImage(pic,0,0,image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tim.Image = pic\r\n\t\t\t\tim.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\t\t\tformbody.Controls.Add(im)\r\n\t\t\t\tim.Location = Point(25 * xRatio,y+25*yRatio)\r\n\t\t\t\ty = im.Bottom + 25 * yRatio\r\n\t\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 0:\r\n\t\t\t\tcp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcp.Width = formbody.Width - 25*xRatio - xinput \r\n\t\t\t\t\tcp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcp.Width = formbody.Width - 25*xRatio - xlabel \t\t\r\n\t\t\t\t\tcp.Location = Point(xlabel,y)\r\n\t\t\t\tcp.Text = j.buttontext\r\n\t\t\t\tcp.Height = 30 * yRatio\r\n\t\t\t\tformbody.Controls.Add(cp)\r\n\t\t\t\tcp.Click += form.colorpicker\r\n\t\t\t\tform.output.append(cp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 1:\r\n\t\t\t\timportcolorselection = 2\r\n\t\t\telif j.__class__.__name__ == 'uigroup':\r\n\t\t\t\tgrouppanel = GroupBox()\r\n\t\t\t\tgrouppanel.Text = j.groupname\r\n\t\t\t\tgrouppanel.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanel.Width = formbody.Width - 65 * xRatio\r\n\t\t\t\t#recursive implementation of the definition to process grouped inputs\r\n\t\t\t\taddinput(grouppanel,j.inputgroup,25*yRatio,xinput-25*xRatio,80 * xRatio,90 * xRatio,importcolorselection)\r\n\t\t\t\tformbody.Controls.Add(grouppanel)\r\n\t\t\t\ty = grouppanel.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiconditional':\r\n\t\t\t\tgrouppanelcond = GroupBox()\r\n\t\t\t\tgrouppanelcond.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanelcond.Width = formbody.Width - 25*xRatio - 65 * xRatio\t\r\n\t\t\t\tform.output.append(grouppanelcond)\t\t\t\t\r\n\t\t\t\t#recursive implementation of the definition to process conditional groups of inputs\r\n\t\t\t\tpanlist = []\r\n\t\t\t\trblist = []\r\n\t\t\t\typ = 25 * yRatio\r\n\t\t\t\txrb = 25 * xRatio\r\n\t\t\t\tfor i,d in zip(j._Conditions,j._GroupedInputs): \r\n\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\trb.CheckedChanged += form.ActivateOption\r\n\t\t\t\t\trb.Text = i\r\n\t\t\t\t\trb.Location = Point(xrb,10*yRatio)\r\n\t\t\t\t\trb.Width = 95 * xRatio\r\n\t\t\t\t\trblist.append(rb)\t\t\t\t\t\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(rb)\t\t\t\t\r\n\t\t\t\t\tcondition_pannel = Panel()\r\n\t\t\t\t\tcondition_pannel.Name = i\r\n\t\t\t\t\tcondition_pannel.Top = yp\r\n\t\t\t\t\tcondition_pannel.Width = formbody.Width - 25*xRatio - 65 * xRatio\r\n\t\t\t\t\tcondition_pannel.BackColor = Color.Transparent\r\n\t\t\t\t\tcondition_pannel.BringToFront()\t\t\t\t\t\r\n\t\t\t\t\taddinput(condition_pannel,d,25*yRatio,xinput-25*xRatio,80*xRatio,90*xRatio,importcolorselection)\r\n\t\t\t\t\tpanlist.append(condition_pannel)\r\n\t\t\t\t\typ = condition_pannel.Bottom - 25*yRatio\r\n\t\t\t\t\txrb += 100 * xRatio\r\n\t\t\t\tfor pan in panlist:\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(pan)\r\n\t\t\t\tfor e,pan in enumerate(panlist):\r\n\t\t\t\t\tif e != j._defaultOptionIndex:\r\n\t\t\t\t\t\tpan.Enabled = False\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\trblist[j._defaultOptionIndex].Checked = True\r\n\t\t\t\tgrouppanelcond.Height = sum([p.Height for p in panlist]) - (len(panlist)-2)*25 * yRatio\r\n\t\t\t\tgrouppanelcond.BackColor = Color.Transparent\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(grouppanelcond)\r\n\t\t\t\tform.output.append([grouppanelcond.Tag])\t\t\t\t\r\n\t\t\t\ty = grouppanelcond.Bottom + 25*yRatio\r\n\t\t\tformbody.Height = y\r\n\r\n\r\n\t# process input lists \r\n\taddinput(body,inputtypes,0,IN[9],40 * xRatio ,IN[9] * xRatio,importcolorselection)\r\n\t\r\n\t#add the formbody panel to the form\r\n\tform.Controls.Add(body)\t\t\r\n\t\r\n\r\n\tif IN[6] != None:\r\n\t\tif IN[8] > 400 * yRatio:\r\n\t\t\tformy += 50 * yRatio\r\n\t\t\txinput = 270 * yRatio\r\n\t\telse:\r\n\t\t\tformy = logo.Bottom + 20 * yRatio\r\n\telse:\r\n\t\tformy += 50 * yRatio\r\n\r\n\r\n\r\n\t#Adding validation button\r\n\t\r\n\tbutton = Button()\r\n\tbutton.Text = IN[1]\r\n\tbutton.Width = formwidth - xinput - 40 * xRatio\r\n\tbutton.Height = 20 * yRatio\r\n\tbutton.Location = Point (xinput,formy)\r\n\tbutton.Click += form.setclose\r\n\tform.Controls.Add(button)\r\n\tform.MaximizeBox = False\r\n\tform.MinimizeBox = False\r\n\tform.FormBorderStyle = FormBorderStyle.FixedSingle\r\n\t\r\n\t#Adding Cancel button\r\n\tif IN[6] != None:\r\n\t\tcancelbutton = Button()\r\n\t\tcancelbutton.Text = IN[6]\r\n\t\tcancelbutton.Width = 120 * xRatio\r\n\t\tcancelbutton.Height = 20 * xRatio\r\n\t\tcancelbutton.Name = \"Cancel\"\r\n\t\tcancelbutton.Location = Point (xinput -120 * xRatio ,formy)\r\n\t\tcancelbutton.Click += form.setclose\r\n\t\tform.Controls.Add(cancelbutton)\r\n\t\tform.CancelButton = cancelbutton\r\n\t\r\n\t#Adding link to help\r\n\t\r\n\tif IN[5] != None :\r\n\t\thelplink = LinkLabel()\r\n\t\thelplink.Text = \"Help\"\r\n\t\thelplink.Tag = IN[5]\r\n\t\thelplink.Click += form.openurl\r\n\t\thelplink.Location = Point(formwidth - 65 * xRatio ,formy+30 * yRatio)\r\n\t\tform.Controls.Add(helplink)\r\n\telse:\r\n\t\tpass\t\r\n\t\t\t\r\n\tform.ShowIcon = True\r\n\tform.Width = formwidth\r\n\tform.Height = formy + 120 * yRatio\r\n\tformfooterheight = form.Height - formheaderheight\r\n\t\r\n\t# Make formbody scrollable\r\n\t\r\n\t# if the form is longer than its maximum height, do the following:\r\n\t# modify the form height\r\n\t# make the formbody panel scrollable\r\n\tif form.Height + body.Height > IN[7] * yRatio and IN[7] * yRatio > 0:\r\n\t\tformbody_calculatedheight = IN[7] * yRatio - form.Height\r\n\t\t# make sure the formbody is at least 100 px high\r\n\t\tif formbody_calculatedheight < 100 * yRatio: formbody_calculatedheight = 100 * yRatio\r\n\t\tbody.Height = formbody_calculatedheight\r\n\t\tform.Height = form.Height + formbody_calculatedheight\r\n\t\t# this (and apparently only this) will implement a vertical AutoScroll *only*\r\n\t\t# http://stackoverflow.com/a/28583501\r\n\t\tbody.HorizontalScroll.Maximum = 0\r\n\t\tbody.AutoScroll = False\r\n\t\tbody.VerticalScroll.Visible = False\r\n\t\tbody.AutoScroll = True\r\n\t\tbody.BorderStyle = BorderStyle.Fixed3D\r\n\telse:\r\n\t\tform.Height = form.Height + body.Height\r\n\t# Move footer elements\r\n\tlogo.Location = Point(logo.Location.X, logo.Location.Y + body.Height)\r\n\tbutton.Location = Point(button.Location.X, button.Location.Y + body.Height)\r\n\tif IN[6] != None: cancelbutton.Location = Point(cancelbutton.Location.X, cancelbutton.Location.Y + body.Height)\r\n\tif IN[5] != None: helplink.Location = Point(helplink.Location.X, helplink.Location.Y + body.Height)\r\n\r\n\t#Positionning the form at top left of current view\r\n\t#In The revit environment\r\n\ttry:\r\n\t\tuiviews = uidoc.GetOpenUIViews()\r\n\t\tif doc.ActiveView.IsValidType(doc.ActiveView.GetTypeId()):\r\n\t\t\tactiveviewid = doc.ActiveView.Id\r\n\t\t\tactiveUIView = [v for v in uiviews if v.ViewId == activeviewid][0]\r\n\t\telse:\r\n\t\t\tactiveUIView = uiviews[0]\r\n\t\trect = activeUIView.GetWindowRectangle()\r\n\t\tform.StartPosition = FormStartPosition.Manual\r\n\t\tform.Location = Point(rect.Left-7 * xRatio,rect.Top)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\t\t\r\n\tif IN[2]:\r\n\t\tif importcolorselection != 2:\r\n\t\t\tform.Show()\r\n\t\t\tCustomMessageLoop(form)\r\n\t\t\tresult = form.values\r\n\t\t\tOUT = result,True, form.cancelled \r\n\t\telse:\r\n\t\t\tOUT = ['ColorSelection input is only available With Revit 2017'] , False, False\r\n\telse :\r\n\t\tOUT = ['Set toggle to true!'] , False, False\r\nexcept:\r\n\timport traceback\r\n\tOUT = traceback.format_exc() , \"error\", \"error\"\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "3ddbecc4b2e5409390fcf771a5c2f7de",
      "Inputs": [
        {
          "Id": "4da6ccf852a94b41ac07e17b67f7cdfd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "58153cb1fbe849f3a1d5cba20a33e040",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "29cfb0283a43466bb960ab75f6f55f53",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6579c4491d1446bf9b5f42e8b839792a",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b9350b2dad74a7c93504c0cccdff7ba",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ca120c5a2fe04f97b21ebe2f71a626f0",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6e95625d77a84bb596d9d016e92a32cc",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5f451264adfa4b83b2a45bec0b69e808",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ba79f77b8f24d1ba62aa6d937669c91",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5be6a0a7802644208d34a7dc51105ca5",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2d41ea279dbc4b779d571360b038d7d4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "LinkToHelp_optional: string = null;",
      "Id": "452759344dd540a7a9e4a32e581662c3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a539191e7a28477d9c8df74699eb06f3",
          "Name": "",
          "Description": "LinkToHelp_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "/* Cancel button will only be displayed if a label text is entered here*/\nCancelButtonText_optional: string = null;",
      "Id": "014a25112e434b37aacca9a492cdc3fa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6b02862c9ec247d99d1b4d3efe23a1a9",
          "Name": "",
          "Description": "CancelButtonText_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "MaxHeight_optional: int = 0;",
      "Id": "d1379b67d5834d22a4aa5e682f442b71",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "eeb9d2f92da14f77bef4eec0d4618ac8",
          "Name": "",
          "Description": "MaxHeight_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Width_optional: int = 300;",
      "Id": "1d088b24902e4fa598ae8e88414795d4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6b1565ae49c34d3c93cc446befaf314f",
          "Name": "",
          "Description": "Width_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "LabelWidth_optional: int = 50;",
      "Id": "3b58078f463f44b4b583842410ff0e4f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c38aa89478cb4c1991fcb778965dd6b6",
          "Name": "",
          "Description": "LabelWidth_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Logo_optional: var = \"\";",
      "Id": "b024ae9b41c641dd8f41180cc0e2cb19",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1942e442e234431f91f0b5f643334f82",
          "Name": "",
          "Description": "Logo_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Description_optional: string = \"\";",
      "Id": "8ab61917ed584dcf916a65491c320901",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "015f3595aa294e828784de72cf819839",
          "Name": "",
          "Description": "Description_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "ButtonText_optional: string = \"Import points >>\";",
      "Id": "9637c216a02f4a88b8d390aa50fb14ac",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6ff16828a2b14fe2b37f384fc526acdb",
          "Name": "",
          "Description": "ButtonText_optional",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0][0];",
      "Id": "ef14440338fd4f14a7e5ad7b08308b4b",
      "Inputs": [
        {
          "Id": "552bf211e1c546eaaee0ad251c43ce8d",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "653d82a2501d49fd8c1f54ac07807ba7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('DynamoServices')\r\nfrom Dynamo.Events import *\r\nf = ExecutionEvents.ActiveSession.CurrentWorkspacePath\r\n\r\na = str(f).split('pushbutton')\r\n\r\n\r\npath = a[0] + 'pushbutton' + IN[1] + IN[0] + '.rfa'\r\nOUT = [path, IN[0]]",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0d70d558d5354563aef8ed6c7060e2d1",
      "Inputs": [
        {
          "Id": "373a112e58af43e19245b8408297d6be",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fee92bf9269e464da03e3b8d66e191d1",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "76267817bfea47d7a895aa84fa9bbbd4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\n\r\nfrom Autodesk.Revit.DB import Document\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\npath = IN[0][0]\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nfamily = doc.LoadFamily(path)\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n#transfer name further\r\nOUT = IN[0][1]",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "8073f44491bf476db7efeeb94efcb32a",
      "Inputs": [
        {
          "Id": "7047a0b84537460c9f59c182b286f252",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ff9dd2ca184a46ed8d69e721194cf670",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "\\",
      "Id": "0352f9308ca548e8b999362e2b2a93fe",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "073e2af74d384a02a64aa79ac7d548a0",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    }
  ],
  "Connectors": [
    {
      "Start": "48e6a5a09b714c60948da21d7eae6e19",
      "End": "d4a8a67a48a941599edd49e0c87133e6",
      "Id": "6bce339ff93d45d9b855d2a63ba802bf",
      "IsHidden": "False"
    },
    {
      "Start": "7ed82a137c454e829bc1b7e184fd50c9",
      "End": "4ae90cd430d947aba14ffe722c6a770b",
      "Id": "c3919137e5554564ab18dd72d0c6ff39",
      "IsHidden": "False"
    },
    {
      "Start": "ec509f02eb1e4f0a980d9d438001006c",
      "End": "b41ea3a053184a47aae2cebe817cf232",
      "Id": "88cb7dd997fc4043b8d2ac6e610b8402",
      "IsHidden": "False"
    },
    {
      "Start": "099008b2cdcb4f688777bf1482570b79",
      "End": "fe399d183a374972a7c8919d4cea48a3",
      "Id": "7b288d7bc48f4066896bcbffe8338ca0",
      "IsHidden": "False"
    },
    {
      "Start": "aa82a5640b504fbca71150c8ad4c4270",
      "End": "82f7d5e73d49485b82762c87d40fe696",
      "Id": "51c8be1d3930410a96af1194f79ce9fa",
      "IsHidden": "False"
    },
    {
      "Start": "97d0f245bd7e4f349f6e4e27757dd1ca",
      "End": "2992d17865ab4f93bc5ec7a6a83b06a4",
      "Id": "4b022cf0f29e4cfdb5edfab4e378bfff",
      "IsHidden": "False"
    },
    {
      "Start": "97d0f245bd7e4f349f6e4e27757dd1ca",
      "End": "c0a7c185f0df41288afbfa8c611bc814",
      "Id": "4e098997b0d342f490b8caeb6d451549",
      "IsHidden": "False"
    },
    {
      "Start": "7912c615cfdd4570b991a1dd0ad59c17",
      "End": "ef90abbf35fa48df97d33862bd364e98",
      "Id": "32fad63423e244f28663f8a7dbb5a3c8",
      "IsHidden": "False"
    },
    {
      "Start": "78a85e98638249228f6395222eca962b",
      "End": "a1284822ec2941089c5b4f5557d58119",
      "Id": "87ccd3b336284c8db5097dd4e5cae26e",
      "IsHidden": "False"
    },
    {
      "Start": "f443b4dd16d643bcb58d348f1c5a9a14",
      "End": "d30c5fef0db04cd9a2ac931361465c30",
      "Id": "3d06728d71be4ce0a14107625bd89412",
      "IsHidden": "False"
    },
    {
      "Start": "6556749e04f74ab09ace02631e3bdc3b",
      "End": "e47dc78b707b43a8863ec3f9adf5c3ae",
      "Id": "73014540814d4caab36b6854c58e7486",
      "IsHidden": "False"
    },
    {
      "Start": "6556749e04f74ab09ace02631e3bdc3b",
      "End": "fc0dcf7fea5047109a772e008a478ac9",
      "Id": "285ec19a6eb443b69dc382d7c1dcd2dc",
      "IsHidden": "False"
    },
    {
      "Start": "2a1c8a2b1e4c4eec8c27719497aa512a",
      "End": "e01ed15705244474b66171d33e202a0d",
      "Id": "e7ecdfb2c34e4b7f9661b49043d351d0",
      "IsHidden": "False"
    },
    {
      "Start": "2caaf87e96a442cebce5e97aa693524f",
      "End": "373a112e58af43e19245b8408297d6be",
      "Id": "f958f5ed5cdd4ad698973c59aecd0d55",
      "IsHidden": "False"
    },
    {
      "Start": "9dea3be365944fe9b736563c1c953128",
      "End": "7959b2235ab641fc8fc6a30ed264c24a",
      "Id": "2ca80a49bd154b018c9ea583ccf2acc0",
      "IsHidden": "False"
    },
    {
      "Start": "32f7899daea043ec9a698b195e238d56",
      "End": "cce8e0fa2a0943f1bbf488ace445ce9b",
      "Id": "2745d11602c947bab9b257e1b32f80f0",
      "IsHidden": "False"
    },
    {
      "Start": "cf259867a94a47b5b7c1553c9dc88876",
      "End": "903cb4997a3d4910b8edede924d18464",
      "Id": "3e82743e9ffc48eb87183acf27032fc2",
      "IsHidden": "False"
    },
    {
      "Start": "4dd064102b1c442e9ec0131162348ad5",
      "End": "309a54ae66714fdd90582c2fbe4b3040",
      "Id": "f6e210d209cd4d7c9f9aeea7cfeac303",
      "IsHidden": "False"
    },
    {
      "Start": "96c6f354983d410aa407489a06b70c0a",
      "End": "8cbf42637e08460d91146d37a918dadd",
      "Id": "7e6fb6976ca44bce92588ae0890f2d9a",
      "IsHidden": "False"
    },
    {
      "Start": "a15875ba205f45389531aa25809242d6",
      "End": "568400e915934d97b4d8ed729f6778e3",
      "Id": "038402d3fd064cb0a922cae3fbcd07f8",
      "IsHidden": "False"
    },
    {
      "Start": "a15875ba205f45389531aa25809242d6",
      "End": "bdbf65ee90164a6c8adc21b9ccf938fd",
      "Id": "ef5fd250fc244c34a2baac6bbd95b371",
      "IsHidden": "False"
    },
    {
      "Start": "48901d4d3bd6403c8085ec3d57a9905c",
      "End": "82f8834c4da3420fa08a2b241749c1e3",
      "Id": "a6af2a124b974f22bc9b91917ea686dc",
      "IsHidden": "False"
    },
    {
      "Start": "7d320f20af7d47bf80ef0c85d471b29d",
      "End": "c4e56e9855114070a74f847285b88eb1",
      "Id": "e01cf0afb50b4fe8a3f297844697c754",
      "IsHidden": "False"
    },
    {
      "Start": "ee38ca30dae7467facb361b9ba460b15",
      "End": "f1c1678918814c32a908c400945b1c2c",
      "Id": "db576d32dc1d4041bd472084468eb4d2",
      "IsHidden": "False"
    },
    {
      "Start": "93ecc7be14794c40867a0aa8e22c48a4",
      "End": "c9f54df6d6144d93a6519039a0b71737",
      "Id": "237d972ddac74fefa4106c253b825c30",
      "IsHidden": "False"
    },
    {
      "Start": "80156add8b3f4bfbb29e5bb56cfd265b",
      "End": "1740931f63ad4e69ac7390f6c1c4c802",
      "Id": "ec3242836ba7471d8ee6cadd4e816c71",
      "IsHidden": "False"
    },
    {
      "Start": "a2345f1afd144db096bf5b46436fa779",
      "End": "7cf5291818ec406da1c140d6981e45a6",
      "Id": "5e97ec334ff746568b612e27520d8925",
      "IsHidden": "False"
    },
    {
      "Start": "2e96e4ed7e8c49b7a31cc110f7280397",
      "End": "ef70acb215734c2eac1a7acd7b5b2598",
      "Id": "a5a5591c6e4348a3806b7a77e55007af",
      "IsHidden": "False"
    },
    {
      "Start": "d5469562389a42de9b6acfe3751997aa",
      "End": "67e3e65109e740e99a36a72bd8db8871",
      "Id": "91658f8f8b7d4bcd88e378a7efd902d8",
      "IsHidden": "False"
    },
    {
      "Start": "709509a3e9564e32a7b220eb6b6c33d6",
      "End": "6afe69662b0644a99fc4656f32e7155e",
      "Id": "7efd72275c594a08a000bdb1813fea3f",
      "IsHidden": "False"
    },
    {
      "Start": "709509a3e9564e32a7b220eb6b6c33d6",
      "End": "8c10157b83ba44d48b6a7f6b205ef5d6",
      "Id": "3cc15bfea52d4a28ae1d8db8a58e1d27",
      "IsHidden": "False"
    },
    {
      "Start": "709509a3e9564e32a7b220eb6b6c33d6",
      "End": "de46126b04c843448781a311ead5adaf",
      "Id": "f20166f9c2014b3b8d90ff268c0062ed",
      "IsHidden": "False"
    },
    {
      "Start": "709509a3e9564e32a7b220eb6b6c33d6",
      "End": "737616e67810445f9d7c25764a80038f",
      "Id": "bfaf6972a4da43b4886388bce4349723",
      "IsHidden": "False"
    },
    {
      "Start": "709509a3e9564e32a7b220eb6b6c33d6",
      "End": "0004e68e273e4d6aa92c2aa01741e724",
      "Id": "a91eafc1833c45d4b8263ea938c894ec",
      "IsHidden": "False"
    },
    {
      "Start": "709509a3e9564e32a7b220eb6b6c33d6",
      "End": "0cdcacbef81f4e28b2d0a5f5eb338a50",
      "Id": "09f00b7900a245a285850adf0ab9a5dd",
      "IsHidden": "False"
    },
    {
      "Start": "d5ee4683354a4f41ac74864ea1af5b9d",
      "End": "c17f4484e4834bbabeebbe0be11ccaf8",
      "Id": "699a6620d7f8484bb18d548f12f813b8",
      "IsHidden": "False"
    },
    {
      "Start": "88c7aae1c87e4ed8a73caefc067a4cf1",
      "End": "68f6dc2f15014ef181fc6d584f710bfc",
      "Id": "59d6a64aac52464db340a398d137d653",
      "IsHidden": "False"
    },
    {
      "Start": "10424bec637045c697ba9269db0a274e",
      "End": "22f0063592ca479aafdb3dc74dc8a0e9",
      "Id": "46b186e16030414198c5cfb5508dd793",
      "IsHidden": "False"
    },
    {
      "Start": "2ade2ec7c50d4a2f85bccdb39564879e",
      "End": "e3eaef7a10534c4c873a5d7a23e94f72",
      "Id": "56f727fdf7994e3db7be5f3608189668",
      "IsHidden": "False"
    },
    {
      "Start": "af4ea390520642af8ce0cb7857345d46",
      "End": "90ecd9573402452a94446e65711c4cc9",
      "Id": "60989fff8b7f4764b88f2f4c5ad9ef2e",
      "IsHidden": "False"
    },
    {
      "Start": "f11d8718683f480cbe2d36073ed8cf40",
      "End": "d2d8f950d32341398a2fd80568b17f05",
      "Id": "32ae283898ef4edaae3f43c7218d08b6",
      "IsHidden": "False"
    },
    {
      "Start": "f11d8718683f480cbe2d36073ed8cf40",
      "End": "5539daeccdf344468db4fc8af73e1b7d",
      "Id": "2dbb2c0d27c745db8c15062947f529aa",
      "IsHidden": "False"
    },
    {
      "Start": "f11d8718683f480cbe2d36073ed8cf40",
      "End": "8ea723b4210444e198ce48f4be100adc",
      "Id": "2fd90407a9044efcb21337b1499d5158",
      "IsHidden": "False"
    },
    {
      "Start": "a452b82415784bf6a1976c4a25a0a407",
      "End": "03e87b0db79c4ce3a13e404fba9f2524",
      "Id": "b30187c48c324b1d9557c3b02cb188b1",
      "IsHidden": "False"
    },
    {
      "Start": "0b783f77efc2493da4d1e8c88d779077",
      "End": "472e065d3ab343e4a5a4ce4684dcef1b",
      "Id": "ea0fe0fc6a6f4149b071db0deb612198",
      "IsHidden": "False"
    },
    {
      "Start": "d747b87f61cd4d45af6bfb34717a0a2c",
      "End": "cc04c7f2e575415cadf43e4d9b9fae6a",
      "Id": "c0998b25bdf147b9bbe7787f0bf101db",
      "IsHidden": "False"
    },
    {
      "Start": "03c6e6a72e3d4f16af4e0d85013b7fb3",
      "End": "4cbed0955dec4bbf9066a916b03d9552",
      "Id": "5a6237b909a64d89a2ad32a38c9c9983",
      "IsHidden": "False"
    },
    {
      "Start": "57c027ec535d42c1a8eba0e76d9bc6ce",
      "End": "7c52ebdd07194afab16ad16adb4c22ce",
      "Id": "04d49618928042228d75353e3720a896",
      "IsHidden": "False"
    },
    {
      "Start": "55d104933cc64cdc9cd96453f94cb3dd",
      "End": "466ba35f08294d4a85533243d6808e88",
      "Id": "ac071ed50ffb45ebb81979830091adb8",
      "IsHidden": "False"
    },
    {
      "Start": "6a0f59a309854f87b0c9a36eb461a55c",
      "End": "c1b440281f064d24b3a9dfeccc426f54",
      "Id": "72260142d6464d218850444f79f54554",
      "IsHidden": "False"
    },
    {
      "Start": "eb689ea81e38424eba74e4dd5229bfe9",
      "End": "9ceadf38cb434e1babddb89d9fcf1b05",
      "Id": "0b185fd8985d4543a8a572d5e8dd3eaa",
      "IsHidden": "False"
    },
    {
      "Start": "2c74050cc1e1458f8bccd92ed2a17b97",
      "End": "29cfb0283a43466bb960ab75f6f55f53",
      "Id": "55a9f37b093b40b1b7f5a716a042a71e",
      "IsHidden": "False"
    },
    {
      "Start": "4659979746bd453db65559a0d8f0bae0",
      "End": "a6ae5f2e0a7a4201b7a857339a7d1313",
      "Id": "9ae08c856cfe4cd3a16c38c56818e658",
      "IsHidden": "False"
    },
    {
      "Start": "c515d1ef4b354587b8fc8703ad2c1c81",
      "End": "4da6ccf852a94b41ac07e17b67f7cdfd",
      "Id": "61143b0b17574f2cbb8ed7fbd060af39",
      "IsHidden": "False"
    },
    {
      "Start": "c5fc0175adbc43778e19f475d09c46ba",
      "End": "9b0c60273f9a4df7aba0aca1487f90db",
      "Id": "a563d616bfc742e0a1769f3d9a100c3f",
      "IsHidden": "False"
    },
    {
      "Start": "f21f87dcabdd4ea09e8d20bf478657c5",
      "End": "05b35e81964947c0bb51798bee3d53c1",
      "Id": "d417ae3cf3744747b14dbaf6d02d0874",
      "IsHidden": "False"
    },
    {
      "Start": "2d41ea279dbc4b779d571360b038d7d4",
      "End": "552bf211e1c546eaaee0ad251c43ce8d",
      "Id": "d310d836d3244fb39d87f4b9b38324e1",
      "IsHidden": "False"
    },
    {
      "Start": "a539191e7a28477d9c8df74699eb06f3",
      "End": "ca120c5a2fe04f97b21ebe2f71a626f0",
      "Id": "7777f4498aeb4442a386179f69c27642",
      "IsHidden": "False"
    },
    {
      "Start": "6b02862c9ec247d99d1b4d3efe23a1a9",
      "End": "6e95625d77a84bb596d9d016e92a32cc",
      "Id": "e287f735ef6940428e1981c97eafa111",
      "IsHidden": "False"
    },
    {
      "Start": "eeb9d2f92da14f77bef4eec0d4618ac8",
      "End": "5f451264adfa4b83b2a45bec0b69e808",
      "Id": "2befde775c2b4f9f9227ef85fd0d77bf",
      "IsHidden": "False"
    },
    {
      "Start": "6b1565ae49c34d3c93cc446befaf314f",
      "End": "1ba79f77b8f24d1ba62aa6d937669c91",
      "Id": "4912f55857c049f69a5ddca76f8aedd7",
      "IsHidden": "False"
    },
    {
      "Start": "c38aa89478cb4c1991fcb778965dd6b6",
      "End": "5be6a0a7802644208d34a7dc51105ca5",
      "Id": "1b76fbb1e42d40318c995b9520cf062a",
      "IsHidden": "False"
    },
    {
      "Start": "1942e442e234431f91f0b5f643334f82",
      "End": "6b9350b2dad74a7c93504c0cccdff7ba",
      "Id": "e74216b98a8c4700917c842148ba07c8",
      "IsHidden": "False"
    },
    {
      "Start": "015f3595aa294e828784de72cf819839",
      "End": "6579c4491d1446bf9b5f42e8b839792a",
      "Id": "4b7714e177dd4cdba5112b6193fcbae5",
      "IsHidden": "False"
    },
    {
      "Start": "6ff16828a2b14fe2b37f384fc526acdb",
      "End": "58153cb1fbe849f3a1d5cba20a33e040",
      "Id": "3cde67e555bb4f6faeb11a5f7ee9bc99",
      "IsHidden": "False"
    },
    {
      "Start": "653d82a2501d49fd8c1f54ac07807ba7",
      "End": "8280adf1026042b48eb903d7dbb76e08",
      "Id": "3d144d80c3d445f8a82a03428146412c",
      "IsHidden": "False"
    },
    {
      "Start": "76267817bfea47d7a895aa84fa9bbbd4",
      "End": "7047a0b84537460c9f59c182b286f252",
      "Id": "057f01cec4b5446c87521b9e004b0cbc",
      "IsHidden": "False"
    },
    {
      "Start": "ff9dd2ca184a46ed8d69e721194cf670",
      "End": "fd31624650854514bd12ce6cbe4ae283",
      "Id": "224d31279bdc4af591ff786ea7bdb84d",
      "IsHidden": "False"
    },
    {
      "Start": "073e2af74d384a02a64aa79ac7d548a0",
      "End": "fee92bf9269e464da03e3b8d66e191d1",
      "Id": "e5ade28bb8a8481094d67fbbe86a3463",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "archi-lab.net",
      "Version": "2023.213.1722",
      "ReferenceType": "Package",
      "Nodes": [
        "bb6c6101dd4946e2ba0a61fce9b78704"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "2.0",
      "Data": {}
    }
  ],
  "Author": "None provided",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 10000.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.17.0.3472",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": 17553.876953125,
      "EyeY": -74134.8515625,
      "EyeZ": -96951.8671875,
      "LookX": -19584.65625,
      "LookY": 87491.4375,
      "LookZ": 14656.8203125,
      "UpX": -0.7069055438041687,
      "UpY": -0.46947172284126282,
      "UpZ": 0.52903765439987183
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "c84fabc69f604392bc4e752a4d0b0a8f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Data.ImportCSV",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1242.6211393870908,
        "Y": 460.97317359171655
      },
      {
        "Id": "5877719c35cc4a798ea1e546e76f9e67",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "x,y,h list for CSV",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 228.58820062279051,
        "Y": 455.5550166577483
      },
      {
        "Id": "b1aeea3311ca42aab64494800e8f0e35",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Flip X<>Y",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -50.001886891879394,
        "Y": 548.0111372567228
      },
      {
        "Id": "d027948b833541c191f0c3eda1870ee4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "to points",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1088.6458159293743,
        "Y": 493.27472200082394
      },
      {
        "Id": "95b1d7bd97a0404abe3256032932c253",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 214.28745114420371,
        "Y": 28.721803257241334
      },
      {
        "Id": "7fc028f20e8c47488ef5f1f02ef9feaa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "split",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -137.25032610370295,
        "Y": 141.38475835232737
      },
      {
        "Id": "e358610788fb4b43971ba895df10277a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "codenames",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1795.5141674024335,
        "Y": 7.3853607990785122
      },
      {
        "Id": "c24efc2935a541a794e90360d41616cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "sort by code",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2255.9150338232512,
        "Y": 352.33160489051374
      },
      {
        "Id": "e6fbf54f668242b58e1ce62da3e32fc7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "codename filter",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2248.5027937945806,
        "Y": 790.93280800296748
      },
      {
        "Id": "f6f0cb46bd9f476c84dc37553687d78f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Help",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2130.6588018172761,
        "Y": 941.2324280456827
      },
      {
        "Id": "91e0bff1683847ad8cf76f5373cec576",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "FamilyInstance.ByPoint",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3878.7435713849281,
        "Y": 223.70781227845316
      },
      {
        "Id": "7c019b8b9c344f43b03779016a04cded",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "FamilyType.ByName",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3164.3389862677514,
        "Y": -578.67244843186609
      },
      {
        "Id": "c391607d79564aed86e57a8a4c5e436d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "name",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2486.5983680282966,
        "Y": -1112.8796022971117
      },
      {
        "Id": "af5ca01093c747aeb44ecde9b0d63157",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "to mm",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3190.1986139424266,
        "Y": 376.95115154731491
      },
      {
        "Id": "5e3756254b654b77afefd056ead64d22",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "remove point at",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2481.0916152582104,
        "Y": -11.579252199273014
      },
      {
        "Id": "887cf07403964d3f987b5b6a840ea57f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "pos",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2337.2915131901245,
        "Y": 127.31566161725954
      },
      {
        "Id": "1ba86d31a511470ba1027688c4f90a3c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Local site base point (False=Global)",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -184.71177361855723,
        "Y": 678.61534984244781
      },
      {
        "Id": "41148ec02dc1431b8ab4d54373ca1a5a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Help",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3041.9202526673125,
        "Y": 223.72840229362015
      },
      {
        "Id": "5e5240101c3247d0b9c42a31343676b7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Z from 0",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -30.842312214411777,
        "Y": 801.55285350880968
      },
      {
        "Id": "0df36a59e3104ff49fdf771cb2526a1c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2975.2660117496125,
        "Y": 364.51758636781835
      },
      {
        "Id": "ee788cdf52684b8dbcbe2e3e8dc7c721",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "remove double points",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1598.2193002295899,
        "Y": 487.496438238072
      },
      {
        "Id": "df51d4c6daf0430cb1abca7ceedeedc4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "remove if accuracy less than",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 675.49522840433917,
        "Y": 503.33250408442143
      },
      {
        "Id": "cbd1896a3cc944dbbb27dba74902557c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "tolerance, m",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 494.68564301372658,
        "Y": 616.97314087503355
      },
      {
        "Id": "1bb1ec564d6048a9ba1340b6dd05d0e7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1911.3742217126978,
        "Y": 487.205130811392
      },
      {
        "Id": "9eaccc50a68246b883521b8d37bf2184",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "doubles",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1877.1064115029851,
        "Y": 675.28963963934325
      },
      {
        "Id": "c00708b50df84a27bbd33991babb4b1f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 508.87173057447126,
        "Y": 383.39252975531241
      },
      {
        "Id": "0a451407ffdd4ac19576d1f16ab0f2a7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "get comments",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -115.69088686966438,
        "Y": -137.20971498612664
      },
      {
        "Id": "a70867da080048fc806daa86d6a259b4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element.SetParameterByName",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4237.5112494561581,
        "Y": -172.65765188611772
      },
      {
        "Id": "3dcb3c09b6094275a6b479c0a7727d23",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3994.2001021326078,
        "Y": -1.2072838823963821
      },
      {
        "Id": "982ba65340e5498a96188aa1aefea1fd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element.SetParameterByName",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4239.9787952771976,
        "Y": -485.12174838898613
      },
      {
        "Id": "9af897fc515e40308cd92407e141e96e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3996.6676479536472,
        "Y": -313.67138038526446
      },
      {
        "Id": "72d08abdd56346368a01c724948a83e5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "get code",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -95.770514016211337,
        "Y": -391.96077212426076
      },
      {
        "Id": "8677111c044b4d36945e336d1458e308",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "delete \"Deleted\"",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -583.15652832254159,
        "Y": 451.78661343049697
      },
      {
        "Id": "b65d3a0d86d849a7afe4ac49a053364d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "show only pos",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2837.7645388114342,
        "Y": -14.278534635839208
      },
      {
        "Id": "66cbdd4c218d4599ac4263b6de92fb3b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "pos",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2704.80559695845,
        "Y": 115.58207900144185
      },
      {
        "Id": "0f0983a794d846afbd2d1f1d53f203c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "delete \"ToDo\"s",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -852.39610636192288,
        "Y": 453.8170303089218
      },
      {
        "Id": "9972009cd8da44a19da30c3ac74945ef",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "length",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -456.298758148076,
        "Y": 592.50302521731635
      },
      {
        "Id": "89bfd7f1d2ad4e01a6f40e0bc5b70ee5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.X",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 394.58907774518889,
        "Y": 1099.3901697590488
      },
      {
        "Id": "1e56ae67c8bf4952a6d504ec1079965d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Y",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 388.31287210267851,
        "Y": 1251.2743463078025
      },
      {
        "Id": "66fb33f5941d49d4928ac097393f144e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Z",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 393.33383661668654,
        "Y": 1399.39279947105
      },
      {
        "Id": "bb6c6101dd4946e2ba0a61fce9b78704",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Select.GetSurveyPoint",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 66.9711432061415,
        "Y": 1255.0400696933091
      },
      {
        "Id": "661dacabdc5349158a7932fb7c8b2856",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Easting",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 668.48987456244663,
        "Y": 1069.2411796149679
      },
      {
        "Id": "f8245a599ca843a29ceba83c8b0df804",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Northing",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 664.90653513061329,
        "Y": 1247.4015618062319
      },
      {
        "Id": "bddec3ac96af4d389eca1093b1c9cf68",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 657.333159331584,
        "Y": 1430.6248375395223
      },
      {
        "Id": "821ce1e57a8348e6a37b3a733ad7c52c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "relative to base point",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 606.20206160777775,
        "Y": 838.25828454884379
      },
      {
        "Id": "7389863ea48b481bbec7508936ad1aae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Coordinates.ProjectRotation",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1132.3334088809131,
        "Y": 1354.3947242256622
      },
      {
        "Id": "eeb84358176d4908866f78bbaf7dfa65",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Geometry.Rotate",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1470.1336647017226,
        "Y": 1092.6008318825434
      },
      {
        "Id": "37f8493a0f0140c9bef416ba11f83b44",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Vector.ZAxis",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1168.9218211427926,
        "Y": 1231.0380527689595
      },
      {
        "Id": "55f84f57d5644f4a9bf460241bbfc136",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Coordinates.SurveyPoint",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1102.2450405357351,
        "Y": 1111.0198476762562
      },
      {
        "Id": "b9e9d4b757894430b8ac13225e88c87d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "to prepare project for import SV points",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1631.4494131209626,
        "Y": 697.76835956345258
      },
      {
        "Id": "339c549409394f239ce865b0e9e0ec3e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Boolean",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2284.8082070287855,
        "Y": 392.79157043345367
      },
      {
        "Id": "4117c9affc3742d199487f52a487eba4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3091.6285559182611,
        "Y": 385.20494626860034
      },
      {
        "Id": "e016a97a76a24bfab9ec7f2d862ebf94",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2664.8285559182614,
        "Y": 246.40494626860038
      },
      {
        "Id": "4ac02112f3be4379aaced4214fc47123",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3202.7762724278805,
        "Y": 244.54407414017032
      },
      {
        "Id": "869e478b2ccd4985ad4435a23aeaf96a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3031.8285559182618,
        "Y": 92.404946268600384
      },
      {
        "Id": "3ddbecc4b2e5409390fcf771a5c2f7de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1915.1561984627911,
        "Y": 316.66782594246718
      },
      {
        "Id": "452759344dd540a7a9e4a32e581662c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2451.8901488331394,
        "Y": 514.12330767478352
      },
      {
        "Id": "014a25112e434b37aacca9a492cdc3fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2734.3950542377388,
        "Y": 625.48752654004045
      },
      {
        "Id": "d1379b67d5834d22a4aa5e682f442b71",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2394.3075261924464,
        "Y": 745.41059389309157
      },
      {
        "Id": "1d088b24902e4fa598ae8e88414795d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2376.2707974074419,
        "Y": 875.01474377142438
      },
      {
        "Id": "3b58078f463f44b4b583842410ff0e4f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2392.6973737915114,
        "Y": 1009.9931554116732
      },
      {
        "Id": "b024ae9b41c641dd8f41180cc0e2cb19",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2347.4027543024272,
        "Y": 185.76279543702674
      },
      {
        "Id": "8ab61917ed584dcf916a65491c320901",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2376.4438326027744,
        "Y": -60.50470181216707
      },
      {
        "Id": "9637c216a02f4a88b8d390aa50fb14ac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2437.6633881755965,
        "Y": 59.913650503686085
      },
      {
        "Id": "ef14440338fd4f14a7e5ad7b08308b4b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1536.2643992774106,
        "Y": 490.59738415612378
      },
      {
        "Id": "0d70d558d5354563aef8ed6c7060e2d1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "control point family filepath",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2939.0143168401855,
        "Y": -1114.4618823211774
      },
      {
        "Id": "8073f44491bf476db7efeeb94efcb32a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "this script filepath",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3296.6091353132151,
        "Y": -1025.8005449044447
      },
      {
        "Id": "0352f9308ca548e8b999362e2b2a93fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2707.4697000834535,
        "Y": -977.64721192048842
      }
    ],
    "Annotations": [
      {
        "Id": "2fa71157144e47dabe248ba8fad6f5bc",
        "Title": "points filter by code",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "e6fbf54f668242b58e1ce62da3e32fc7",
          "f6f0cb46bd9f476c84dc37553687d78f"
        ],
        "HasNestedGroups": false,
        "Left": 2120.6588018172761,
        "Top": 717.93280800296748,
        "Width": 401.0,
        "Height": 365.29962004271533,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 790.93280800296748,
        "InitialHeight": 295.29962004271533,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "9f2eb40303ec4dafadf8efb969e34180",
        "Title": "family name",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "c391607d79564aed86e57a8a4c5e436d"
        ],
        "HasNestedGroups": false,
        "Left": 2476.5983680282966,
        "Top": -1228.8796022971117,
        "Width": 168.0,
        "Height": 248.0,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -1112.8796022971117,
        "InitialHeight": 145.0,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "c9afb75cd60b486a88e49fa44df3fc1b",
        "Title": "remove at pos",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "5e3756254b654b77afefd056ead64d22",
          "887cf07403964d3f987b5b6a840ea57f"
        ],
        "HasNestedGroups": false,
        "Left": 2327.2915131901245,
        "Top": -84.579252199273014,
        "Width": 354.80010206808583,
        "Height": 343.89491381653255,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -11.579252199273014,
        "InitialHeight": 283.89491381653255,
        "TextblockHeight": 63.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "b9ce6b0faee54772baa5458955e9327a",
        "Title": "coordinate transformation",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "5877719c35cc4a798ea1e546e76f9e67",
          "b1aeea3311ca42aab64494800e8f0e35",
          "1ba86d31a511470ba1027688c4f90a3c",
          "5e5240101c3247d0b9c42a31343676b7"
        ],
        "HasNestedGroups": false,
        "Left": -194.71177361855723,
        "Top": 382.5550166577483,
        "Width": 626.29997424134774,
        "Height": 550.99783685106138,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 455.5550166577483,
        "InitialHeight": 490.99783685106138,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "b81e3ee59e4741c3b4aca24839c68f17",
        "Title": "show only pos",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "b65d3a0d86d849a7afe4ac49a053364d",
          "66cbdd4c218d4599ac4263b6de92fb3b"
        ],
        "HasNestedGroups": false,
        "Left": 2694.80559695845,
        "Top": -87.278534635839208,
        "Width": 332.958941852984,
        "Height": 334.86061363728106,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -14.278534635839208,
        "InitialHeight": 274.86061363728106,
        "TextblockHeight": 63.0,
        "Background": "#FFD4B6DB"
      },
      {
        "Id": "91155f6c6355473fa96ff075b677dcb3",
        "Title": "Base point",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "89bfd7f1d2ad4e01a6f40e0bc5b70ee5",
          "1e56ae67c8bf4952a6d504ec1079965d",
          "66fb33f5941d49d4928ac097393f144e",
          "bb6c6101dd4946e2ba0a61fce9b78704",
          "661dacabdc5349158a7932fb7c8b2856",
          "f8245a599ca843a29ceba83c8b0df804",
          "bddec3ac96af4d389eca1093b1c9cf68"
        ],
        "HasNestedGroups": false,
        "Left": 56.971143206141505,
        "Top": 996.2411796149679,
        "Width": 836.51873135630512,
        "Height": 566.38365792455443,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 1069.2411796149679,
        "InitialHeight": 506.38365792455443,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "7d9096a4db234ca4801edf7616777320",
        "Title": "get rotation",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7389863ea48b481bbec7508936ad1aae",
          "eeb84358176d4908866f78bbaf7dfa65",
          "37f8493a0f0140c9bef416ba11f83b44",
          "55f84f57d5644f4a9bf460241bbfc136"
        ],
        "HasNestedGroups": false,
        "Left": 1092.2450405357351,
        "Top": 1019.6008318825434,
        "Width": 629.88862416598749,
        "Height": 466.79389234311884,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 1092.6008318825434,
        "InitialHeight": 406.79389234311884,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 1956.6608108685568,
    "Y": -68.8470828805182,
    "Zoom": 0.7569783800364196
  }
}